//! Implementation of Unicode Standard Annex #31 for 
//! determining which `char` values are valid in programming language identifiers.
#![feature
(
    
)]

#![allow
(
    bare_trait_objects,
    deprecated,
    mismatched_lifetime_syntaxes,
    non_camel_case_types,
    non_fmt_panics,
    non_snake_case,
    non_upper_case_globals,
    unused_attributes,
    unused_imports,
    unused_variables,
)]
/*
pub mod _
{
    pub use std::_::{ * };
}

pub mod __
{
    /*!
    */
    use ::
    {
        *,
    };
    /*
    */
}

pub mod error;
pub mod obj;
pub mod tup;
pub mod types;
pub mod value;
pub mod parse;
*/
#[macro_use] extern crate lazy_static;
extern crate rand;
extern crate proc_macro;

#[macro_use] pub mod macros
{
    /// Performs variable interpolation against the input and produces it as [`process::macros::TokenStream`].
    #[macro_export] macro_rules! quote
    {
        () =>
        {
            ::__private::TokenStream::new()
        };
       
        ($tt:tt) => 
        {{
            let mut _s = ::__private::TokenStream::new();
            ::quote_token!{$tt _s}
            _s
        }};
       
        
        (# $var:ident) => 
        {{
            let mut _s = ::__private::TokenStream::new();
            ::ToTokens::to_tokens(&$var, &mut _s);
            _s
        }};
        
        ($tt1:tt $tt2:tt) =>
        {{
            let mut _s = ::__private::TokenStream::new();
            ::quote_token!{$tt1 _s}
            ::quote_token!{$tt2 _s}
            _s
        }};
       
        ($($tt:tt)*) => {{
            let mut _s = ::__private::TokenStream::new();
            ::quote_each_token!{_s $($tt)*}
            _s
        }};
    }
    /// Same as `quote!`, but applies a given span to all tokens originating within the macro invocation.
    #[macro_export] macro_rules! quote_spanned
    {
        ($span:expr=>) => {{
            let _: ::__private::Span = ::__private::get_span($span).__into_span();
            ::__private::TokenStream::new()
        }};
       
        ($span:expr=> $tt:tt) => {{
            let mut _s = ::__private::TokenStream::new();
            let _span: ::__private::Span = ::__private::get_span($span).__into_span();
            ::quote_token_spanned!{$tt _s _span}
            _s
        }};
       
        ($span:expr=> # $var:ident) => {{
            let mut _s = ::__private::TokenStream::new();
            let _: ::__private::Span = ::__private::get_span($span).__into_span();
            ::ToTokens::to_tokens(&$var, &mut _s);
            _s
        }};
        ($span:expr=> $tt1:tt $tt2:tt) => {{
            let mut _s = ::__private::TokenStream::new();
            let _span: ::__private::Span = ::__private::get_span($span).__into_span();
            ::quote_token_spanned!{$tt1 _s _span}
            ::quote_token_spanned!{$tt2 _s _span}
            _s
        }};
       
        ($span:expr=> $($tt:tt)*) => {{
            let mut _s = ::__private::TokenStream::new();
            let _span: ::__private::Span = ::__private::get_span($span).__into_span();
            ::quote_each_token_spanned!{_s _span $($tt)*}
            _s
        }};
    }
   
    #[macro_export] macro_rules! pounded_var_names
    {
        ($call:ident! $extra:tt $($tts:tt)*) => {
            ::pounded_var_names_with_context!{$call! $extra
                (@ $($tts)*)
                ($($tts)* @)
            }
        };
    }

    #[macro_export] macro_rules! pounded_var_names_with_context
    {
        ($call:ident! $extra:tt ($($b1:tt)*) ($($curr:tt)*)) => {
            $(
                ::pounded_var_with_context!{$call! $extra $b1 $curr}
            )*
        };
    }

    #[macro_export] macro_rules! pounded_var_with_context
    {
        ($call:ident! $extra:tt $b1:tt ( $($inner:tt)* )) => {
            ::pounded_var_names!{$call! $extra $($inner)*}
        };

        ($call:ident! $extra:tt $b1:tt [ $($inner:tt)* ]) => {
            ::pounded_var_names!{$call! $extra $($inner)*}
        };

        ($call:ident! $extra:tt $b1:tt { $($inner:tt)* }) => {
            ::pounded_var_names!{$call! $extra $($inner)*}
        };

        ($call:ident!($($extra:tt)*) # $var:ident) => {
            ::$call!($($extra)* $var);
        };

        ($call:ident! $extra:tt $b1:tt $curr:tt) => {};
    }

    #[macro_export] macro_rules! quote_bind_into_iter 
    {
        ($has_iter:ident $var:ident) => {
           
            #[allow(unused_mut)]
            let (mut $var, i) = $var.quote_into_iter();
            let $has_iter = $has_iter | i;
        };
    }

    #[macro_export] macro_rules! quote_bind_next_or_break 
    {
        ($var:ident) => {
            let $var = match $var.next() {
                Some(_x) => ::__private::RepInterp(_x),
                None => break,
            };
        };
    }
    
    #[macro_export] macro_rules! quote_each_token 
    {
        ($tokens:ident $($tts:tt)*) => {
            ::quote_tokens_with_context!{$tokens
                (@ @ @ @ @ @ $($tts)*)
                (@ @ @ @ @ $($tts)* @)
                (@ @ @ @ $($tts)* @ @)
                (@ @ @ $(($tts))* @ @ @)
                (@ @ $($tts)* @ @ @ @)
                (@ $($tts)* @ @ @ @ @)
                ($($tts)* @ @ @ @ @ @)
            }
        };
    }

    #[macro_export] macro_rules! quote_each_token_spanned 
    {
        ($tokens:ident $span:ident $($tts:tt)*) => {
            ::quote_tokens_with_context_spanned!{$tokens $span
                (@ @ @ @ @ @ $($tts)*)
                (@ @ @ @ @ $($tts)* @)
                (@ @ @ @ $($tts)* @ @)
                (@ @ @ $(($tts))* @ @ @)
                (@ @ $($tts)* @ @ @ @)
                (@ $($tts)* @ @ @ @ @)
                ($($tts)* @ @ @ @ @ @)
            }
        };
    }

    #[macro_export] macro_rules! quote_tokens_with_context
    {
        ($tokens:ident
            ($($b3:tt)*) ($($b2:tt)*) ($($b1:tt)*)
            ($($curr:tt)*)
            ($($a1:tt)*) ($($a2:tt)*) ($($a3:tt)*)
        ) => {
            $(
                ::quote_token_with_context!{$tokens $b3 $b2 $b1 $curr $a1 $a2 $a3}
            )*
        };
    }

    #[macro_export] macro_rules! quote_tokens_with_context_spanned
    {
        ($tokens:ident $span:ident
            ($($b3:tt)*) ($($b2:tt)*) ($($b1:tt)*)
            ($($curr:tt)*)
            ($($a1:tt)*) ($($a2:tt)*) ($($a3:tt)*)
        ) => {
            $(
                ::quote_token_with_context_spanned!{$tokens $span $b3 $b2 $b1 $curr $a1 $a2 $a3}
            )*
        };
    }

    #[macro_export] macro_rules! quote_token_with_context
    {  
        ($tokens:ident $b3:tt $b2:tt $b1:tt @ $a1:tt $a2:tt $a3:tt) => {};
       
        ($tokens:ident $b3:tt $b2:tt $b1:tt (#) ( $($inner:tt)* ) * $a3:tt) => 
        {{
            use ::__private::ext::*;
            let has_iter = ::__private::ThereIsNoIteratorInRepetition;
            ::pounded_var_names!{quote_bind_into_iter!(has_iter) () $($inner)*}
            let _: ::__private::HasIterator = has_iter;
            
            while true 
            {
                ::pounded_var_names!{quote_bind_next_or_break!() () $($inner)*}
                ::quote_each_token!{$tokens $($inner)*}
            }
        }};
       
        ($tokens:ident $b3:tt $b2:tt # (( $($inner:tt)* )) * $a2:tt $a3:tt) => {};
       
        ($tokens:ident $b3:tt # ( $($inner:tt)* ) (*) $a1:tt $a2:tt $a3:tt) => {};
       
        ($tokens:ident $b3:tt $b2:tt $b1:tt (#) ( $($inner:tt)* ) $sep:tt *) => 
        {{
            use ::__private::ext::*;
            let mut _i = 0usize;
            let has_iter = ::__private::ThereIsNoIteratorInRepetition;
            ::pounded_var_names!{quote_bind_into_iter!(has_iter) () $($inner)*}
            let _: ::__private::HasIterator = has_iter;
            while true {
                ::pounded_var_names!{quote_bind_next_or_break!() () $($inner)*}
                if _i > 0 {
                    ::quote_token!{$sep $tokens}
                }
                _i += 1;
                ::quote_each_token!{$tokens $($inner)*}
            }
        }};
       
        ($tokens:ident $b3:tt $b2:tt # (( $($inner:tt)* )) $sep:tt * $a3:tt) => {};
       
        ($tokens:ident $b3:tt # ( $($inner:tt)* ) ($sep:tt) * $a2:tt $a3:tt) => {};
       
       
        ($tokens:ident # ( $($inner:tt)* ) * (*) $a1:tt $a2:tt $a3:tt) => {
            ::quote_token!{* $tokens}
        };
       
        ($tokens:ident # ( $($inner:tt)* ) $sep:tt (*) $a1:tt $a2:tt $a3:tt) => {};
       
        ($tokens:ident $b3:tt $b2:tt $b1:tt (#) $var:ident $a2:tt $a3:tt) => {
            ::ToTokens::to_tokens(&$var, &mut $tokens);
        };
       
        ($tokens:ident $b3:tt $b2:tt # ($var:ident) $a1:tt $a2:tt $a3:tt) => {};
       
        ($tokens:ident $b3:tt $b2:tt $b1:tt ($curr:tt) $a1:tt $a2:tt $a3:tt) => {
            ::quote_token!{$curr $tokens}
        };
    }
    
    #[macro_export] macro_rules! quote_token_with_context_spanned 
    {
        ($tokens:ident $span:ident $b3:tt $b2:tt $b1:tt @ $a1:tt $a2:tt $a3:tt) => {};

        ($tokens:ident $span:ident $b3:tt $b2:tt $b1:tt (#) ( $($inner:tt)* ) * $a3:tt) => {{
            use ::__private::ext::*;
            let has_iter = ::__private::ThereIsNoIteratorInRepetition;
            ::pounded_var_names!{quote_bind_into_iter!(has_iter) () $($inner)*}
            let _: ::__private::HasIterator = has_iter;
            while true {
                ::pounded_var_names!{quote_bind_next_or_break!() () $($inner)*}
                ::quote_each_token_spanned!{$tokens $span $($inner)*}
            }
        }};
        ($tokens:ident $span:ident $b3:tt $b2:tt # (( $($inner:tt)* )) * $a2:tt $a3:tt) => {};
        ($tokens:ident $span:ident $b3:tt # ( $($inner:tt)* ) (*) $a1:tt $a2:tt $a3:tt) => {};

        ($tokens:ident $span:ident $b3:tt $b2:tt $b1:tt (#) ( $($inner:tt)* ) $sep:tt *) => {{
            use ::__private::ext::*;
            let mut _i = 0usize;
            let has_iter = ::__private::ThereIsNoIteratorInRepetition;
            ::pounded_var_names!{quote_bind_into_iter!(has_iter) () $($inner)*}
            let _: ::__private::HasIterator = has_iter;
            while true {
                ::pounded_var_names!{quote_bind_next_or_break!() () $($inner)*}
                if _i > 0 {
                    ::quote_token_spanned!{$sep $tokens $span}
                }
                _i += 1;
                ::quote_each_token_spanned!{$tokens $span $($inner)*}
            }
        }};
        ($tokens:ident $span:ident $b3:tt $b2:tt # (( $($inner:tt)* )) $sep:tt * $a3:tt) => {};
        ($tokens:ident $span:ident $b3:tt # ( $($inner:tt)* ) ($sep:tt) * $a2:tt $a3:tt) => {};
        ($tokens:ident $span:ident # ( $($inner:tt)* ) * (*) $a1:tt $a2:tt $a3:tt) => {
            ::quote_token_spanned!{* $tokens $span}
        };
        ($tokens:ident $span:ident # ( $($inner:tt)* ) $sep:tt (*) $a1:tt $a2:tt $a3:tt) => {};

        ($tokens:ident $span:ident $b3:tt $b2:tt $b1:tt (#) $var:ident $a2:tt $a3:tt) => {
            ::ToTokens::to_tokens(&$var, &mut $tokens);
        };
        ($tokens:ident $span:ident $b3:tt $b2:tt # ($var:ident) $a1:tt $a2:tt $a3:tt) => {};

        ($tokens:ident $span:ident $b3:tt $b2:tt $b1:tt ($curr:tt) $a1:tt $a2:tt $a3:tt) => {
            ::quote_token_spanned!{$curr $tokens $span}
        };
    }
    
    #[macro_export] macro_rules! quote_token
    {
        ($ident:ident $tokens:ident) =>
        {
            ::__private::push_ident(&mut $tokens, stringify!($ident));
        };

        (:: $tokens:ident) =>
        {
            ::__private::push_colon2(&mut $tokens);
        };

        (( $($inner:tt)* ) $tokens:ident) =>
        {
            ::__private::push_group
            (
                &mut $tokens,
                ::__private::Delimiter::Parenthesis,
                ::quote!($($inner)*),
            );
        };

        ([ $($inner:tt)* ] $tokens:ident) =>
        {
            ::__private::push_group
            (
                &mut $tokens,
                ::__private::Delimiter::Bracket,
                ::quote!($($inner)*),
            );
        };

        ({ $($inner:tt)* } $tokens:ident) =>
        {
            ::__private::push_group
            (
                &mut $tokens,
                ::__private::Delimiter::Brace,
                ::quote!($($inner)*),
            );
        };

        (# $tokens:ident) =>
        {
            ::__private::push_pound(&mut $tokens);
        };

        (, $tokens:ident) =>
        {
            ::__private::push_comma(&mut $tokens);
        };

        (. $tokens:ident) =>
        {
            ::__private::push_dot(&mut $tokens);
        };

        (; $tokens:ident) =>
        {
            ::__private::push_semi(&mut $tokens);
        };

        (: $tokens:ident) =>
        {
            ::__private::push_colon(&mut $tokens);
        };

        (+ $tokens:ident) =>
        {
            ::__private::push_add(&mut $tokens);
        };

        (+= $tokens:ident) =>
        {
            ::__private::push_add_eq(&mut $tokens);
        };

        (& $tokens:ident) =>
        {
            ::__private::push_and(&mut $tokens);
        };

        (&& $tokens:ident) =>
        {
            ::__private::push_and_and(&mut $tokens);
        };

        (&= $tokens:ident) =>
        {
            ::__private::push_and_eq(&mut $tokens);
        };

        (@ $tokens:ident) =>
        {
            ::__private::push_at(&mut $tokens);
        };

        (! $tokens:ident) =>
        {
            ::__private::push_bang(&mut $tokens);
        };

        (^ $tokens:ident) =>
        {
            ::__private::push_caret(&mut $tokens);
        };

        (^= $tokens:ident) =>
        {
            ::__private::push_caret_eq(&mut $tokens);
        };

        (/ $tokens:ident) =>
        {
            ::__private::push_div(&mut $tokens);
        };

        (/= $tokens:ident) =>
        {
            ::__private::push_div_eq(&mut $tokens);
        };

        (.. $tokens:ident) =>
        {
            ::__private::push_dot2(&mut $tokens);
        };

        (... $tokens:ident) =>
        {
            ::__private::push_dot3(&mut $tokens);
        };

        (..= $tokens:ident) =>
        {
            ::__private::push_dot_dot_eq(&mut $tokens);
        };

        (= $tokens:ident) =>
        {
            ::__private::push_eq(&mut $tokens);
        };

        (== $tokens:ident) =>
        {
            ::__private::push_eq_eq(&mut $tokens);
        };

        (>= $tokens:ident) =>
        {
            ::__private::push_ge(&mut $tokens);
        };

        (> $tokens:ident) =>
        {
            ::__private::push_gt(&mut $tokens);
        };

        (<= $tokens:ident) =>
        {
            ::__private::push_le(&mut $tokens);
        };

        (< $tokens:ident) =>
        {
            ::__private::push_lt(&mut $tokens);
        };

        (*= $tokens:ident) =>
        {
            ::__private::push_mul_eq(&mut $tokens);
        };

        (!= $tokens:ident) =>
        {
            ::__private::push_ne(&mut $tokens);
        };

        (| $tokens:ident) =>
        {
            ::__private::push_or(&mut $tokens);
        };

        (|= $tokens:ident) =>
        {
            ::__private::push_or_eq(&mut $tokens);
        };

        (|| $tokens:ident) =>
        {
            ::__private::push_or_or(&mut $tokens);
        };

        (? $tokens:ident) =>
        {
            ::__private::push_question(&mut $tokens);
        };

        (-> $tokens:ident) =>
        {
            ::__private::push_rarrow(&mut $tokens);
        };

        (<- $tokens:ident) =>
        {
            ::__private::push_larrow(&mut $tokens);
        };

        (% $tokens:ident) =>
        {
            ::__private::push_rem(&mut $tokens);
        };

        (%= $tokens:ident) =>
        {
            ::__private::push_rem_eq(&mut $tokens);
        };

        (=> $tokens:ident) =>
        {
            ::__private::push_fat_arrow(&mut $tokens);
        };

        (<< $tokens:ident) =>
        {
            ::__private::push_shl(&mut $tokens);
        };

        (<<= $tokens:ident) =>
        {
            ::__private::push_shl_eq(&mut $tokens);
        };

        (>> $tokens:ident) =>
        {
            ::__private::push_shr(&mut $tokens);
        };

        (>>= $tokens:ident) =>
        {
            ::__private::push_shr_eq(&mut $tokens);
        };

        (* $tokens:ident) =>
        {
            ::__private::push_star(&mut $tokens);
        };

        (- $tokens:ident) =>
        {
            ::__private::push_sub(&mut $tokens);
        };

        (-= $tokens:ident) =>
        {
            ::__private::push_sub_eq(&mut $tokens);
        };

        ($lifetime:lifetime $tokens:ident) =>
        {
            ::__private::push_lifetime(&mut $tokens, stringify!($lifetime));
        };

        (_ $tokens:ident) =>
        {
            ::__private::push_underscore(&mut $tokens);
        };

        ($other:tt $tokens:ident) =>
        {
            ::__private::parse(&mut $tokens, stringify!($other));
        };
    }

    #[macro_export] macro_rules! quote_token_spanned
    {
        ($ident:ident $tokens:ident $span:ident) =>
        {
            ::__private::push_ident_spanned(&mut $tokens, $span, stringify!($ident));
        };

        (:: $tokens:ident $span:ident) =>
        {
            ::__private::push_colon2_spanned(&mut $tokens, $span);
        };

        (( $($inner:tt)* ) $tokens:ident $span:ident) =>
        {
            ::__private::push_group_spanned            
            (
                &mut $tokens,
                $span,
                ::__private::Delimiter::Parenthesis,
                ::quote_spanned!($span=> $($inner)*),
            );
        };

        ([ $($inner:tt)* ] $tokens:ident $span:ident) =>
        {
            ::__private::push_group_spanned
            (
                &mut $tokens,
                $span,
                ::__private::Delimiter::Bracket,
                ::quote_spanned!($span=> $($inner)*),
            );
        };

        ({ $($inner:tt)* } $tokens:ident $span:ident) =>
        {
            ::__private::push_group_spanned
            
            (
                &mut $tokens,
                $span,
                ::__private::Delimiter::Brace,
                ::quote_spanned!($span=> $($inner)*),
            );
        };

        (# $tokens:ident $span:ident) =>
        {
            ::__private::push_pound_spanned(&mut $tokens, $span);
        };

        (, $tokens:ident $span:ident) =>
        {
            ::__private::push_comma_spanned(&mut $tokens, $span);
        };

        (. $tokens:ident $span:ident) =>
        {
            ::__private::push_dot_spanned(&mut $tokens, $span);
        };

        (; $tokens:ident $span:ident) =>
        {
            ::__private::push_semi_spanned(&mut $tokens, $span);
        };

        (: $tokens:ident $span:ident) =>
        {
            ::__private::push_colon_spanned(&mut $tokens, $span);
        };

        (+ $tokens:ident $span:ident) =>
        {
            ::__private::push_add_spanned(&mut $tokens, $span);
        };

        (+= $tokens:ident $span:ident) =>
        {
            ::__private::push_add_eq_spanned(&mut $tokens, $span);
        };

        (& $tokens:ident $span:ident) =>
        {
            ::__private::push_and_spanned(&mut $tokens, $span);
        };

        (&& $tokens:ident $span:ident) =>
        {
            ::__private::push_and_and_spanned(&mut $tokens, $span);
        };

        (&= $tokens:ident $span:ident) =>
        {
            ::__private::push_and_eq_spanned(&mut $tokens, $span);
        };

        (@ $tokens:ident $span:ident) =>
        {
            ::__private::push_at_spanned(&mut $tokens, $span);
        };

        (! $tokens:ident $span:ident) =>
        {
            ::__private::push_bang_spanned(&mut $tokens, $span);
        };

        (^ $tokens:ident $span:ident) =>
        {
            ::__private::push_caret_spanned(&mut $tokens, $span);
        };

        (^= $tokens:ident $span:ident) =>
        {
            ::__private::push_caret_eq_spanned(&mut $tokens, $span);
        };

        (/ $tokens:ident $span:ident) =>
        {
            ::__private::push_div_spanned(&mut $tokens, $span);
        };

        (/= $tokens:ident $span:ident) =>
        {
            ::__private::push_div_eq_spanned(&mut $tokens, $span);
        };

        (.. $tokens:ident $span:ident) =>
        {
            ::__private::push_dot2_spanned(&mut $tokens, $span);
        };

        (... $tokens:ident $span:ident) =>
        {
            ::__private::push_dot3_spanned(&mut $tokens, $span);
        };

        (..= $tokens:ident $span:ident) =>
        {
            ::__private::push_dot_dot_eq_spanned(&mut $tokens, $span);
        };

        (= $tokens:ident $span:ident) =>
        {
            ::__private::push_eq_spanned(&mut $tokens, $span);
        };

        (== $tokens:ident $span:ident) =>
        {
            ::__private::push_eq_eq_spanned(&mut $tokens, $span);
        };

        (>= $tokens:ident $span:ident) =>
        {
            ::__private::push_ge_spanned(&mut $tokens, $span);
        };

        (> $tokens:ident $span:ident) =>
        {
            ::__private::push_gt_spanned(&mut $tokens, $span);
        };

        (<= $tokens:ident $span:ident) =>
        {
            ::__private::push_le_spanned(&mut $tokens, $span);
        };

        (< $tokens:ident $span:ident) =>
        {
            ::__private::push_lt_spanned(&mut $tokens, $span);
        };

        (*= $tokens:ident $span:ident) =>
        {
            ::__private::push_mul_eq_spanned(&mut $tokens, $span);
        };

        (!= $tokens:ident $span:ident) =>
        {
            ::__private::push_ne_spanned(&mut $tokens, $span);
        };

        (| $tokens:ident $span:ident) =>
        {
            ::__private::push_or_spanned(&mut $tokens, $span);
        };

        (|= $tokens:ident $span:ident) =>
        {
            ::__private::push_or_eq_spanned(&mut $tokens, $span);
        };

        (|| $tokens:ident $span:ident) =>
        {
            ::__private::push_or_or_spanned(&mut $tokens, $span);
        };

        (? $tokens:ident $span:ident) =>
        {
            ::__private::push_question_spanned(&mut $tokens, $span);
        };

        (-> $tokens:ident $span:ident) =>
        {
            ::__private::push_rarrow_spanned(&mut $tokens, $span);
        };

        (<- $tokens:ident $span:ident) =>
        {
            ::__private::push_larrow_spanned(&mut $tokens, $span);
        };

        (% $tokens:ident $span:ident) =>
        {
            ::__private::push_rem_spanned(&mut $tokens, $span);
        };

        (%= $tokens:ident $span:ident) =>
        {
            ::__private::push_rem_eq_spanned(&mut $tokens, $span);
        };

        (=> $tokens:ident $span:ident) =>
        {
            ::__private::push_fat_arrow_spanned(&mut $tokens, $span);
        };

        (<< $tokens:ident $span:ident) =>
        {
            ::__private::push_shl_spanned(&mut $tokens, $span);
        };

        (<<= $tokens:ident $span:ident) =>
        {
            ::__private::push_shl_eq_spanned(&mut $tokens, $span);
        };

        (>> $tokens:ident $span:ident) =>
        {
            ::__private::push_shr_spanned(&mut $tokens, $span);
        };

        (>>= $tokens:ident $span:ident) =>
        {
            ::__private::push_shr_eq_spanned(&mut $tokens, $span);
        };

        (* $tokens:ident $span:ident) =>
        {
            ::__private::push_star_spanned(&mut $tokens, $span);
        };

        (- $tokens:ident $span:ident) =>
        {
            ::__private::push_sub_spanned(&mut $tokens, $span);
        };

        (-= $tokens:ident $span:ident) =>
        {
            ::__private::push_sub_eq_spanned(&mut $tokens, $span);
        };

        ($lifetime:lifetime $tokens:ident $span:ident) =>
        {
            ::__private::push_lifetime_spanned(&mut $tokens, $span, stringify!($lifetime));
        };

        (_ $tokens:ident $span:ident) =>
        {
            ::__private::push_underscore_spanned(&mut $tokens, $span);
        };

        ($other:tt $tokens:ident $span:ident) =>
        {
            ::__private::parse_spanned(&mut $tokens, $span, stringify!($other));
        };
    }

    #[macro_export] macro_rules! format_ident
    {
        ($fmt:expr) => {
            format_ident_impl!([
                ::quote::__private::Option::None,
                $fmt
            ])
        };

        ($fmt:expr, $($rest:tt)*) => {
            format_ident_impl!([
                ::quote::__private::Option::None,
                $fmt
            ] $($rest)*)
        };
    }

    #[macro_export] macro_rules! format_ident_impl
    {
       
        ([$span:expr, $($fmt:tt)*]) => {
            ::quote::__private::mk_ident(
                &::quote::__private::format!($($fmt)*),
                $span,
            )
        };

       
        ([$old:expr, $($fmt:tt)*] span = $span:expr) => {
            format_ident_impl!([$old, $($fmt)*] span = $span,)
        };
        ([$old:expr, $($fmt:tt)*] span = $span:expr, $($rest:tt)*) => {
            format_ident_impl!([
                ::quote::__private::Option::Some::<::quote::__private::Span>($span),
                $($fmt)*
            ] $($rest)*)
        };

       
        ([$span:expr, $($fmt:tt)*] $name:ident = $arg:expr) => {
            format_ident_impl!([$span, $($fmt)*] $name = $arg,)
        };
        ([$span:expr, $($fmt:tt)*] $name:ident = $arg:expr, $($rest:tt)*) => {
            match ::quote::__private::IdentFragmentAdapter(&$arg) {
                arg => format_ident_impl!([$span.or(arg.span()), $($fmt)*, $name = arg] $($rest)*),
            }
        };

       
        ([$span:expr, $($fmt:tt)*] $arg:expr) => {
            format_ident_impl!([$span, $($fmt)*] $arg,)
        };
        ([$span:expr, $($fmt:tt)*] $arg:expr, $($rest:tt)*) => {
            match ::quote::__private::IdentFragmentAdapter(&$arg) {
                arg => format_ident_impl!([$span.or(arg.span()), $($fmt)*, arg] $($rest)*),
            }
        };
    }

    #[macro_export] macro_rules! ast_struct 
    {
        (
            $(#[$attr:meta])*
            $pub:ident $struct:ident $name:ident #full $body:tt
        ) =>
        {
            check_keyword_matches!(pub $pub);
            check_keyword_matches!(struct $struct);
            $(#[$attr])* $pub $struct $name $body
        };

        (
            $(#[$attr:meta])*
            $pub:ident $struct:ident $name:ident $body:tt
        ) => {
            check_keyword_matches!(pub $pub);
            check_keyword_matches!(struct $struct);

            $(#[$attr])* $pub $struct $name $body
        };
    }
    
    #[macro_export] macro_rules! ast_enum
    {
        (
            $(#[$enum_attr:meta])*
            $pub:ident $enum:ident $name:ident $body:tt
        ) => {
            check_keyword_matches!(pub $pub);
            check_keyword_matches!(enum $enum);

            $(#[$enum_attr])* $pub $enum $name $body
        };
    }

    #[macro_export] macro_rules! ast_enum_of_structs
    {
        (
            $(#[$enum_attr:meta])*
            $pub:ident $enum:ident $name:ident $body:tt
        ) => {
            check_keyword_matches!(pub $pub);
            check_keyword_matches!(enum $enum);

            $(#[$enum_attr])* $pub $enum $name $body

            ast_enum_of_structs_impl!($name $body);

                generate_to_tokens!(() tokens $name $body);
        };
    }

    #[macro_export] macro_rules! ast_enum_of_structs_impl
    {
        (
            $name:ident {
                $(
                    $(#[cfg $cfg_attr:tt])*
                    $(#[doc $($doc_attr:tt)*])*
                    $variant:ident $( ($member:ident) )*,
                )*
            }
        ) => {
            $($(
                ast_enum_from_struct!($name::$variant, $member);
            )*)*
        };
    }

    #[macro_export] macro_rules! ast_enum_from_struct
    {
        ($name:ident::Verbatim, $member:ident) => {};

        ($name:ident::$variant:ident, $member:ident) =>
        {
            impl From<$member> for $name
            {
                fn from(e: $member) -> $name {
                    $name::$variant(e)
                }
            }
        };
    }
    
    #[macro_export] macro_rules! generate_to_tokens
    {
        (
            ($($arms:tt)*) $tokens:ident $name:ident {
                $(#[cfg $cfg_attr:tt])*
                $(#[doc $($doc_attr:tt)*])*
                $variant:ident,
                $($next:tt)*
            }
        ) => {
            generate_to_tokens!(
                ($($arms)* $(#[cfg $cfg_attr])* $name::$variant => {})
                $tokens $name { $($next)* }
            );
        };

        (
            ($($arms:tt)*) $tokens:ident $name:ident {
                $(#[cfg $cfg_attr:tt])*
                $(#[doc $($doc_attr:tt)*])*
                $variant:ident($member:ident),
                $($next:tt)*
            }
        ) => {
            generate_to_tokens!(
                ($($arms)* $(#[cfg $cfg_attr])* $name::$variant(_e) => _e.to_tokens($tokens),)
                $tokens $name { $($next)* }
            );
        };

        (($($arms:tt)*) $tokens:ident $name:ident {}) => {
            impl ::quote::ToTokens for $name {
                fn to_tokens(&self, $tokens:&mut ::process::macros::TokenStream )
                {
                    match self {
                        $($arms)*
                    }
                }
            }
        };
    }
    
    #[macro_export] macro_rules! pub_if_not_doc
    {
        ($(#[$m:meta])* $pub:ident $($item:tt)*) => {
            check_keyword_matches!(pub $pub);

            $(#[$m])*
            $pub $($item)*
        };
    }

    #[macro_export] macro_rules! check_keyword_matches 
    {
        (enum enum) => {};
        (pub pub) => {};
        (struct struct) => {};
    }

    #[macro_export] macro_rules! return_impl_trait
    {
        (
            $(#[$attr:meta])*
            $vis:vis fn $name:ident $args:tt -> $impl_trait:ty [$concrete:ty] $body:block
        ) => {
            #[cfg(not(docsrs))]
            $(#[$attr])*
            $vis fn $name $args -> $concrete $body

            #[cfg(docsrs)]
            $(#[$attr])*
            $vis fn $name $args -> $impl_trait $body
        };
    }
    /// Parse a set of parentheses and expose their content to subsequent parsers.
    #[macro_export] macro_rules! parenthesized
    {
        ($content:ident in $cursor:expr) => {
            match ::syntax::__private::parse_parens(&$cursor) {
                ::syntax::__private::Ok(parens) => {
                    $content = parens.content;
                    parens.token
                }
                ::syntax::__private::Err(error) => {
                    return ::syntax::__private::Err(error);
                }
            }
        };
    }
    /// Parse a set of curly braces and expose their content to subsequent parsers.
    #[macro_export] macro_rules! braced
    {
        ($content:ident in $cursor:expr) => 
        {
            match ::syntax::__private::parse_braces(&$cursor) {
                ::syntax::__private::Ok(braces) => {
                    $content = braces.content;
                    braces.token
                }
                ::syntax::__private::Err(error) => {
                    return ::syntax::__private::Err(error);
                }
            }
        };
    }
    /// Parse a set of square brackets and expose their content to subsequent parsers.
    #[macro_export] macro_rules! bracketed
    {
        ($content:ident in $cursor:expr) =>
        {
            match ::syntax::__private::parse_brackets(&$cursor)
            {
                ::syntax::__private::Ok(brackets) => {
                    $content = brackets.content;
                    brackets.token
                }
                ::syntax::__private::Err(error) => {
                    return ::syntax::__private::Err(error);
                }
            }
        };
    }

    #[macro_export] macro_rules! parse_quote
    {
        ($($tt:tt)*) =>
        {
            ::syntax::__private::parse_quote(::syntax::__private::quote::quote!($($tt)*))
        };
    }
    /// This macro is [`parse_quote!`] + [`quote_spanned!`][quote::quote_spanned].
    #[macro_export] macro_rules! parse_quote_spanned
    {
        ($span:expr=> $($tt:tt)*) =>
        {
            ::syntax::__private::parse_quote(::syntax::__private::quote::quote_spanned!($span=> $($tt)*))
        };
    }
    
    #[macro_export] macro_rules! parse_macro_input
    {
        ($tokenstream:ident as $ty:ty) => {
            match ::syntax::parse::<$ty>($tokenstream) {
                ::syntax::__private::Ok(data) => data,
                ::syntax::__private::Err(err) => {
                    return ::syntax::__private::TokenStream::from(err.to_compile_error());
                }
            }
        };
        ($tokenstream:ident with $parser:path) => {
            match ::syntax::parse::Parser::parse($parser, $tokenstream) {
                ::syntax::__private::Ok(data) => data,
                ::syntax::__private::Err(err) => {
                    return ::syntax::__private::TokenStream::from(err.to_compile_error());
                }
            }
        };
        ($tokenstream:ident) => {
            ::syntax::parse_macro_input!($tokenstream as _)
        };
    }

    #[macro_export] macro_rules! custom_punctuation
    {
        ($ident:ident, $($tt:tt)+) =>
        {
            pub struct $ident {
                #[allow(dead_code)]
                pub spans: ::syntax::custom_punctuation_repr!($($tt)+),
            }
                #[allow(dead_code, non_snake_case)]
            pub fn $ident<__S: ::syntax::__private::IntoSpans<::syntax::custom_punctuation_repr!($($tt)+)>>(
                spans: __S,
            ) -> $ident {
                let _validate_len = 0 $(+ ::syntax::custom_punctuation_len!(strict, $tt))*;
                $ident {
                    spans: ::syntax::__private::IntoSpans::into_spans(spans)
                }
            }
            const _: () = {
                impl ::syntax::__private::Default for $ident {
                    fn default() -> Self {
                        $ident(::syntax::__private::Span::call_site())
                    }
                }
                ::syntax::impl_parse_for_custom_punctuation!($ident, $($tt)+);
                ::syntax::impl_to_tokens_for_custom_punctuation!($ident, $($tt)+);
                ::syntax::impl_clone_for_custom_punctuation!($ident, $($tt)+);
                ::syntax::impl_extra_traits_for_custom_punctuation!($ident, $($tt)+);
            };
        };
    }
    
    #[macro_export] macro_rules! impl_parse_for_custom_punctuation
    {
        ($ident:ident, $($tt:tt)+) => {
            impl ::syntax::__private::CustomToken for $ident {
                fn peek(cursor: ::syntax::buffer::Cursor) -> ::syntax::__private::bool {
                    ::syntax::__private::peek_punct(cursor, ::syntax::stringify_punct!($($tt)+))
                }
                fn display() -> &'static ::syntax::__private::str {
                    ::syntax::__private::concat!("`", ::syntax::stringify_punct!($($tt)+), "`")
                }
            }
            impl ::syntax::parse::Parse for $ident
            {
                fn parse(input: ::syntax::parse::ParseStream) -> ::syntax::parse::Result<$ident> {
                    let spans: ::syntax::custom_punctuation_repr!($($tt)+) =
                        ::syntax::__private::parse_punct(input, ::syntax::stringify_punct!($($tt)+))?;
                    Ok($ident(spans))
                }
            }
        };
    }
    
    #[macro_export] macro_rules! impl_to_tokens_for_custom_punctuation
    {
        ($ident:ident, $($tt:tt)+) => {
            impl ::syntax::__private::ToTokens for $ident {
                fn to_tokens(&self, tokens: &mut ::syntax::__private::TokenStream2) {
                    ::syntax::__private::print_punct(::syntax::stringify_punct!($($tt)+), &self.spans, tokens)
                }
            }
        };
    }
        
    #[macro_export] macro_rules! impl_clone_for_custom_punctuation
    {
        ($ident:ident, $($tt:tt)+) => {
            impl ::syntax::__private::Copy for $ident {}
            #[allow(clippy::expl_impl_clone_on_copy)]
            impl ::syntax::__private::Clone for $ident {
                fn clone(&self) -> Self {
                    *self
                }
            }
        };
    }
    
    #[macro_export] macro_rules! impl_extra_traits_for_custom_punctuation
    {
        ($ident:ident, $($tt:tt)+) => {
            impl ::syntax::__private::Debug for $ident {
                fn fmt(&self, f: &mut ::syntax::__private::Formatter) -> ::syntax::__private::FmtResult {
                    ::syntax::__private::Formatter::write_str(f, ::syntax::__private::stringify!($ident))
                }
            }
            impl ::syntax::__private::Eq for $ident {}
            impl ::syntax::__private::PartialEq for $ident {
                fn eq(&self, _other: &Self) -> ::syntax::__private::bool {
                    true
                }
            }
            impl ::syntax::__private::Hash for $ident {
                fn hash<__H: ::syntax::__private::Hasher>(&self, _state: &mut __H) {}
            }
        };
    }
        
    #[macro_export] macro_rules! custom_punctuation_repr
    {
        ($($tt:tt)+) => {
            [::syntax::__private::Span; 0 $(+ ::syntax::custom_punctuation_len!(lenient, $tt))+]
        };
    }
    
    #[macro_export] macro_rules! custom_punctuation_len
    {
        ($mode:ident, &)     => { 1 };
        ($mode:ident, &&)    => { 2 };
        ($mode:ident, &=)    => { 2 };
        ($mode:ident, @)     => { 1 };
        ($mode:ident, ^)     => { 1 };
        ($mode:ident, ^=)    => { 2 };
        ($mode:ident, :)     => { 1 };
        ($mode:ident, ,)     => { 1 };
        ($mode:ident, $)     => { 1 };
        ($mode:ident, .)     => { 1 };
        ($mode:ident, ..)    => { 2 };
        ($mode:ident, ...)   => { 3 };
        ($mode:ident, ..=)   => { 3 };
        ($mode:ident, =)     => { 1 };
        ($mode:ident, ==)    => { 2 };
        ($mode:ident, =>)    => { 2 };
        ($mode:ident, >=)    => { 2 };
        ($mode:ident, >)     => { 1 };
        ($mode:ident, <-)    => { 2 };
        ($mode:ident, <=)    => { 2 };
        ($mode:ident, <)     => { 1 };
        ($mode:ident, -)     => { 1 };
        ($mode:ident, -=)    => { 2 };
        ($mode:ident, !=)    => { 2 };
        ($mode:ident, !)     => { 1 };
        ($mode:ident, |)     => { 1 };
        ($mode:ident, |=)    => { 2 };
        ($mode:ident, ||)    => { 2 };
        ($mode:ident, ::)    => { 2 };
        ($mode:ident, %)     => { 1 };
        ($mode:ident, %=)    => { 2 };
        ($mode:ident, +)     => { 1 };
        ($mode:ident, +=)    => { 2 };
        ($mode:ident, #)     => { 1 };
        ($mode:ident, ?)     => { 1 };
        ($mode:ident, ->)    => { 2 };
        ($mode:ident, ;)     => { 1 };
        ($mode:ident, <<)    => { 2 };
        ($mode:ident, <<=)   => { 3 };
        ($mode:ident, >>)    => { 2 };
        ($mode:ident, >>=)   => { 3 };
        ($mode:ident, /)     => { 1 };
        ($mode:ident, /=)    => { 2 };
        ($mode:ident, *)     => { 1 };
        ($mode:ident, *=)    => { 2 };
        ($mode:ident, ~)     => { 1 };
        (lenient, $tt:tt)    => { 0 };
        (strict, $tt:tt)     => {{ ::syntax::custom_punctuation_unexpected!($tt); 0 }};
    }
    
    #[macro_export] macro_rules! custom_punctuation_unexpected
    {
        () => {};
    }
    
    #[macro_export] macro_rules! stringify_punct
    {
        ($($tt:tt)+) => {
            ::syntax::__private::concat!($(::syntax::__private::stringify!($tt)),+)
        };
    }

    #[macro_export] macro_rules! custom_keyword
    {
        ($ident:ident) => {
            #[allow(non_camel_case_types)]
            pub struct $ident {
                #[allow(dead_code)]
                pub span: ::syntax::__private::Span,
            }
                #[allow(dead_code, non_snake_case)]
            pub fn $ident<__S: ::syntax::__private::IntoSpans<::syntax::__private::Span>>(
                span: __S,
            ) -> $ident {
                $ident {
                    span: ::syntax::__private::IntoSpans::into_spans(span),
                }
            }
            const _: () = {
                impl ::syntax::__private::Default for $ident {
                    fn default() -> Self {
                        $ident {
                            span: ::syntax::__private::Span::call_site(),
                        }
                    }
                }
                ::syntax::impl_parse_for_custom_keyword!($ident);
                ::syntax::impl_to_tokens_for_custom_keyword!($ident);
                ::syntax::impl_clone_for_custom_keyword!($ident);
                ::syntax::impl_extra_traits_for_custom_keyword!($ident);
            };
        };
    }
    
    #[macro_export] macro_rules! impl_parse_for_custom_keyword
    {
        ($ident:ident) => {
           
            impl ::syntax::__private::CustomToken for $ident {
                fn peek(cursor: ::syntax::buffer::Cursor) -> ::syntax::__private::bool {
                    if let ::syntax::__private::Some((ident, _rest)) = cursor.ident() {
                        ident == ::syntax::__private::stringify!($ident)
                    } else {
                        false
                    }
                }
                fn display() -> &'static ::syntax::__private::str {
                    ::syntax::__private::concat!("`", ::syntax::__private::stringify!($ident), "`")
                }
            }
            impl ::syntax::parse::Parse for $ident
            {
                fn parse(input: ::syntax::parse::ParseStream) -> ::syntax::parse::Result<$ident> {
                    input.step(|cursor| {
                        if let ::syntax::__private::Some((ident, rest)) = cursor.ident() {
                            if ident == ::syntax::__private::stringify!($ident) {
                                return ::syntax::__private::Ok(($ident { span: ident.span() }, rest));
                            }
                        }
                        ::syntax::__private::Err(cursor.error(::syntax::__private::concat!(
                            "expected `",
                            ::syntax::__private::stringify!($ident),
                            "`",
                        )))
                    })
                }
            }
        };
    }
    
    #[macro_export] macro_rules! impl_to_tokens_for_custom_keyword
    {
        ($ident:ident) => {
            impl ::syntax::__private::ToTokens for $ident {
                fn to_tokens(&self, tokens: &mut ::syntax::__private::TokenStream2) {
                    let ident = ::syntax::Ident::new(::syntax::__private::stringify!($ident), self.span);
                    ::syntax::__private::TokenStreamExt::append(tokens, ident);
                }
            }
        };
    }
    
    #[macro_export] macro_rules! impl_clone_for_custom_keyword
    {
        ($ident:ident) => {
            impl ::syntax::__private::Copy for $ident {}
            #[allow(clippy::expl_impl_clone_on_copy)]
            impl ::syntax::__private::Clone for $ident {
                fn clone(&self) -> Self {
                    *self
                }
            }
        };
    }
    
    #[macro_export] macro_rules! impl_extra_traits_for_custom_keyword 
    {
        ($ident:ident) => {
            impl ::syntax::__private::Debug for $ident {
                fn fmt(&self, f: &mut ::syntax::__private::Formatter) -> ::syntax::__private::FmtResult {
                    ::syntax::__private::Formatter::write_str(
                        f,
                        ::syntax::__private::concat!(
                            "Keyword [",
                            ::syntax::__private::stringify!($ident),
                            "]",
                        ),
                    )
                }
            }
            impl ::syntax::__private::Eq for $ident {}
            impl ::syntax::__private::PartialEq for $ident {
                fn eq(&self, _other: &Self) -> ::syntax::__private::bool {
                    true
                }
            }
            impl ::syntax::__private::Hash for $ident {
                fn hash<__H: ::syntax::__private::Hasher>(&self, _state: &mut __H) {}
            }
        };
    }
    /// Forward a method to an inherent method or a base trait method.
    #[macro_export] macro_rules! forward
    {
        ($( Self :: $method:ident ( self $( , $arg:ident : $ty:ty )* ) -> $ret:ty ; )*)
            => {$(
                #[inline] fn $method(self $( , $arg : $ty )* ) -> $ret {
                    Self::$method(self $( , $arg )* )
                }
            )*};
        ($( $base:ident :: $method:ident ( self $( , $arg:ident : $ty:ty )* ) -> $ret:ty ; )*)
            => {$(
                #[inline] fn $method(self $( , $arg : $ty )* ) -> $ret {
                    <Self as $base>::$method(self $( , $arg )* )
                }
            )*};
        ($( $base:ident :: $method:ident ( $( $arg:ident : $ty:ty ),* ) -> $ret:ty ; )*)
            => {$(
                #[inline] fn $method( $( $arg : $ty ),* ) -> $ret {
                    <Self as $base>::$method( $( $arg ),* )
                }
            )*};
        ($( $imp:path as $method:ident ( self $( , $arg:ident : $ty:ty )* ) -> $ret:ty ; )*)
            => {$(
                #[inline] fn $method(self $( , $arg : $ty )* ) -> $ret {
                    $imp(self $( , $arg )* )
                }
            )*};
    }

    #[macro_export] macro_rules! constant
    {
        ($( $method:ident () -> $ret:expr ; )*)
            => {$(
                #[inline] fn $method() -> Self {
                    $ret
                }
            )*};
    }
    
    #[macro_export] macro_rules! forward_ref_ref_binop
    {
        (impl $imp:ident, $method:ident) =>
        {
            impl<'a, 'b, T: Clone + Integer> $imp<&'b Ratio<T>> for &'a Ratio<T> {
                type Output = Ratio<T>;

                #[inline] fn $method(self, other: &'b Ratio<T>) -> Ratio<T> {
                    self.clone().$method(other.clone())
                }
            }
            
            impl<'a, 'b, T: Clone + Integer> $imp<&'b T> for &'a Ratio<T> {
                type Output = Ratio<T>;

                #[inline] fn $method(self, other: &'b T) -> Ratio<T> {
                    self.clone().$method(other.clone())
                }
            }
        };
    }

    #[macro_export] macro_rules! forward_ref_ref_binop_big
    {
        (impl $imp:ident for $res:ty, $method:ident) =>
        {
            impl $imp<&$res> for &$res
            {
                type Output = $res;
                #[inline] fn $method(self, other: &$res) -> $res
                {
                    $imp::$method(self.clone(), other)
                }
            }
        };
    }

    #[macro_export] macro_rules! forward_ref_val_binop
    {
        (impl $imp:ident, $method:ident) =>
        {
            impl<'a, T> $imp<Ratio<T>> for &'a Ratio<T> where
            T: Clone + Integer
            {
                type Output = Ratio<T>;
                #[inline] fn $method(self, other: Ratio<T>) -> Ratio<T> { self.clone().$method(other) }
            }
            
            impl<'a, T> $imp<T> for &'a Ratio<T> where
            T: Clone + Integer,
            {
                type Output = Ratio<T>;
                #[inline] fn $method(self, other: T) -> Ratio<T> { self.clone().$method(other) }
            }
        };
    }

    #[macro_export] macro_rules! forward_ref_val_binop_big
    {
        (impl $imp:ident for $res:ty, $method:ident) => {
            impl $imp<$res> for &$res {
                type Output = $res;

                #[inline] fn $method(self, other: $res) -> $res {
                   
                    $imp::$method(self, &other)
                }
            }
        };
    }

    #[macro_export] macro_rules! forward_val_ref_binop
    {
        (impl $imp:ident, $method:ident) => {
            impl<'a, T> $imp<&'a Ratio<T>> for Ratio<T> where
                T: Clone + Integer,
            {
                type Output = Ratio<T>;

                #[inline] fn $method(self, other: &Ratio<T>) -> Ratio<T> {
                    self.$method(other.clone())
                }
            }
            
            impl<'a, T> $imp<&'a T> for Ratio<T> where
                T: Clone + Integer,
            {
                type Output = Ratio<T>;

                #[inline] fn $method(self, other: &T) -> Ratio<T> {
                    self.$method(other.clone())
                }
            }
        };
    }

    
    #[macro_export] macro_rules! forward_val_ref_binop_big
    {
        (impl $imp:ident for $res:ty, $method:ident) => {
            impl $imp<&$res> for $res {
                type Output = $res;

                #[inline] fn $method(self, other: &$res) -> $res {
                   
                    $imp::$method(&self, other)
                }
            }
        };
    }

    #[macro_export] macro_rules! forward_all_binop
    {
        (impl $imp:ident, $method:ident) =>
        {
            forward_ref_ref_binop!(impl $imp, $method);
            forward_ref_val_binop!(impl $imp, $method);
            forward_val_ref_binop!(impl $imp, $method);
        };
    }

    #[macro_export] macro_rules! cfg_32
    {
        ($($any:tt)+) => {
            #[cfg(not(target_pointer_width = "64"))] $($any)+
        }
    }

    #[macro_export] macro_rules! cfg_32_or_test 
    {
        ($($any:tt)+) => {
            #[cfg(any(not(target_pointer_width = "64"), test))] $($any)+
        }
    }

    #[macro_export] macro_rules! cfg_64
    {
        ($($any:tt)+) => {
            #[cfg(target_pointer_width = "64")] $($any)+
        }
    }

    #[macro_export] macro_rules! cfg_digit
    {
        ($item32:item $item64:item) => {
            cfg_32!($item32);
            cfg_64!($item64);
        };
    }

    #[macro_export] macro_rules! cfg_digit_expr
    {
        ($expr32:expr, $expr64:expr) => {
            cfg_32!($expr32);
            cfg_64!($expr64);
        };
    }

    #[macro_export] macro_rules! forward_val_val_binop
    {
        (impl $imp:ident for $res:ty, $method:ident) => {
            impl $imp<$res> for $res {
                type Output = $res;

                #[inline] fn $method(self, other: $res) -> $res {
                   
                    $imp::$method(self, &other)
                }
            }
        };
    }

    #[macro_export] macro_rules! forward_val_val_binop_commutative
    {
        (impl $imp:ident for $res:ty, $method:ident) => {
            impl $imp<$res> for $res {
                type Output = $res;

                #[inline] fn $method(self, other: $res) -> $res {
                   
                    if self.capacity() >= other.capacity() {
                        $imp::$method(self, &other)
                    } else {
                        $imp::$method(other, &self)
                    }
                }
            }
        };
    }
    /*
     */

    #[macro_export] macro_rules! forward_ref_val_binop_commutative
    {
        (impl $imp:ident for $res:ty, $method:ident) => {
            impl $imp<$res> for &$res {
                type Output = $res;

                #[inline] fn $method(self, other: $res) -> $res {
                   
                    $imp::$method(other, self)
                }
            }
        };
    }
    /*

     */

    #[macro_export] macro_rules! forward_ref_ref_binop_commutative
    {
        (impl $imp:ident for $res:ty, $method:ident) => {
            impl $imp<&$res> for &$res {
                type Output = $res;

                #[inline] fn $method(self, other: &$res) -> $res {
                   
                    if self.len() >= other.len() {
                        $imp::$method(self.clone(), other)
                    } else {
                        $imp::$method(other.clone(), self)
                    }
                }
            }
        };
    }

    #[macro_export] macro_rules! forward_val_assign
    {
        (impl $imp:ident for $res:ty, $method:ident) => {
            impl $imp<$res> for $res {
                #[inline] fn $method(&mut self, other: $res) {
                    self.$method(&other);
                }
            }
        };
    }

    #[macro_export] macro_rules! forward_val_assign_scalar
    {
        (impl $imp:ident for $res:ty, $scalar:ty, $method:ident) => {
            impl $imp<$res> for $scalar {
                #[inline] fn $method(&mut self, other: $res) {
                    self.$method(&other);
                }
            }
        };
    }
    
    #[macro_export] macro_rules! forward_scalar_val_val_binop_commutative
    {
        (impl $imp:ident < $scalar:ty > for $res:ty, $method:ident) => {
            impl $imp<$res> for $scalar {
                type Output = $res;

                #[inline] fn $method(self, other: $res) -> $res {
                    $imp::$method(other, self)
                }
            }
        };
    }
    
    #[macro_export] macro_rules! forward_scalar_val_val_binop_to_ref_val
    {
        (impl $imp:ident<$scalar:ty> for $res:ty, $method:ident) => {
            impl $imp<$scalar> for $res {
                type Output = $res;

                #[inline] fn $method(self, other: $scalar) -> $res {
                    $imp::$method(&self, other)
                }
            }
            impl $imp<$res> for $scalar {
                type Output = $res;

                #[inline] fn $method(self, other: $res) -> $res {
                    $imp::$method(self, &other)
                }
            }
        };
    }

    #[macro_export] macro_rules! forward_scalar_ref_ref_binop_to_ref_val
    {
        (impl $imp:ident<$scalar:ty> for $res:ty, $method:ident) => {
            impl $imp<&$scalar> for &$res {
                type Output = $res;

                #[inline] fn $method(self, other: &$scalar) -> $res {
                    $imp::$method(self, *other)
                }
            }
            impl $imp<&$res> for &$scalar {
                type Output = $res;

                #[inline] fn $method(self, other: &$res) -> $res {
                    $imp::$method(*self, other)
                }
            }
        };
    }

    #[macro_export] macro_rules! forward_scalar_val_ref_binop_to_ref_val 
    {
        (impl $imp:ident<$scalar:ty> for $res:ty, $method:ident) => {
            impl $imp<&$scalar> for $res {
                type Output = $res;

                #[inline] fn $method(self, other: &$scalar) -> $res {
                    $imp::$method(&self, *other)
                }
            }
            impl $imp<$res> for &$scalar {
                type Output = $res;

                #[inline] fn $method(self, other: $res) -> $res {
                    $imp::$method(*self, &other)
                }
            }
        };
    }

    #[macro_export] macro_rules! forward_scalar_val_ref_binop_to_val_val 
    {
        (impl $imp:ident<$scalar:ty> for $res:ty, $method:ident) => {
            impl $imp<&$scalar> for $res {
                type Output = $res;

                #[inline] fn $method(self, other: &$scalar) -> $res {
                    $imp::$method(self, *other)
                }
            }
            impl $imp<$res> for &$scalar {
                type Output = $res;

                #[inline] fn $method(self, other: $res) -> $res {
                    $imp::$method(*self, other)
                }
            }
        };
    }

    #[macro_export] macro_rules! forward_scalar_ref_val_binop_to_val_val 
    {
        (impl $imp:ident < $scalar:ty > for $res:ty, $method:ident) => {
            impl $imp<$scalar> for &$res {
                type Output = $res;

                #[inline] fn $method(self, other: $scalar) -> $res {
                    $imp::$method(self.clone(), other)
                }
            }
            impl $imp<&$res> for $scalar {
                type Output = $res;

                #[inline] fn $method(self, other: &$res) -> $res {
                    $imp::$method(self, other.clone())
                }
            }
        };
    }

    #[macro_export] macro_rules! forward_scalar_ref_ref_binop_to_val_val 
    {
        (impl $imp:ident<$scalar:ty> for $res:ty, $method:ident) => {
            impl $imp<&$scalar> for &$res {
                type Output = $res;

                #[inline] fn $method(self, other: &$scalar) -> $res {
                    $imp::$method(self.clone(), *other)
                }
            }
            impl $imp<&$res> for &$scalar {
                type Output = $res;

                #[inline] fn $method(self, other: &$res) -> $res {
                    $imp::$method(*self, other.clone())
                }
            }
        };
    }

    #[macro_export] macro_rules! promote_scalars 
    {
        (impl $imp:ident<$promo:ty> for $res:ty, $method:ident, $( $scalar:ty ),*) => {
            $(
                forward_all_scalar_binop_to_val_val!(impl $imp<$scalar> for $res, $method);

                impl $imp<$scalar> for $res {
                    type Output = $res;

                    #[allow(clippy::cast_lossless)]
                    #[inline] fn $method(self, other: $scalar) -> $res {
                        $imp::$method(self, other as $promo)
                    }
                }
                impl $imp<$res> for $scalar {
                    type Output = $res;

                    #[allow(clippy::cast_lossless)]
                    #[inline] fn $method(self, other: $res) -> $res {
                        $imp::$method(self as $promo, other)
                    }
                }
            )*
        }
    }

    #[macro_export] macro_rules! promote_scalars_assign 
    {
        (impl $imp:ident<$promo:ty> for $res:ty, $method:ident, $( $scalar:ty ),*) => {
            $(
                impl $imp<$scalar> for $res {
                    #[allow(clippy::cast_lossless)]
                    #[inline] fn $method(&mut self, other: $scalar) {
                        self.$method(other as $promo);
                    }
                }
            )*
        }
    }

    #[macro_export] macro_rules! promote_unsigned_scalars 
    {
        (impl $imp:ident for $res:ty, $method:ident) => {
            promote_scalars!(impl $imp<u32> for $res, $method, u8, u16);
            promote_scalars!(impl $imp<::num::big::UsizePromotion> for $res, $method, usize);
        }
    }

    #[macro_export] macro_rules! promote_unsigned_scalars_assign 
    {
        (impl $imp:ident for $res:ty, $method:ident) => {
            promote_scalars_assign!(impl $imp<u32> for $res, $method, u8, u16);
            promote_scalars_assign!(impl $imp<::num::big::UsizePromotion> for $res, $method, usize);
        }
    }

    #[macro_export] macro_rules! promote_signed_scalars 
    {
        (impl $imp:ident for $res:ty, $method:ident) => {
            promote_scalars!(impl $imp<i32> for $res, $method, i8, i16);
            promote_scalars!(impl $imp<::num::big::IsizePromotion> for $res, $method, isize);
        }
    }

    #[macro_export] macro_rules! promote_signed_scalars_assign 
    {
        (impl $imp:ident for $res:ty, $method:ident) =>
        {
            promote_scalars_assign!(impl $imp<i32> for $res, $method, i8, i16);
            promote_scalars_assign!(impl $imp<::num::big::IsizePromotion> for $res, $method, isize);
        }
    }

    #[macro_export] macro_rules! forward_all_binop_to_ref_ref
    {
        (impl $imp:ident for $res:ty, $method:ident) =>
        {
            forward_val_val_binop!(impl $imp for $res, $method);
            forward_val_ref_binop_big!(impl $imp for $res, $method);
            forward_ref_val_binop_big!(impl $imp for $res, $method);
        };
    }
    
    #[macro_export] macro_rules! forward_all_binop_to_val_ref
    {
        (impl $imp:ident for $res:ty, $method:ident) =>
        {
            forward_val_val_binop!(impl $imp for $res, $method);
            forward_ref_val_binop!(impl $imp for $res, $method);
            forward_ref_ref_binop!(impl $imp for $res, $method);
        };
    }
    
    #[macro_export] macro_rules! forward_all_binop_to_val_ref_commutative
    {
        (impl $imp:ident for $res:ty, $method:ident) => {
            forward_val_val_binop_commutative!(impl $imp for $res, $method);
            forward_ref_val_binop_commutative!(impl $imp for $res, $method);
            forward_ref_ref_binop_commutative!(impl $imp for $res, $method);
        };
    }

    #[macro_export] macro_rules! forward_all_scalar_binop_to_ref_val
    {
        (impl $imp:ident<$scalar:ty> for $res:ty, $method:ident) => {
            forward_scalar_val_val_binop_to_ref_val!(impl $imp<$scalar> for $res, $method);
            forward_scalar_val_ref_binop_to_ref_val!(impl $imp<$scalar> for $res, $method);
            forward_scalar_ref_ref_binop_to_ref_val!(impl $imp<$scalar> for $res, $method);
        }
    }

    #[macro_export] macro_rules! forward_all_scalar_binop_to_val_val
    {
        (impl $imp:ident<$scalar:ty> for $res:ty, $method:ident) => {
            forward_scalar_val_ref_binop_to_val_val!(impl $imp<$scalar> for $res, $method);
            forward_scalar_ref_val_binop_to_val_val!(impl $imp<$scalar> for $res, $method);
            forward_scalar_ref_ref_binop_to_val_val!(impl $imp<$scalar> for $res, $method);
        }
    }

    #[macro_export] macro_rules! forward_all_scalar_binop_to_val_val_commutative
    {
        (impl $imp:ident<$scalar:ty> for $res:ty, $method:ident) => {
            forward_scalar_val_val_binop_commutative!(impl $imp<$scalar> for $res, $method);
            forward_all_scalar_binop_to_val_val!(impl $imp<$scalar> for $res, $method);
        }
    }

    #[macro_export] macro_rules! promote_all_scalars
    {
        (impl $imp:ident for $res:ty, $method:ident) => {
            promote_unsigned_scalars!(impl $imp for $res, $method);
            promote_signed_scalars!(impl $imp for $res, $method);
        }
    }

    #[macro_export] macro_rules! promote_all_scalars_assign
    {
        (impl $imp:ident for $res:ty, $method:ident) => {
            promote_unsigned_scalars_assign!(impl $imp for $res, $method);
            promote_signed_scalars_assign!(impl $imp for $res, $method);
        }
    }

    #[macro_export] macro_rules! impl_sum_iter_type
    {
        ($res:ty) => {
            impl<T> Sum<T> for $res
            where
                $res: Add<T, Output = $res>,
            {
                fn sum<I>(iter: I) -> Self
                where
                    I: Iterator<Item = T>,
                {
                    iter.fold(Self::ZERO, <$res>::add)
                }
            }
        };
    }

    #[macro_export] macro_rules! impl_product_iter_type
    {
        ($res:ty) => {
            impl<T> Product<T> for $res
            where
                $res: Mul<T, Output = $res>,
            {
                fn product<I>(iter: I) -> Self
                where
                    I: Iterator<Item = T>,
                {
                    iter.fold(One::one(), <$res>::mul)
                }
            }
        };
    }

    #[macro_export] macro_rules! map
    {
        { } => { ::collections::HashMap::new() };
        { $( $key:expr => $value:expr ),+ , } =>
        {
           
            map!{ $( $key => $value),+ }
        };
        { $( $key:expr => $value:expr ),* } =>
        {
            {
                let mut _map = ::collections::HashMap::new();

                $(
                    let _ = _map.insert($key, $value);
                )*

                _map
            }
        }
    }
    /// Given an int, creates and returns a `BigInt`.
    #[macro_export] macro_rules! int 
    {
        ($int:expr) => {{
            use num_bigint::BigInt;

            let _b: BigInt = $int.into();
            _b
        }};
    }
    /// Given two ints, creates and returns a `BigRational`.
    #[macro_export] macro_rules! frac 
    {
        ($int1:expr, $int2:expr) => {{
            ::num::rational::BigRational::new($int1.into(), $int2.into())
        }};
    }
    /// With a list of items, converts each item to a `Value` and returns an `Arr` containing a vector of the values.
    #[macro_export] macro_rules! arr 
    {
        [] => 
        {
            $crate::arrays::Arr::from_vec(vec![]).unwrap()
        };

        [ $( $elem:expr ),+ , ] => 
        {
           
            try_arr![ $( $elem ),+ ].unwrap()
        };

        [ $( $elem:expr ),+ ] => 
        {
            try_arr![ $( $elem ),+ ].unwrap()
        };
    }
    /// With a list of items, converts each item to a `Value` and returns an `Arr` containing a vector of the values.
    #[macro_export] macro_rules! try_arr 
    {
        [ $( $elem:expr ),+ , ] => 
        {
           
            try_arr![ $( $elem ),+ ]
        };

        [ $( $elem:expr ),+ ] => 
        {{
                $crate::arrays::Arr::from_vec(vec![ $( $elem.into() ),+ ])
        }};
    }
    /// With a list of items, converts each item to `Value`s and returns a `Tup` containing a vector of the values.
    #[macro_export] macro_rules! tup 
    {
        ( $( $elem:expr ),* , ) => {
            tup!( $( $elem ),* )
        };
        ( $( $elem:expr ),* ) => {
            {
                $crate::tup::Tup::from_vec(vec![ $( $elem.into() ),+ ])
            }
        };
    }
    /// With a list of field/value pairs, returns an `Obj` containing each pair.
    #[macro_export] macro_rules! obj 
    {
        {} => {
            $crate::obj::Obj::from_map_unchecked(::std::collections::HashMap::new())
        };
        { $( $field:expr => $inner:expr ),+ , } => {
           
            try_obj!{ $( $field => $inner ),+ }.unwrap()
        };
        { $( $field:expr => $inner:expr ),+ } => {
            try_obj!{ $( $field => $inner ),+ }.unwrap()
        };
    }
    /// With a list of field to `Value` pairs, returns an `Obj` with the fields and values.
    #[macro_export] macro_rules! try_obj
    {
        { $( $field:expr => $inner:expr ),+ , } =>
        {
           
            try_obj!{ $( $field => $inner ),* };
        };
        
        { $( $field:expr => $inner:expr ),+ } =>
        {{
            use ::objects::Obj;
            let mut _map = ::collections::HashMap::new();
            let mut _parent: Option<::values::Value> = None;

            $(
                if $field == "^" 
                {
                    _parent = Some($inner.into());
                } 
                
                else 
                {
                    _map.insert($field.into(), $inner.into());
                }
            )*

            match _parent 
            {
                Some(parent) => match parent.get_obj() {
                    Ok(parent) => Obj::from_map_with_parent(_map, parent),
                    e @ Err(_) => e,
                }
                None => Obj::from_map(_map),
            }
        }};
    }
}

pub mod arch
{
    pub use std::arch::{ * };
}

pub mod arrays
{
    /*!
    Arr | A container which can hold an arbitrary number of elements of a single type. */
    use ::
    {
        error::{ OverError },
        fmt::{ Format },
        result::{ OverResult },
        slice::{ Iter },
        sync::{ Arc },
        types::{ Type },
        values::{ Value },
        *,
    };
    /*
    */
    #[derive(Clone, Debug)]
    struct ArrInner 
    {
        vec: Vec<Value>,
        inner_t: Type,
    }
    /// `Arr` struct.
    #[derive(Clone, Debug)]
    pub struct Arr 
    {
        inner: Arc<ArrInner>,
    }

    impl Arr 
    {
        /// Returns a new `Arr` from the given vector of `Value`s.
        pub fn from_vec(vec: Vec<Value>) -> OverResult<Arr> 
        {
            let mut tcur = Type::Any;
            let mut has_any = true;

            for value in &vec {
                let tnew = value.get_type();

                if has_any {
                    match Type::most_specific(&tcur, &tnew) {
                        Some((t, any)) => {
                            tcur = t;
                            has_any = any;
                        }
                        None => return Err(OverError::ArrTypeMismatch(tcur, tnew)),
                    }
                } else if tcur != tnew {
                    return Err(OverError::ArrTypeMismatch(tcur, tnew));
                }
            }
            Ok(Arr {
                inner: Arc::new(ArrInner { vec, inner_t: tcur }),
            })
        }
        /// Returns a new `Arr` from the given vector of `Value`s without checking 
        /// whether every value in `vec` is the same type.
        pub fn from_vec_unchecked(vec: Vec<Value>, inner_t: Type) -> Arr 
        {
            Arr {
                inner: Arc::new(ArrInner { vec, inner_t }),
            }
        }
        /// Returns a reference to the inner vec of this `Arr`.
        pub fn vec_ref(&self) -> &Vec<Value> 
        {
            &self.inner.vec
        }
        /// Iterates over each `Value` in `self`, applying `Fn` `f`.
        pub fn with_each<F>(&self, mut f: F) where
            F: FnMut(&Value),
        {
            for value in &self.inner.vec {
                f(value)
            }
        }
        /// Gets the value at `index`.
        pub fn get(&self, index: usize) -> OverResult<Value> 
        {
            if index >= self.inner.vec.len() {
                Err(OverError::ArrOutOfBounds(index))
            } else {
                Ok(self.inner.vec[index].clone())
            }
        }
        /// Returns the type of all elements in this `Arr`.
        pub fn inner_type(&self) -> Type {
            self.inner.inner_t.clone()
        }
        /// Returns the length of this `Arr`.
        pub fn len(&self) -> usize {
            self.inner.vec.len()
        }
        /// Returns whether this `Arr` is empty.
        pub fn is_empty(&self) -> bool {
            self.inner.vec.is_empty()
        }
        /// Returns whether `self` and `other` point to the same data.
        pub fn ptr_eq(&self, other: &Self) -> bool 
        {
            Arc::ptr_eq(&self.inner, &other.inner)
        }
        /// Returns an iterator over the Arr.
        pub fn iter(&self) -> Iter<Value> 
        {
            self.vec_ref().iter()
        }
    }

    impl Default for Arr 
    {
        fn default() -> Self {
            Self::from_vec_unchecked(vec![], Type::Any)
        }
    }

    impl fmt::Display for Arr 
    {
        fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
            write!(f, "{}", self.format(true, INDENT_STEP))
        }
    }

    impl PartialEq for Arr 
    {
        fn eq(&self, other: &Self) -> bool {
           
            if self.inner.inner_t != other.inner.inner_t {
                return false;
            }
            self.inner.vec == other.inner.vec
        }
    }
}

pub mod ascii
{
    pub use std::ascii::{ * };
    
    const T: bool = true;
    const F: bool = false;

    #[repr(C, align(8))]
    pub struct Align8<T>(pub T);
    #[repr(C, align(64))]
    pub struct Align64<T>(pub T);

    pub static ASCII_START: Align64<[bool; 128]> = Align64
    ([
        F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F,
        F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, T, T, T, T, T, T, T, T, T,
        T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, F, F, F, F, F, F, T, T, T, T, T, T, T, T, T, T, T, T, T, T,
        T, T, T, T, T, T, T, T, T, T, T, T, F, F, F, F, F,
    ]);

    pub static ASCII_CONTINUE: Align64<[bool; 128]> = Align64
    ([
        F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, 
        F, F, F, F, F, F, F, F, F, F, F, T, T, T, T, T, T, T, T, T, T, F, F, F, F, F, F, F, T, T, T, T, T, T, T, T, T, 
        T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, F, F, F, F, T, F, T, T, T, T, T, T, T, T, T, T, T, T, T, T, 
        T, T, T, T, T, T, T, T, T, T, T, T, F, F, F, F, F,
    ]);

    pub const CHUNK: usize = 64;

    pub static TRIE_START: Align8<[u8; 411]> = Align8
    ([
        0x04, 0x0B, 0x0F, 0x13, 0x17, 0x1B, 0x1F, 0x23, 0x27, 0x2D, 0x31, 0x34, 0x38, 0x3C, 0x40, 0x02, 0x45, 0x00, 
        0x00, 0x00, 0x00, 0x00, 0x49, 0x00, 0x4D, 0x00, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 
        0x05, 0x05, 0x06, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 
        0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 
        0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x51, 0x54, 0x58, 0x5C, 0x05, 0x05, 0x05, 0x05, 
        0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x09, 
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x60, 
        0x64, 0x66, 0x6A, 0x6E, 0x72, 0x28, 0x76, 0x78, 0x7C, 0x80, 0x84, 0x88, 0x8C, 0x90, 0x94, 0x98, 0x9C, 0xA0, 
        0x05, 0x2B, 0xA4, 0x00, 0x00, 0x00, 0x00, 0xA6, 0x05, 0x05, 0xA8, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x32, 
        0x05, 0xAD, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xAE, 0x00, 0x00, 0x00, 
        0x05, 0xB2, 0xB6, 0xBA, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 
        0xBE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 
        0x43, 0xC2, 0x00, 0x00, 0x00, 0x00, 0xC5, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
        0xD1, 0xD3, 0x00, 0x00, 0x00, 0xC9, 0xD9, 0xDD, 0xE1, 0xE5, 0xE9, 0x00, 0x00, 0xED, 0x00, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 
        0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 
        0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 
        0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 
        0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0xEF, 0x05, 0x05, 
        0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0xF1, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0xF3, 
        0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x52, 0x05, 0xF5, 0x00, 0x00, 
        0x00, 0x00, 0x05, 0xAF, 0x00, 0x00, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0xA9, 0x05, 0x05, 
        0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0xF7,
    ]);

    pub static TRIE_CONTINUE: Align8<[u8; 1793]> = Align8
    ([
        0x08, 0x0D, 0x11, 0x15, 0x19, 0x1D, 0x21, 0x25, 0x2A, 0x2F, 0x31, 0x36, 0x3A, 0x3E, 0x42, 0x02,0x47, 0x00, 
        0x00, 0x00, 0x00, 0x00, 0x4B, 0x00, 0x4F, 0x00, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05,0x05, 0x05, 0x05, 0x05, 
        0x05, 0x05, 0x06, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05,0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 
        0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05,0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 
        0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05,0x05, 0x05, 0x51, 0x56, 0x5A, 0x5E, 0x05, 0x05, 0x05, 0x05, 
        0x05, 0x05, 0x05, 0x05, 0x05, 0x05,0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x09, 
        0x00, 0x00, 0x00, 0x00,0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x62, 
        0x64, 0x68,0x6C, 0x70, 0x74, 0x28, 0x76, 0x7A, 0x7E, 0x82, 0x86, 0x8A, 0x8E, 0x92, 0x96, 0x9A, 0x9E, 0xA2,
        0x05, 0x2B, 0xA4, 0x00, 0x00, 0x00, 0x00, 0xA6, 0x05, 0x05, 0xAB, 0x05, 0x05, 0x05, 0x05, 0x05,0x05, 0x32, 
        0x05, 0xAD, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,0xB0, 0x00, 0x00, 0x00, 
        0x05, 0xB4, 0xB8, 0xBC, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05,0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 
        0xBE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 
        0x43, 0xC2, 0x00, 0x00, 0x00, 0x00, 0xC8, 0x00,0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xCB, 0xC3, 0xC6, 0xCE, 
        0xD1, 0xD5, 0x00, 0xD7, 0x00, 0xC9,0xDB, 0xDF, 0xE3, 0xE7, 0xEB, 0x00, 0x00, 0xED, 0x00, 0x00, 0x00, 0x00, 
        0x00, 0xCC, 0x00, 0x00,0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 
        0x05, 0x05,0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05,
        0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05,0x05, 0x05, 
        0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05,0x05, 0x05, 0x05, 0x05, 
        0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05,0x05, 0x05, 0x05, 0xEF, 0x05, 0x05, 
        0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0xF1, 0x05, 0x05, 0x05,0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0xF3, 
        0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05,0x05, 0x05, 0x05, 0x05, 0x05, 0x52, 0x05, 0xF5, 0x00, 0x00, 
        0x00, 0x00, 0x05, 0xAF, 0x00, 0x00,0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0xA9, 0x05, 0x05, 
        0x05, 0x05, 0x05, 0x05,0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0xF7, 0x00, 0x00, 0x00, 
        0x00, 0x00,0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,0x00, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00,0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00,0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
        0x00, 0x00,0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,0x00, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00,0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00,0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
        0x00, 0x00,0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,0x00, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00,0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00,0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
        0x00, 0x00,0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,0x00, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00,0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00,0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
        0x00, 0x00,0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,0x00, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00,0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00,0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
        0x00, 0x00,0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,0x00, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00,0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00,0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
        0x00, 0x00,0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,0x00, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00,0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00,0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
        0x00, 0x00,0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,0x00, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00,0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00,0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
        0x00, 0x00,0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,0x00, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00,0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00,0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
        0x00, 0x00,0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,0x00, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,0xCF,
    ]);

    pub static LEAF: Align64<[u8; 7968]> = Align64
    ([
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x3F, 0x3F, 0xFF, 0xFF, 0xFF, 0xFF, 0x3F, 0x3F, 0xFF, 0xAA, 
        0xFF, 0xFF, 0xFF, 0x3F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xDF, 0x5F, 0xDC, 0x1F, 0xCF, 0x0F, 0xFF, 0x1F, 
        0xDC, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x20, 0x04, 0xFF, 0xFF, 0x7F, 0xFF, 0xFF, 0xFF, 0x7F, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0xA0, 0x04, 0xFF, 0xFF, 0x7F, 0xFF, 0xFF, 0xFF, 0x7F, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x0F, 0x00,
        0xFF, 0xFF, 0x7F, 0xF8, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x0F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xC3, 0xFF, 
        0x03, 0x00, 0x1F, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0xDF, 0xB8, 0x40, 0xD7, 0xFF, 0xFF, 0xFB, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
        0xBF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xC3, 0xFF, 0x03, 0x00, 0x1F, 0x50, 0x00, 0x00, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xDF, 0xB8, 0xC0, 0xD7, 0xFF, 0xFF,
        0xFB, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xBF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x03, 0xFC, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xFF, 0xFF, 0xFF,
        0x7F, 0x02, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF,
        0xFF, 0x87, 0x07, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFB, 0xFC, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xFF, 0xFF, 0xFF, 0x7F, 0x02, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x01,
        0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xBF, 0xB6, 0x00, 0xFF, 0xFF, 0xFF, 0x87, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x07, 0x00, 0x00, 0x00, 0xC0, 0xFE, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x2F, 0x00, 0x60, 0xC0, 0x00, 0x9C,
        0x00, 0x00, 0xFD, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0xE0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0x3F, 0x00, 0x02, 0x00, 0x00, 0xFC, 0xFF, 0xFF, 0xFF, 0x07, 0x30, 0x04,
        0x00, 0x00, 0xFF, 0x07, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xC3, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xEF, 0x9F, 0xFF, 0xFD, 0xFF, 0x9F,
        0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xE7, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x03, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x3F, 0x24,
        0xFF, 0xFF, 0x3F, 0x04, 0x10, 0x01, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x01, 0xFF, 0x07, 0xFF, 0xFF,
        0xFF, 0xFE, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xF0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x23, 0x00, 0x00, 0x01, 0xFF, 0x03, 0x00, 0xFE, 0xFF,
        0xE1, 0x9F, 0xF9, 0xFF, 0xFF, 0xFD, 0xC5, 0x23, 0x00, 0x40, 0x00, 0xB0, 0x03, 0x00, 0x03, 0x10,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x3F, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x0F, 0xFF, 0x07, 0xFF, 0xFF,
        0xFF, 0xFE, 0x80, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFB, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xCF, 0xFF, 0xFE, 0xFF,
        0xEF, 0x9F, 0xF9, 0xFF, 0xFF, 0xFD, 0xC5, 0xF3, 0x9F, 0x79, 0x80, 0xB0, 0xCF, 0xFF, 0x03, 0x50,
        0xE0, 0x87, 0xF9, 0xFF, 0xFF, 0xFD, 0x6D, 0x03, 0x00, 0x00, 0x00, 0x5E, 0x00, 0x00, 0x1C, 0x00,
        0xE0, 0xBF, 0xFB, 0xFF, 0xFF, 0xFD, 0xED, 0x23, 0x00, 0x00, 0x01, 0x00, 0x03, 0x00, 0x00, 0x02,
        0xE0, 0x9F, 0xF9, 0xFF, 0xFF, 0xFD, 0xED, 0x23, 0x00, 0x00, 0x00, 0xB0, 0x03, 0x00, 0x02, 0x00,
        0xE8, 0xC7, 0x3D, 0xD6, 0x18, 0xC7, 0xFF, 0x03, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xEE, 0x87, 0xF9, 0xFF, 0xFF, 0xFD, 0x6D, 0xD3, 0x87, 0x39, 0x02, 0x5E, 0xC0, 0xFF, 0x3F, 0x00,
        0xEE, 0xBF, 0xFB, 0xFF, 0xFF, 0xFD, 0xED, 0xF3, 0xBF, 0x3B, 0x01, 0x00, 0xCF, 0xFF, 0x00, 0xFE,
        0xEE, 0x9F, 0xF9, 0xFF, 0xFF, 0xFD, 0xED, 0xF3, 0x9F, 0x39, 0xE0, 0xB0, 0xCF, 0xFF, 0x02, 0x00,
        0xEC, 0xC7, 0x3D, 0xD6, 0x18, 0xC7, 0xFF, 0xC3, 0xC7, 0x3D, 0x81, 0x00, 0xC0, 0xFF, 0x00, 0x00,
        0xE0, 0xDF, 0xFD, 0xFF, 0xFF, 0xFD, 0xFF, 0x23, 0x00, 0x00, 0x00, 0x37, 0x03, 0x00, 0x00, 0x00,
        0xE1, 0xDF, 0xFD, 0xFF, 0xFF, 0xFD, 0xEF, 0x23, 0x00, 0x00, 0x00, 0x70, 0x03, 0x00, 0x06, 0x00,
        0xF0, 0xDF, 0xFD, 0xFF, 0xFF, 0xFF, 0xFF, 0x27, 0x00, 0x40, 0x70, 0x80, 0x03, 0x00, 0x00, 0xFC,
        0xE0, 0xFF, 0x7F, 0xFC, 0xFF, 0xFF, 0xFB, 0x2F, 0x7F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xFF, 0xDF, 0xFD, 0xFF, 0xFF, 0xFD, 0xFF, 0xF3, 0xDF, 0x3D, 0x60, 0x37, 0xCF, 0xFF, 0x00, 0x00,
        0xEF, 0xDF, 0xFD, 0xFF, 0xFF, 0xFD, 0xEF, 0xF3, 0xDF, 0x3D, 0x60, 0x70, 0xCF, 0xFF, 0x0E, 0x00,
        0xFF, 0xDF, 0xFD, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xDF, 0x7D, 0xF0, 0x80, 0xCF, 0xFF, 0x00, 0xFC,
        0xEE, 0xFF, 0x7F, 0xFC, 0xFF, 0xFF, 0xFB, 0x2F, 0x7F, 0x84, 0x5F, 0xFF, 0xC0, 0xFF, 0x0C, 0x00,
        0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x05, 0x00, 0x7F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xD6, 0xF7, 0xFF, 0xFF, 0xAF, 0xFF, 0x05, 0x20, 0x5F, 0x00, 0x00, 0xF0, 0x00, 0x00, 0x00, 0x00,
        0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFE, 0xFF, 0xFF, 0xFF, 0x1F, 0x00, 0x00,
        0x00, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x07, 0xFF, 0x7F, 0xFF, 0x03, 0x00, 0x00, 0x00, 0x00,
        0xD6, 0xF7, 0xFF, 0xFF, 0xAF, 0xFF, 0xFF, 0x3F, 0x5F, 0x7F, 0xFF, 0xF3, 0x00, 0x00, 0x00, 0x00,
        0x01, 0x00, 0x00, 0x03, 0xFF, 0x03, 0xA0, 0xC2, 0xFF, 0xFE, 0xFF, 0xFF, 0xFF, 0x1F, 0xFE, 0xFF,
        0xDF, 0xFF, 0xFF, 0xFE, 0xFF, 0xFF, 0xFF, 0x1F, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x07, 0x00, 0x80, 0x00, 0x00, 0x3F, 0x3C, 0x62, 0xC0, 0xE1, 0xFF,
        0x03, 0x40, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xBF, 0x20, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF7,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0x00, 0xFF, 0xFF, 0x3F, 0x00, 0xFF, 0x00, 0x00, 0x00,
        0xBF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFD, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x03, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0x3F, 0xFF, 0xFF, 0xFF, 0xFF, 0xBF, 0x20, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF7,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x3D, 0x7F, 0x3D, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0x3D, 0xFF, 0xFF, 0xFF, 0xFF, 0x3D, 0x7F, 0x3D, 0xFF, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0x3D, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x07, 0x00, 0x00, 0x00, 0x00,
        0xFF, 0xFF, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x3F, 0x3F,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x3D, 0x7F, 0x3D, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0x3D, 0xFF, 0xFF, 0xFF, 0xFF, 0x3D, 0x7F, 0x3D, 0xFF, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0x3D, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xE7, 0x00, 0xFE, 0x03, 0x00,
        0xFF, 0xFF, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x3F, 0x3F,
        0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x07,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x9F, 0xFF, 0xFF,
        0xFE, 0xFF, 0xFF, 0x07, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xC7, 0xFF, 0x01,
        0xFF, 0xFF, 0x03, 0x80, 0xFF, 0xFF, 0x03, 0x00, 0xFF, 0xFF, 0x03, 0x00, 0xFF, 0xDF, 0x01, 0x00,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x0F, 0x00, 0x00, 0x00, 0x80, 0x10, 0x00, 0x00, 0x00, 0x00,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x9F, 0xFF, 0xFF,
        0xFE, 0xFF, 0xFF, 0x07, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xC7, 0xFF, 0x01,
        0xFF, 0xFF, 0x3F, 0x80, 0xFF, 0xFF, 0x1F, 0x00, 0xFF, 0xFF, 0x0F, 0x00, 0xFF, 0xDF, 0x0D, 0x00,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x8F, 0x30, 0xFF, 0x03, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x01,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x05, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x3F, 0x00,
        0xFF, 0xFF, 0xFF, 0x7F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x3F, 0x1F, 0x00,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x0F, 0xFF, 0xFF, 0xFF, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0xB8, 0xFF, 0x03, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x01,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x07, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x3F, 0x00,
        0xFF, 0xFF, 0xFF, 0x7F, 0xFF, 0x0F, 0xFF, 0x0F, 0xC0, 0xFF, 0xFF, 0xFF, 0xFF, 0x3F, 0x1F, 0x00,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x0F, 0xFF, 0xFF, 0xFF, 0x03, 0xFF, 0x07, 0x00, 0x00, 0x00, 0x00,
        0xFF, 0xFF, 0x7F, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xE0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x0F, 0x00, 0xE0, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xF8, 0xFF, 0xFF, 0xFF, 0x01, 0xC0, 0x00, 0xFC, 0xFF, 0xFF, 0xFF, 0xFF, 0x3F, 0x00, 0x00, 0x00,
        0xFF, 0xFF, 0xFF, 0x0F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0xFF, 0xFF, 0xFF, 0x9F,
        0xFF, 0x03, 0xFF, 0x03, 0x80, 0x00, 0xFF, 0xBF, 0xFF, 0xFF, 0xFF, 0x3F, 0xFF, 0x0F, 0x00, 0x00,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x1F, 0xFF, 0x03, 0x00, 0xF8, 0x0F, 0x00,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x0F, 0x00,
        0xFF, 0xFF, 0xFF, 0xFF, 0x0F, 0x00, 0x00, 0x00, 0x00, 0xE0, 0x00, 0xFC, 0xFF, 0xFF, 0xFF, 0x3F,
        0xFF, 0x07, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xE7, 0x00, 0x00, 0x00, 0x00, 0x00, 0xDE, 0x6F, 0x04,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0xFF, 0xE3, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x3F,
        0xFF, 0x07, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xE7, 0x00, 0x00, 0xF7, 0xFF, 0xFF, 0xFF, 0xFF, 0x07,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0x07, 0x00, 0x04, 0x00, 0x00, 0x00, 0x27, 0x00, 0xF0, 0x00, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x80,
        0x00, 0x00, 0xFF, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x84, 0xFC, 0x2F, 0x3F, 0x50, 0xFD, 0xFF, 0xF3, 0xE0, 0x43, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x01, 0x00, 0x10, 0x00, 0x00, 0x00, 0x02, 0x80,
        0x00, 0x00, 0xFF, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x1F, 0xE2, 0xFF, 0x01, 0x00,
        0x84, 0xFC, 0x2F, 0x3F, 0x50, 0xFD, 0xFF, 0xF3, 0xE0, 0x43, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x1F, 0x78, 0x0C, 0x00,
        0xFF, 0xFF, 0xFF, 0xFF, 0xBF, 0x20, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x80, 0x00, 0x00,
        0xFF, 0xFF, 0x7F, 0x00, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x00, 0x00, 0x00, 0x00,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x1F, 0xF8, 0x0F, 0x00,
        0xFF, 0xFF, 0xFF, 0xFF, 0xBF, 0x20, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x80, 0x00, 0x80,
        0xFF, 0xFF, 0x7F, 0x00, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF,
        0xE0, 0x00, 0x00, 0x00, 0xFE, 0x03, 0x3E, 0x1F, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0x7F, 0xE0, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF7,
        0xE0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0x7F, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF,
        0xE0, 0x00, 0x00, 0x00, 0xFE, 0xFF, 0x3E, 0x1F, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0x7F, 0xE6, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xE0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0x7F, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x3F,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0x00, 0xFF, 0xFF,
        0xFF, 0x1F, 0xFF, 0xFF, 0x00, 0x0C, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0x00, 0x80,
        0xFF, 0xFF, 0xFF, 0x3F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00,
        0x00, 0x00, 0x80, 0xFF, 0xFC, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xF9, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x1F, 0x00, 0x00, 0xFE, 0xFF,
        0xFF, 0x1F, 0xFF, 0xFF, 0xFF, 0x0F, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0, 0xBF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x03, 0x00,
        0x00, 0x00, 0x80, 0xFF, 0xFC, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xF9, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x1F, 0x00, 0x00, 0xFE, 0xFF,
        0xBB, 0xF7, 0xFF, 0xFF, 0x07, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x0F, 0x00,
        0xFC, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFC, 0x68,
        0x00, 0xFC, 0xFF, 0xFF, 0x3F, 0x00, 0xFF, 0xFF, 0x7F, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x1F,
        0xF0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x07, 0x00, 0x00, 0x80, 0x00, 0x00, 0xDF, 0xFF, 0x00, 0x7C,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x10, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x0F, 0x00,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x3F, 0x00, 0xFF, 0x03, 0xFF, 0xFF, 0xFF, 0xE8,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x3F, 0xFF, 0xFF, 0xFF, 0xFF, 0x0F, 0x00, 0xFF, 0xFF, 0xFF, 0x1F,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0x80, 0xFF, 0x03, 0xFF, 0xFF, 0xFF, 0x7F,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0x00, 0x00, 0xF7, 0x0F, 0x00, 0x00, 0xFF, 0xFF, 0x7F, 0xC4,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x62, 0x3E, 0x05, 0x00, 0x00, 0x38, 0xFF, 0x07, 0x1C, 0x00,
        0x7E, 0x7E, 0x7E, 0x00, 0x7F, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF7, 0xFF, 0x03, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x07, 0x00, 0x00, 0x00,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0x00, 0xFF, 0x3F, 0xFF, 0x03, 0xFF, 0xFF, 0x7F, 0xFC,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x07, 0x00, 0x00, 0x38, 0xFF, 0xFF, 0x7C, 0x00,
        0x7E, 0x7E, 0x7E, 0x00, 0x7F, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF7, 0xFF, 0x03, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x37, 0xFF, 0x03,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x3F, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x03, 0x00, 0x00, 0x00, 0x00,
        0x7F, 0x00, 0xF8, 0xA0, 0xFF, 0xFD, 0x7F, 0x5F, 0xDB, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x03, 0x00, 0x00, 0x00, 0xF8, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x3F, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x03, 0x00, 0x00, 0x00, 0x00,
        0x7F, 0x00, 0xF8, 0xE0, 0xFF, 0xFD, 0x7F, 0x5F, 0xDB, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x03, 0x00, 0x00, 0x00, 0xF8, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x3F, 0xF0, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x3F, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFC, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x03,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x8A, 0xAA,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x1F,
        0x00, 0x00, 0x00, 0x00, 0xFE, 0xFF, 0xFF, 0x07, 0xFE, 0xFF, 0xFF, 0x07, 0xC0, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0x3F, 0xFF, 0xFF, 0xFF, 0x7F, 0xFC, 0xFC, 0xFC, 0x1C, 0x00, 0x00, 0x00, 0x00,
        0xFF, 0xFF, 0x00, 0x00, 0xFF, 0xFF, 0x18, 0x00, 0x00, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x8A, 0xAA,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x1F,
        0x00, 0x00, 0xFF, 0x03, 0xFE, 0xFF, 0xFF, 0x87, 0xFE, 0xFF, 0xFF, 0x07, 0xE0, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0xFC, 0xFC, 0xFC, 0x1C, 0x00, 0x00, 0x00, 0x00,
        0xFF, 0xEF, 0xFF, 0xFF, 0x7F, 0xFF, 0xFF, 0xB7, 0xFF, 0x3F, 0xFF, 0x3F, 0x00, 0x00, 0x00, 0x00,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x07,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x1F, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xFF, 0xEF, 0xFF, 0xFF, 0x7F, 0xFF, 0xFF, 0xB7, 0xFF, 0x3F, 0xFF, 0x3F, 0x00, 0x00, 0x00, 0x00,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x07,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x1F, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xFF, 0xFF, 0xFF, 0x1F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0xE0, 0xFF, 0xFF, 0xFF, 0x07, 0xFF, 0xFF, 0xFF, 0xFF, 0x3F, 0x00,
        0xFF, 0xFF, 0xFF, 0x3F, 0xFF, 0xFF, 0xFF, 0xFF, 0x0F, 0xFF, 0x3E, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xFF, 0xFF, 0xFF, 0x1F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00,
        0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0xE0, 0xFF, 0xFF, 0xFF, 0x07, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x07,
        0xFF, 0xFF, 0xFF, 0x3F, 0xFF, 0xFF, 0xFF, 0xFF, 0x0F, 0xFF, 0x3E, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0x3F, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x0F, 0xFF, 0xFF, 0xFF, 0xFF, 0x0F,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x0F, 0x00, 0xFF, 0xF7,
        0xFF, 0xF7, 0xB7, 0xFF, 0xFB, 0xFF, 0xFB, 0x1B, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x0F, 0x00,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0x3F, 0xFF, 0x03, 0xFF, 0xFF, 0xFF, 0xFF, 0x0F, 0xFF, 0xFF, 0xFF, 0xFF, 0x0F,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x0F, 0x00, 0xFF, 0xF7,
        0xFF, 0xF7, 0xB7, 0xFF, 0xFB, 0xFF, 0xFB, 0x1B, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x0F, 0x00,
        0x3F, 0xFD, 0xFF, 0xFF, 0xFF, 0xFF, 0xBF, 0x91, 0xFF, 0xFF, 0x3F, 0x00, 0xFF, 0xFF, 0x7F, 0x00,
        0xFF, 0xFF, 0xFF, 0x7F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x37, 0x00,
        0xFF, 0xFF, 0x3F, 0x00, 0xFF, 0xFF, 0xFF, 0x03, 0xFF, 0xFF, 0xFF, 0x03, 0x00, 0x00, 0x00, 0x00,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x01, 0x00, 0xEF, 0xFE, 0xFF, 0xFF, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x1F,
        0xFF, 0xFF, 0xFF, 0x1F, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFE, 0xFF, 0xFF, 0x1F, 0x00, 0x00, 0x00,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x3F, 0x00, 0xFF, 0xFF, 0x3F, 0x00, 0xFF, 0xFF, 0x07, 0x00,
        0xFF, 0xFF, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x6F, 0xF0, 0xEF, 0xFE, 0xFF, 0xFF, 0x3F, 0x87, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x1F,
        0xFF, 0xFF, 0xFF, 0x1F, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFE, 0xFF, 0xFF, 0x7F, 0x00, 0x00, 0x00,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x3F, 0x00, 0xFF, 0xFF, 0x3F, 0x00, 0xFF, 0xFF, 0x07, 0x00,
        0xFF, 0xFF, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x07, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x07, 0x00,
        0xFF, 0xFF, 0xFF, 0xFF, 0x0F, 0x00, 0x00, 0x00, 0x00, 0xFC, 0xFF, 0xFF, 0x3F, 0x80, 0xFF, 0xFF,
        0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x07, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x07, 0x00,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0xFF, 0x03, 0xFF, 0xFF, 0xFF, 0xFF, 0x3F, 0xBE, 0xFF, 0xFF,
        0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x03, 0x03, 0x00, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xFF, 0xFF, 0xFF, 0x1F, 0x80, 0x00, 0xFF, 0xFF, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF,
        0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x1F, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x7F, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x1B, 0x03, 0x00, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFC,
        0xFF, 0xFF, 0xFF, 0x1F, 0x80, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0x00, 0x00, 0x00, 0xFF, 0xFF,
        0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x1F, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x7F, 0x00,
        0xF8, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x26, 0x00,
        0xF8, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x01, 0x00, 0x00,
        0xF8, 0xFF, 0xFF, 0xFF, 0x7F, 0x00, 0x00, 0x00, 0x90, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x47, 0x00,
        0xF8, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x07, 0x00, 0x1E, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0x00, 0x00, 0x00, 0xC0, 0xFF, 0x3F, 0x80,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x07, 0x04, 0x00, 0xFF, 0xFF, 0xFF, 0x01, 0xFF, 0x03,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xDF, 0xFF, 0xF0, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x4F, 0x00,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x1F, 0xDE, 0xFF, 0x17, 0x00, 0x00, 0x00, 0x00,
        0xFF, 0xFF, 0xFB, 0xFF, 0xFF, 0x0F, 0x00, 0x80, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x7F, 0xBD, 0xFF, 0xBF, 0xFF, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0x00, 0x00, 0x00, 0x00,
        0xE0, 0x9F, 0xF9, 0xFF, 0xFF, 0xFD, 0xED, 0x23, 0x00, 0x00, 0x01, 0xE0, 0x03, 0x00, 0x00, 0x00,
        0xFF, 0x4B, 0xFF, 0xFF, 0xFF, 0xFF, 0xBF, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xFF, 0xFF, 0xFB, 0xFF, 0xFF, 0xFF, 0xFF, 0xC0, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x7F, 0xBD, 0xFF, 0xBF, 0xFF, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x07, 0xFF, 0x03,
        0xEF, 0x9F, 0xF9, 0xFF, 0xFF, 0xFD, 0xED, 0xFB, 0x9F, 0x39, 0x81, 0xE0, 0xCF, 0x1F, 0x1F, 0x00,
        0xFF, 0x4B, 0xFF, 0xFF, 0xFF, 0xFF, 0xBF, 0xFF, 0xA5, 0xF7, 0x0F, 0x00, 0x06, 0x00, 0x00, 0x00,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x1F, 0x00, 0x80, 0x07, 0x00, 0x80, 0x03, 0x00, 0x00, 0x00,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0xB0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x00,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x07, 0xFF, 0xC3, 0x03, 0x00, 0x00, 0x00,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xBF, 0x00, 0xFF, 0x03, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x3F, 0xFF, 0x01, 0x00, 0x00, 0x3F, 0x00, 0x00, 0x00, 0x00,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x07, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xFF, 0xFF, 0xFF, 0x07, 0x00, 0x00, 0x00, 0x00, 0x7F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x11, 0x00, 0xFF, 0x03, 0x00, 0x00, 0x00, 0x00,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0xFF, 0x03, 0xFF, 0xFF, 0x0F, 0x00, 0x00, 0x00,
        0xFF, 0xFF, 0xFF, 0xE7, 0xFF, 0x0F, 0xFF, 0x03, 0x7F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x80,
        0x7F, 0xF2, 0x6F, 0xFF, 0xFF, 0xFF, 0x00, 0x80, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0xFF, 0xFC, 0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0x00, 0x0A, 0x00, 0x00, 0x00,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x03, 0x00, 0x80,
        0x7F, 0xF2, 0x6F, 0xFF, 0xFF, 0xFF, 0xBF, 0xF9, 0x0F, 0x00, 0xFF, 0x03, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0xFF, 0xFC, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFC, 0x1B, 0x00, 0x00, 0x00,
        0x01, 0xF8, 0xFF, 0xFF, 0xFF, 0xFF, 0x07, 0x04, 0x00, 0x00, 0x01, 0xF0, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0x03, 0x00, 0x20, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x01,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0x00, 0x00, 0x00,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0x80, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0x23, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x01,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0x00, 0xFF, 0x03,
        0xFF, 0xFD, 0xFF, 0xFF, 0xFF, 0x7F, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFC, 0xFF,
        0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x7F, 0xFB, 0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0x00, 0x40, 0x00, 0x00, 0x00, 0xBF, 0xFD, 0xFF, 0xFF,
        0xFF, 0x03, 0x00, 0x01, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x0F, 0x00, 0x00, 0x00, 0x00,
        0xFF, 0xFD, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0xFF, 0x01, 0x00, 0xFF, 0x03, 0x00, 0x00, 0xFC, 0xFF,
        0xFF, 0xFF, 0xFC, 0xFF, 0xFF, 0xFE, 0x7F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x7F, 0xFB, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0xB4, 0xFF, 0x00, 0xFF, 0x03, 0xBF, 0xFD, 0xFF, 0xFF,
        0xFF, 0x7F, 0xFB, 0x01, 0xFF, 0x03, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x0F, 0xFF, 0x03, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x07, 0x00,
        0xF4, 0xFF, 0xFD, 0xFF, 0xFF, 0xFF, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x7F, 0x00,
        0xFF, 0xFF, 0xFD, 0xFF, 0xFF, 0xFF, 0xFF, 0xC7, 0x07, 0x00, 0xFF, 0x07, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0x00, 0x00,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0x00,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x7E, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x07, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0xFF, 0xFF, 0x3F, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xFF, 0xFF, 0xFF, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0xFF, 0xFF, 0xFF, 0x7F, 0x00, 0x00, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x3F, 0x00, 0x00,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0xF8, 0xFF, 0xFF, 0xE0,
        0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0xFF, 0xFF, 0xFF, 0x7F, 0xFF, 0x03, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0xFF, 0x03, 0xFF, 0xFF, 0xFF, 0x3F, 0x1F, 0x00,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0x00, 0x0F, 0x00, 0xFF, 0x03, 0xF8, 0xFF, 0xFF, 0xE0,
        0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x1F, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x1F, 0xFF, 0x03,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xF9, 0xFF, 0xFF, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x07, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0xF8, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0B, 0x00, 0x7C, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xF9, 0xFF, 0xFF, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x87, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0x80, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1B, 0x00, 0x7F, 0x00,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x80,
        0xFF, 0xFF, 0xFF, 0x7F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x07, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xEF, 0x6F,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x0F,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x3F, 0xFF, 0xFF, 0x7F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x07, 0xFF, 0x1F,
        0xFF, 0x01, 0xFF, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0xE3, 0x07, 0xF8,
        0xE7, 0x0F, 0x00, 0x00, 0x00, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x07, 0xFF, 0x1F,
        0xFF, 0x01, 0xFF, 0x63, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xFF, 0xFF, 0xFF, 0x7F, 0xE0, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x03,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x03,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xDF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xDF, 0x64, 0xDE, 0xFF, 0xEB, 0xEF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xBF, 0xE7, 0xDF, 0xDF, 0xFF, 0xFF, 0xFF, 0x7B, 0x5F, 0xFC, 0xFD, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0x3F, 0xFF, 0xFF, 0xFF, 0xFD, 0xFF, 0xFF, 0xF7, 0xFF, 0xFF, 0xFF, 0xF7,
        0xFF, 0xFF, 0xDF, 0xFF, 0xFF, 0xFF, 0xDF, 0xFF, 0xFF, 0x7F, 0xFF, 0xFF, 0xFF, 0x7F, 0xFF, 0xFF,
        0xFF, 0xFD, 0xFF, 0xFF, 0xFF, 0xFD, 0xFF, 0xFF, 0xF7, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0x3F, 0xFF, 0xFF, 0xFF, 0xFD, 0xFF, 0xFF, 0xF7, 0xFF, 0xFF, 0xFF, 0xF7,
        0xFF, 0xFF, 0xDF, 0xFF, 0xFF, 0xFF, 0xDF, 0xFF, 0xFF, 0x7F, 0xFF, 0xFF, 0xFF, 0x7F, 0xFF, 0xFF,
        0xFF, 0xFD, 0xFF, 0xFF, 0xFF, 0xFD, 0xFF, 0xFF, 0xF7, 0xCF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0xF8, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x1F, 0x20, 0x00,
        0x10, 0x00, 0x00, 0xF8, 0xFE, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x3F, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x1F, 0x80, 0x3F, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x7F, 0xFF, 0xFF, 0xF9, 0xDB, 0x07, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x3F, 0x00, 0x00,
        0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x1F, 0xFF, 0x3F, 0xFF, 0x43, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x3F, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x0F, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x7F, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x03,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x0F, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x3F, 0x01, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x03,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x07,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x7F, 0xB7, 0x3F, 0x1F, 0xC0,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0x6F, 0xFF, 0x7F,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x7F, 0xFF, 0xFF, 0x3F, 0xC0,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0x6F, 0xFF, 0x7F,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x0F, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x1F, 0x00, 0x7F, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x0F, 0xFF, 0x03, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xEF, 0xFF, 0xFF, 0xFF, 0x96, 0xFE, 0xF7, 0x0A, 0x84, 0xEA, 0x96, 0xAA, 0x96, 0xF7, 0xF7, 0x5E,
        0xFF, 0xFB, 0xFF, 0x0F, 0xEE, 0xFB, 0xFF, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0x3F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x3F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x3F, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x03,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    ]);
}

pub mod backtrace
{
    pub use std::backtrace::{ * };
}

pub mod borrow
{
    pub use std::borrow::{ * };
}

pub mod boxed
{
    pub use std::boxed::{ * };
}

pub mod cell
{
    pub use std::cell::{ * };
}

pub mod char
{
    /*!
    Character stream used for parsing. */
    pub use std::char::{ * };
    use ::
    {
        cell::{ RefCell },
        fs::{ File },
        io::{ self, Read },
        iter::{ Peekable },
        rc::{ Rc },
        str::{ Chars },
        *,
    };
    /*
    */
    #[allow( dead_code )]
    #[derive(Clone, Debug)]
    struct Inner 
    {
        file: Option<String>,
        contents: String,
        stream: Peekable<Chars<'static>>,
        line: usize,
        col: usize,
    }

    #[derive(Clone, Debug)]
    pub struct CharStream 
    {
        inner: Rc<RefCell<Inner>>,
    }

    impl CharStream 
    {
        pub fn from_file(path: &str) -> io::Result<CharStream> 
        {
            let mut file = File::open(path)?;

            let len = file.metadata()?.len();
            let mut contents = String::with_capacity(len as usize);

            file.read_to_string(&mut contents)?;

            Self::from_string_impl(Some(String::from(path)), contents)
        }

        fn from_string_impl(file: Option<String>, contents: String) -> io::Result<CharStream> 
        {
            let chars: Chars = unsafe { mem::transmute(contents.chars()) };
            let stream = chars.peekable();
            Ok(CharStream 
            {
                inner: Rc::new(RefCell::new(Inner 
                {
                    file,
                    contents,
                    stream,
                    line: 1,
                    col: 1,
                })),
            })
        }

        pub fn from_string(contents: String) -> io::Result<CharStream> 
        {
            Self::from_string_impl(None, contents)
        }

        pub fn peek(&self) -> Option<char> 
        {
            let mut inner = self.inner.borrow_mut();
            let opt = inner.stream.peek();

            match opt {
                Some(ch) => Some(*ch),
                None => None,
            }
        }

        pub fn file(&self) -> Option<String> 
        {
            let inner = self.inner.borrow();
            inner.file.clone()
        }

        pub fn line(&self) -> usize 
        {
            let inner = self.inner.borrow();
            inner.line
        }

        pub fn col(&self) -> usize 
        {
            let inner = self.inner.borrow();
            inner.col
        }

        fn set_line(&mut self, value: usize) 
        {
            let mut inner = self.inner.borrow_mut();
            inner.line = value;
        }

        fn set_col(&mut self, value: usize) 
        {
            let mut inner = self.inner.borrow_mut();
            inner.col = value;
        }
    }

    impl Iterator for CharStream 
    {
        type Item = char;

        fn next(&mut self) -> Option<Self::Item> {
            let opt = {
                let mut inner = self.inner.borrow_mut();
                inner.stream.next()
            };

            match opt {
                Some(ch) => {
                    if ch == '\n' {
                        let line = self.line();
                        self.set_line(line + 1);
                        self.set_col(1);
                    } else {
                        let col = self.col();
                        self.set_col(col + 1);
                    }
                    Some(ch)
                }
                None => None,
            }
        }
    }

    pub fn format(ch: char) -> String 
    {
        match ch {
            '\n' => String::from("\\n"),
            ch => format!("{}", ch),
        }
    }
}

pub mod clone
{
    pub use std::clone::{ * };
}

pub mod cmp
{
    pub use std::cmp::{ * };
}

pub mod collections
{
    pub use std::collections::{ * };
}

pub mod completions
{
    /*!
    */
    use ::
    {
        *,
    };
    /*
    */
    pub mod dots
    {
        /*!
        */
        use ::
        {
            parses::lines::complete::{ Completion },
            *,
        };
        /*
        */
        // fn handle_lv1_hash(res: &mut Vec<Completion>, h: &Hash, word: &str)
        fn handle_lv1_hash(res: &mut Vec<Completion>, h: &Hash, word: &str)
        {
            /*
            for v in h.values()
            {
                if let Yaml::Array(ref arr) = v
                {
                    for s in arr {
                        if let Yaml::String(value) = s {
                            if !value.starts_with(word) && !value.starts_with('`') {
                                continue;
                            }
                            handle_lv1_string(res, value, word);
                        }
                    }
                }
            } */
        }
        //fn complete_dots(line: &str, word: &str) -> Vec<Completion>
        pub fn complete( line:&str, word:&str ) -> Vec<Completion>
        {
            let mut res = Vec::new();
            
            if line.trim().is_empty() { return res; }
                    
            let ( dot_file, sub_cmd ) = ::get::dot_file( line );
            
            if dot_file.is_empty() { return res; }

            let mut f;
            match File::open( &dot_file )
            {
                Ok(x) => f = x,
                Err(e) =>
                {
                    println_stderr!(r#":: open dot_file error: {:?}"#, e);
                    return res;
                }
            }

            let mut s = String::new();
            match f.read_to_string(&mut s)
            {
                Ok(_) => {}
                Err(e) =>
                {
                    println_stderr!(":: read_to_string error: {:?}", e);
                    return res;
                }
            }

            let document = ::parses::load_from_str( s )?;
            /*
            for doc in docs.iter()
            {
                match *doc {
                    Yaml::Array(ref v) => {
                        for x in v {
                            match *x {
                                Yaml::String(ref name) => {
                                    if !sub_cmd.is_empty() {
                                        continue;
                                    }
                                    handle_lv1_string(&mut res, name, word);
                                }
                                Yaml::Hash(ref h) => {
                                    if sub_cmd.is_empty() {
                                        for k in h.keys() {
                                            if let Yaml::String(value) = k {
                                                handle_lv1_string(&mut res, value, word);
                                            }
                                        }
                                    } else {
                                        let key = Yaml::from_str(&sub_cmd);
                                        if !h.contains_key(&key) {
                                            continue;
                                        }
                                        handle_lv1_hash(&mut res, h, word);
                                    }
                                }
                                _ => {
                                    println_stderr!("\nThis yaml file is in bad format: {}", dot_file);
                                }
                            }
                        }
                    }
                    _ => {
                        println_stderr!("\nThis yaml file is in bad format: {}", dot_file);
                    }
                }
            }
            */
            res
        }
    }

    fn for_dots(line: &str) -> bool
    {
        /*
        let args = parsers::parser_line::line_to_plain_tokens(line);
        let len = args.len();
        if len == 0 {
            return false;
        }
        let dir = tools::get_user_completer_dir();
        let dot_file = format!("{}/{}.yaml", dir, args[0]);
        Path::new(dot_file.as_str()).exists() */
        true
    }
}

pub mod convert
{
    pub use std::convert::{ * };
}

pub mod default
{
    pub use std::default::{ * };
}

pub mod error
{
    /*!
    Error Handling */
    pub use std::error::{ * };

    use ::
    {
        types::{ Type },
        *,
    };
    /*
    */
    /// The fabulous OVER error type.
    #[derive(Debug, PartialEq, Eq)]
    pub enum OverError
    {
        ArrOutOfBounds(usize),
        ArrTypeMismatch(Type, Type),
        FieldNotFound(String),
        InvalidFieldName(String),
        NoParentFound,
        ParseError(String),
        TupOutOfBounds(usize),
        TupTypeMismatch(Type, Type, usize),
        TypeMismatch(Type, Type),
        IoError(String),
    }

    impl fmt::Display for OverError 
    {
        fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result
        {
            use self::OverError::*;

            match *self {
                ArrOutOfBounds(ref index) => write!(f, "Arr index {} out of bounds", index),
                ArrTypeMismatch(ref expected, ref found) => write!(
                    f,
                    "Arr inner types do not match: expected {}, found {}",
                    expected, found
                ),
                FieldNotFound(ref field) => write!(f, "Field not found: \"{}\"", field),
                InvalidFieldName(ref field) => write!(f, "Invalid field name: \"{}\"", field),
                NoParentFound => write!(f, "No parent found for this obj"),
                TupOutOfBounds(ref index) => write!(f, "Tup index {} out of bounds", index),
                TupTypeMismatch(ref expected, ref found, ref index) => write!(
                    f,
                    "Tup inner types do not match at index {}: expected {}, found {}",
                    index, expected, found
                ),
                TypeMismatch(ref expected, ref found) => {
                    write!(f, "Type mismatch: expected {}, found {}", expected, found)
                }
                ParseError(ref error) | IoError(ref error) => write!(f, "{}", error),
            }
        }
    }

    impl Error for OverError
    {
        fn description(&self) -> &str
        {
            use self::OverError::*;

            match *self 
            {
                ArrOutOfBounds(_) => "Arr index out of bounds",
                ArrTypeMismatch(_, _) => "Arr inner types do not match",
                FieldNotFound(_) => "Field not found",
                InvalidFieldName(_) => "Invalid field name",
                NoParentFound => "No parent found for this obj",
                TupOutOfBounds(_) => "Tup index out of bounds",
                TupTypeMismatch(_, _, _) => "Tup inner types do not match",
                TypeMismatch(_, _) => "Type mismatch",

                ParseError(ref error) | IoError(ref error) => error,
            }
        }
    }

    impl From<io::Error> for OverError
    {
        fn from(e: io::Error) -> Self { OverError::IoError(format!("{}", e)) }
    }

    impl From<ParseError> for OverError
    {
        fn from(e: ParseError) -> Self
        {
            OverError::ParseError(format!("{}", e))
        }
    }

    pub mod parse
    {
        /*!
        */
        use ::
        {
            char::{ format },
            error::{ Error, OverError },
            num::
            {
                big::{ BigInt, ParseBigIntError },
                ParseIntError
            },
            objects::{ Obj },
            parses::{ MAX_DEPTH, object_file, object_from_str },
            result::{ ParseResult },
            types::{ Type },
            *,
        };

        pub fn parse_err<T>(file: Option<String>, kind: ParseErrorKind) -> ParseResult<T>
        {
            Err(ParseError { file, kind })
        }
        /// Error kind.
        #[derive(Debug)]
        pub enum ParseErrorKind
        {
            BinaryOperatorError(Type, Type, char, usize, usize),
            CyclicInclude(String, usize, usize),
            DuplicateField(String, usize, usize),
            DuplicateGlobal(String, usize, usize),
            ExpectedType(Type, Type, usize, usize),
            GlobalNotFound(String, usize, usize),
            InvalidIndex(BigInt, usize, usize),
            InvalidClosingBracket(Option<char>, char, usize, usize),
            InvalidDot(Type, usize, usize),
            InvalidEscapeChar(char, usize, usize),
            InvalidFieldChar(char, usize, usize),
            InvalidFieldName(String, usize, usize),
            InvalidIncludeChar(char, usize, usize),
            InvalidIncludePath(String, usize, usize),
            InvalidIncludeToken(Type, usize, usize),
            InvalidNumeric(usize, usize),
            InvalidValue(String, usize, usize),
            InvalidValueChar(char, usize, usize),
            MaxDepth(usize, usize),
            UnaryOperatorError(Type, char, usize, usize),
            UnexpectedEnd(usize),
            VariableNotFound(String, usize, usize),

            IoError(String),
            OverError(String),
            ParseIntError(String),
        }
        /// Parse error.
        #[derive(Debug)]
        pub struct ParseError 
        {
            /// The file this error occurred in.
            pub file: Option<String>,
            /// Error kind.
            pub kind: ParseErrorKind,
        }

        impl fmt::Display for ParseError 
        {
            fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result
            {
                use self::ParseErrorKind::*;

                if let Some(ref file) = (*self).file
                {
                    write!(f, "{}: ", file)?;
                }
                match (*self).kind
                {
                    BinaryOperatorError(ref expected, ref found, ref op, ref line, ref col) => write!(
                        f,
                        "Could not apply operator {} on types {} and {} at line {}, column {}",
                        op, expected, found, line, col,
                    ),
                    CyclicInclude(ref file, ref line, ref col) => write!(
                        f,
                        "Tried to cyclically include file \"{}\" at line {}, column {}",
                        file, line, col
                    ),
                    DuplicateField(ref field, ref line, ref col) => write!(
                        f,
                        "Duplicate field \"{}\" at line {}, column {}",
                        field, line, col
                    ),
                    DuplicateGlobal(ref field, ref line, ref col) => write!(
                        f,
                        "Duplicate global \"{}\" at line {}, column {}",
                        field, line, col
                    ),
                    ExpectedType(ref expected, ref found, ref line, ref col) => write!(
                        f,
                        "Expected {} at line {}, column {}; found {}",
                        expected, line, col, found
                    ),
                    GlobalNotFound(ref var, ref line, ref col) => write!(
                        f,
                        "Global \"{}\" at line {}, column {} could not be found",
                        var, line, col
                    ),
                    InvalidClosingBracket(ref expected, ref found, ref line, ref col) => write!(
                        f,
                        "Invalid closing bracket '{}' at line {}, column {}; expected {}",
                        found,
                        line,
                        col,
                        match *expected {
                            Some(ch) => format!("'{}'", ch),
                            None => String::from("none"),
                        }
                    ),
                    InvalidDot(ref t, ref line, ref col) => write!(
                        f,
                        "Invalid use of dot notation on value of type {} at line {}, column {}; \
                        value must be an Obj, Arr, or Tup.",
                        t, line, col
                    ),
                    InvalidEscapeChar(ref ch, ref line, ref col) => write!(
                        f,
                        "Invalid escape character '\\{}' at line {}, column {}. \
                        If you meant to write a backslash, use '\\\\'",
                        format(*ch),
                        line,
                        col
                    ),
                    InvalidFieldChar(ref ch, ref line, ref col) => write!(
                        f,
                        "Invalid character '{}' for field at line {}, column {}",
                        format(*ch),
                        line,
                        col
                    ),
                    InvalidFieldName(ref field, ref line, ref col) => write!(
                        f,
                        "Invalid field name \"{}\" at line {}, column {}",
                        field, line, col
                    ),
                    InvalidIncludeChar(ref found, ref line, ref col) => write!(
                        f,
                        "Invalid include token character \'{}\' at line {}, column {}",
                        found, line, col
                    ),
                    InvalidIncludePath(ref path, ref line, ref col) => write!(
                        f,
                        "Invalid include path \"{}\" at line {}, column {}",
                        path, line, col
                    ),
                    InvalidIncludeToken(ref t, ref line, ref col) => write!(
                        f,
                        "Invalid value of type \"{}\" at line {}, column {}; \
                        must be either a Str value or one of the tokens \
                        \"Obj\", \"Arr\", \"Tup\", or \"Str\"",
                        t, line, col
                    ),
                    InvalidIndex(ref index, ref line, ref col) => write!(
                        f,
                        "Invalid index {} at line {}, column {}",
                        index, line, col
                    ),
                    InvalidNumeric(ref line, ref col) => {
                        write!(f, "Invalid numeric value at line {}, column {}", line, col)
                    }
                    InvalidValue(ref value, ref line, ref col) => write!(
                        f,
                        "Invalid value \"{}\" at line {}, column {}",
                        value, line, col
                    ),
                    InvalidValueChar(ref ch, ref line, ref col) => write!(
                        f,
                        "Invalid character '{}' for value at line {}, column {}",
                        format(*ch),
                        line,
                        col
                    ),
                    MaxDepth(ref line, ref col) => write!(
                        f,
                        "Exceeded maximum recursion depth ({}) at line {}, column {}",
                        MAX_DEPTH, line, col
                    ),
                    UnaryOperatorError(ref found, ref op, ref line, ref col) => write!(
                        f,
                        "Could not apply operator {} on type {} at line {}, column {}",
                        op, found, line, col,
                    ),
                    UnexpectedEnd(ref line) => write!(f, "Unexpected end at line {}", line,),
                    VariableNotFound(ref var, ref line, ref col) => write!(
                        f,
                        "Variable \"{}\" at line {}, column {} could not be found",
                        var, line, col
                    ),

                    IoError(ref error) | OverError(ref error) | ParseIntError(ref error) => {
                        write!(f, "{}", error)
                    }
                }
            }
        }

        impl Error for ParseError 
        {
            fn description(&self) -> &str {
                use self::ParseErrorKind::*;

                match (*self).kind {
                    BinaryOperatorError(_, _, _, _, _) | UnaryOperatorError(_, _, _, _) => {
                        "Could not apply operator"
                    }
                    CyclicInclude(_, _, _) => "Tried to cyclically include file",
                    DuplicateField(_, _, _) => "Duplicate field",
                    DuplicateGlobal(_, _, _) => "Duplicate global",
                    ExpectedType(_, _, _, _) => "Expected different type",
                    GlobalNotFound(_, _, _) => "Global could not be found",
                    InvalidClosingBracket(_, _, _, _) => "Invalid closing bracket",
                    InvalidDot(_, _, _) => "Invalid use of dot notation",
                    InvalidEscapeChar(_, _, _) => "Invalid escape character",
                    InvalidFieldChar(_, _, _) => "Invalid character for field",
                    InvalidFieldName(_, _, _) => "Invalid field name",
                    InvalidIncludeChar(_, _, _) => "Invalid include character",
                    InvalidIncludePath(_, _, _) => "Invalid include path",
                    InvalidIncludeToken(_, _, _) => "Invalid include token",
                    InvalidIndex(_, _, _) => "Invalid index",
                    InvalidNumeric(_, _) => "Invalid numeric value",
                    InvalidValue(_, _, _) => "Invalid value",
                    InvalidValueChar(_, _, _) => "Invalid character for value",
                    MaxDepth(_, _) => "Exceeded maximum depth for a container",
                    UnexpectedEnd(_) => "Unexpected end when reading value",
                    VariableNotFound(_, _, _) => "Variable could not be found",

                    IoError(ref error) | OverError(ref error) | ParseIntError(ref error) => error,
                }
            }
        }

        impl ParseError 
        {
            /// Convert an `OverError` to a `ParseError` given line and column numbers.
            pub fn from_over(e: &OverError, file: Option<String>, line: usize, col: usize) -> Self {
                ParseError {
                    file,
                    kind: ParseErrorKind::OverError(format!("{} at line {}, col {}", e, line, col)),
                }
            }
        }

        impl From<()> for ParseError 
        {
            fn from(e:()) -> Self {
                ParseError {
                    file: None,
                    kind: ParseErrorKind::IoError(format!("()")),
                }
            }
        }


        impl From<io::Error> for ParseError 
        {
            fn from(e: io::Error) -> Self {
                ParseError {
                    file: None,
                    kind: ParseErrorKind::IoError(format!("{}", e)),
                }
            }
        }

        impl From<ParseIntError> for ParseError 
        {
            fn from(e: ParseIntError) -> Self {
                ParseError {
                    file: None,
                    kind: ParseErrorKind::ParseIntError(format!("{}", e)),
                }
            }
        }

        impl From<ParseBigIntError> for ParseError 
        {
            fn from(e: ParseBigIntError) -> Self {
                ParseError {
                    file: None,
                    kind: ParseErrorKind::ParseIntError(format!("{}", e)),
                }
            }
        }
    } pub use self::parse::{ ParseError };
}

pub mod f32
{
    pub use std::f32::{ * };
}

pub mod f64
{
    pub use std::f64::{ * };
}

pub mod ffi
{
    pub use std::ffi::{ * };
}

pub mod fmt
{
    /*!
    Module containing functions for formatting output of objects. */
    pub use std::fmt::{ * };    
    use ::
    {
        arrays::{ Arr },
        num::
        {
            big::{ BigInt },
            rational::{ BigRational },
            traits::{ One },
        },
        objects::{ Obj },
        tuples::{ Tup },
        values::{ Value },
        *,
    };
    /*
    use crate::INDENT_STEP;
    */
   
    fn indent(amount: usize) -> String 
    {
        " ".repeat(amount)
    }

    fn get_char_map(ch: char) -> Option<&'static str> 
    {
        match ch
        {
            '\\' => Some("\\\\"),
            '\"' => Some("\\\""),
            '\'' => Some("\\\'"),
            '$' => Some("\\$"),
            '\n' => Some("\\n"),
            '\r' => Some("\\r"),
            '\t' => Some("\\t"),
            _ => None,
        }
    }

    fn replace_all(s: &str) -> String 
    {
        let mut string = String::with_capacity(s.len());

        for ch in s.chars() 
        {
            if let Some(s) = get_char_map( ch ) { string.push_str(s); }            
            else { string.push( ch ); }
        }

        string
    }
    /// Trait for formatting a .over representation of an object.
    pub trait Format 
    {
        fn format(&self, full: bool, indent_amt: usize) -> String;
    }

    impl Format for BigRational 
    {
        fn format(&self, _full: bool, _indent_amt: usize) -> String {
            let frac_fmt = format!("{}", *self);

            if *self.denom() == BigInt::one() {
                format!("{}.0", frac_fmt)
            } else {
                frac_fmt
            }
        }
    }

    impl Format for char 
    {
        fn format(&self, _full: bool, _indent_amt: usize) -> String {
            if let Some(s) = get_char_map(*self) {
                format!("\'{}\'", s)
            } else {
                format!("\'{}\'", *self)
            }
        }
    }

    impl Format for String 
    {
        fn format(&self, _full: bool, _indent_amt: usize) -> String {
            format!("\"{}\"", replace_all(self))
        }
    }

    impl Format for Value 
    {
        fn format(&self, _full: bool, indent_amt: usize) -> String {
            match *self {
                Value::Null => String::from("null"),

                Value::Bool(ref inner) => {
                    if *inner {
                        String::from("true")
                    } else {
                        String::from("false")
                    }
                }
                Value::Int(ref inner) => format!("{}", inner),

                Value::Frac(ref inner) => inner.format(true, indent_amt),
                Value::Char(ref inner) => inner.format(true, indent_amt),
                Value::Str(ref inner) => inner.format(true, indent_amt),
                Value::Arr(ref inner) => inner.format(true, indent_amt),
                Value::Tup(ref inner) => inner.format(true, indent_amt),
                Value::Obj(ref inner) => inner.format(true, indent_amt),
            }
        }
    }

    impl Format for Arr 
    {
        fn format(&self, full: bool, indent_amt: usize) -> String {
            match self.len() {
                0 => {
                    if full {
                        String::from("[]")
                    } else {
                        String::new()
                    }
                }
                1 => {
                    let f = self.get(0).unwrap().format(true, indent_amt);
                    if full {
                        format!("[{}]", f)
                    } else {
                        f
                    }
                }
                _ => {
                    let mut s = if full {
                        String::from("[\n")
                    } else {
                        String::new()
                    };

                    self.with_each(|value| {
                        s.push_str(&format!(
                            "{}{}\n",
                            indent(indent_amt),
                            value.format(true, indent_amt + INDENT_STEP)
                        ))
                    });

                    if full {
                        let actual_indent_amt = if indent_amt == 0 {
                            0
                        } else {
                            indent_amt - INDENT_STEP
                        };
                        s.push_str(&format!("{}]", indent(actual_indent_amt)));
                    }
                    s
                }
            }
        }
    }

    impl Format for Tup 
    {
        fn format(&self, full: bool, indent_amt: usize) -> String {
            match self.len() {
                0 => {
                    if full {
                        String::from("()")
                    } else {
                        String::new()
                    }
                }
                1 => {
                    let f = self.get(0).unwrap().format(true, indent_amt);
                    if full {
                        format!("({})", f)
                    } else {
                        f
                    }
                }
                _ => {
                    let mut s = if full {
                        String::from("(\n")
                    } else {
                        String::new()
                    };

                    self.with_each(|value| {
                        s.push_str(&format!(
                            "{}{}\n",
                            indent(indent_amt),
                            value.format(true, indent_amt + INDENT_STEP)
                        ))
                    });

                    if full {
                        s.push_str(&format!("{})", indent(indent_amt - INDENT_STEP)));
                    }
                    s
                }
            }
        }
    }

    impl Format for Obj 
    {
        fn format(&self, full: bool, indent_amt: usize) -> String {
            if self.is_empty() && !self.has_parent() {
                if full {
                    String::from("{}")
                } else {
                    String::new()
                }
            } else {
                let mut s = if full {
                    String::from("{\n")
                } else {
                    String::new()
                };

                if let Some(parent) = self.get_parent() {
                    s.push_str(&format!(
                        "{}^: {}\n",
                        indent(indent_amt),
                        parent.format(true, indent_amt + INDENT_STEP)
                    ));
                }
                self.with_each(|field, value| {
                    s.push_str(&format!(
                        "{}{}: {}\n",
                        indent(indent_amt),
                        field,
                        value.format(true, indent_amt + INDENT_STEP)
                    ));
                });

                if full {
                    s.push_str(&format!("{}}}", indent(indent_amt - INDENT_STEP)));
                }
                s
            }
        }
    }
}

pub mod fs
{
    pub use std::fs::{ * };
}

pub mod get
{
    /*!
    Getter Setter Functionality*/
    use ::
    {
        *,
    };
    /*
    */
    /// If `ch` preceded by a backslash together form an escape character, then return this char. Otherwise, return None.
    pub fn escaped_character(ch: char) -> Option<char>
    {
        match ch
        {
            '\\' => Some('\\'),
            '"' => Some('"'),
            '\'' => Some('\''),
            '$' => Some('$'),
            'n' => Some('\n'),
            'r' => Some('\r'),
            't' => Some('\t'),
            _ => None,
        }
    }
    // fn get_dot_file(line: &str) -> (String, String)
    pub fn dot_file( line:&str ) -> (String, String)
    {
        /*
        let args = parsers::parser_line::line_to_plain_tokens(line);
        let dir = tools::get_user_completer_dir();
        let dot_file = format!("{}/{}.yaml", dir, args[0]);
        if !Path::new(&dot_file).exists() {
            return (String::new(), String::new());
        }
        let sub_cmd = if (args.len() >= 3 && !args[1].starts_with('-'))
            || (args.len() >= 2 && !args[1].starts_with('-') && line.ends_with(' '))
        {
            args[1].as_str()
        } else {
            ""
        };

        (dot_file, sub_cmd.to_string()) */
        ( String::new(), String::new() )
    }
}

pub mod hash
{
    pub use std::hash::{ * };
}

pub mod history
{
    /*!
    */
    use ::
    {
        collections::HashMap,
        io::Write,
        path::Path,
        *,
    };
    /*
    use lineread::terminal::DefaultTerminal;
    use lineread::Interface;
    use rusqlite::Connection as Conn;
    use rusqlite::Error::SqliteFailure;

    use crate::shell;
    use crate::tools;
    */
    pub fn initialize_db(hfile: &str, htable: &str)
    {
        /*
        let path = Path::new(hfile);
        if !path.exists() {
            let _parent = match path.parent() {
                Some(x) => x,
                None => {
                    println_stderr!("cicada: history init - no parent found");
                    return;
                }
            };
            let parent = match _parent.to_str() {
                Some(x) => x,
                None => {
                    println_stderr!("cicada: parent to_str is None");
                    return;
                }
            };
            match fs::create_dir_all(parent) {
                Ok(_) => {}
                Err(e) => {
                    println_stderr!("cicada: histdir create error: {}", e);
                    return;
                }
            }
            match fs::File::create(hfile) {
                Ok(_) => {
                    println!("cicada: created history file: {}", hfile);
                }
                Err(e) => {
                    println_stderr!("cicada: history: file create failed: {}", e);
                }
            }
        }

        let conn = match Conn::open(hfile) {
            Ok(x) => x,
            Err(e) => {
                println_stderr!("cicada: history: open db error: {}", e);
                return;
            }
        };
        let sql = format!(
            "
            CREATE TABLE IF NOT EXISTS {}
                (inp TEXT,
                rtn INTEGER,
                tsb REAL,
                tse REAL,
                sessionid TEXT,
                out TEXT,
                info TEXT
                );
        ",
            htable
        );
        match conn.execute(&sql, []) {
            Ok(_) => {}
            Err(e) => println_stderr!("cicada: history: query error: {}", e),
        } */
    }

    pub fn initialize(rl: &mut Interface<DefaultTerminal>)
    {
        /*
        let mut hist_size: usize = 99999;
        if let Ok(x) = env::var("HISTORY_SIZE") {
            if let Ok(y) = x.parse::<usize>() {
                hist_size = y;
            }
        }
        rl.set_history_size(hist_size);

        let history_table = get_history_table();
        let hfile = get_history_file();

        if !Path::new(&hfile).exists() {
            init_db(&hfile, &history_table);
        }

        let mut delete_dups = true;
        if let Ok(x) = env::var("HISTORY_DELETE_DUPS") {
            if x == "0" {
                delete_dups = false;
            }
        }
        if delete_dups {
            delete_duplicated_histories();
        }

        let conn = match Conn::open(&hfile) {
            Ok(x) => x,
            Err(e) => {
                println_stderr!("cicada: history: conn error: {}", e);
                return;
            }
        };
        let sql = format!("SELECT inp FROM {} ORDER BY tsb;", history_table);
        let mut stmt = match conn.prepare(&sql) {
            Ok(x) => x,
            Err(e) => {
                println_stderr!("cicada: prepare select error: {}", e);
                return;
            }
        };

        let rows = match stmt.query_map([], |row| row.get(0)) {
            Ok(x) => x,
            Err(e) => {
                println_stderr!("cicada: query select error: {}", e);
                return;
            }
        };

        let mut dict_helper: HashMap<String, bool> = HashMap::new();
        for x in rows.flatten() {
            let inp: String = x;
            if dict_helper.contains_key(&inp) {
                continue;
            }
            dict_helper.insert(inp.clone(), true);
            rl.add_history(inp.trim().to_string());
        } */
    }
    //pub fn get_history_file() -> String
    pub fn read_file() -> String
    {
        /*
        if let Ok(hfile) = env::var("HISTORY_FILE") {
            hfile
        } else if let Ok(d) = env::var("XDG_DATA_HOME") {
            format!("{}/{}", d, "cicada/history.sqlite")
        } else {
            let home = tools::get_user_home();
            format!("{}/{}", home, ".local/share/cicada/history.sqlite")
        } */
        String::new()
    }
    // pub fn get_history_table() -> String
    pub fn read_table() -> String
    {
        /*
        if let Ok(hfile) = env::var("HISTORY_TABLE") {
            hfile
        } else {
            String::from("cicada_history")
        } */
        String::from("history")
    }
    // pub fn delete_duplicated_histories()
    pub fn deduplicate()
    {
        /*
        let hfile = get_history_file();
        let history_table = get_history_table();
        let conn = match Conn::open(&hfile) {
            Ok(x) => x,
            Err(e) => {
                println_stderr!("cicada: history: conn error: {}", e);
                return;
            }
        };
        let sql = format!(
            "DELETE FROM {} WHERE rowid NOT IN (
            SELECT MAX(rowid) FROM {} GROUP BY inp)",
            history_table, history_table
        );
        match conn.execute(&sql, []) {
            Ok(_) => {}
            Err(e) => match e {
                SqliteFailure(ee, msg) => {
                    if ee.extended_code == 5 {
                        log!(
                            "failed to delete dup histories: {}",
                            msg.unwrap_or("db is locked?".to_owned()),
                        );
                        return;
                    }
                    println_stderr!("cicada: history: delete dups error: {}: {:?}", &ee, &msg);
                }
                _ => {
                    println_stderr!("cicada: history: delete dup error: {}", e);
                }
            },
        } */
    }
    // pub fn add_raw(sh: &shell::Shell, line: &str, status: i32, tsb: f64, tse: f64)
    pub fn create_raw(sh: &shell::Shell, line: &str, status: i32, tsb: f64, tse: f64)
    {
        /*
        let hfile = get_history_file();
        let history_table = get_history_table();
        if !Path::new(&hfile).exists() {
            init_db(&hfile, &history_table);
        }

        let conn = match Conn::open(&hfile) {
            Ok(x) => x,
            Err(e) => {
                println_stderr!("cicada: history: conn error: {}", e);
                return;
            }
        };
        let sql = format!(
            "INSERT INTO \
            {} (inp, rtn, tsb, tse, sessionid, info) \
            VALUES('{}', {}, {}, {}, '{}', 'dir:{}|');",
            history_table,
            str::replace(line.trim(), "'", "''"),
            status,
            tsb,
            tse,
            sh.session_id,
            sh.current_dir,
        );
        match conn.execute(&sql, []) {
            Ok(_) => {}
            Err(e) => println_stderr!("cicada: history: save error: {}", e),
        } */
    }
    // pub fn add( sh: &shell::Shell, rl: &mut Interface<DefaultTerminal>, line: &str, status: i32, tsb: f64, tse: f64 )
    pub fn create
    ( 
        sh:&shell::Shell,
        rl: &mut Interface<DefaultTerminal>,
        line: &str,
        status: i32,
        tsb: f64,
        tse: f64
    )
    {
        /*
        add_raw(sh, line, status, tsb, tse);
        rl.add_history(line.to_string()); */
    }
}

pub mod i8
{
    pub use std::i8::{ * };
}

pub mod i16
{
    pub use std::i16::{ * };
}

pub mod i32
{
    pub use std::i32::{ * };
}

pub mod i64
{
    pub use std::i64::{ * };
}

pub mod is
{
    /*!
    Identity Signature*/
    use ::
    {
        *,
    };
    /*
    */
    /// Returns true if this character signifies the legal end of a value.
   
    pub fn value_end_char(ch: char) -> bool 
    {
        whitespace(ch) || end_delimiter(ch) || operator(ch)
    }
    /// Returns true if the character is either whitespace or '#' (start of a comment).   
    pub fn whitespace(ch: char) -> bool 
    {
        ch.is_whitespace() || ch == '#'
    }
   
    pub fn end_delimiter(ch: char) -> bool 
    {
        match ch {
            ')' | ']' | '}' | '>' => true,
            _ => false,
        }
    }
   
    pub fn numeric_char(ch: char) -> bool 
    {
        match ch {
            _ch if digit(_ch) => true,
            '.' | ',' => true,
            _ => false,
        }
    }
   
    pub fn priority_operator(ch: char) -> bool 
    {
        match ch {
            '*' | '/' | '%' => true,
            _ => false,
        }
    }
   
    pub fn operator(ch: char) -> bool 
    {
        match ch {
            '+' | '-' | '*' | '/' | '%' => true,
            _ => false,
        }
    }
    /// Returns true if `ch` is an ASCII decimal digit.
    //pub fn is_digit(ch: char) -> bool {
    pub fn digit(ch: char) -> bool 
    {
        match ch {
            '0'..='9' => true,
            _ => false,
        }
    }
   
    pub fn reserved(field: &str) -> bool 
    {
        match field {
            "@" | "null" | "true" | "false" | "Obj" | "Str" | "Arr" | "Tup" => true,
            _ => false,
        }
    }
    /// Whether the character has the Unicode property XID\_Start.
    /*
    pub fn is_xid_start( ... ) -> bool*/
    pub fn xid_start( ch:char ) -> bool
    {
        if ch.is_ascii() { return ::ascii::ASCII_START.0[ch as usize]; }
        let chunk = * ::ascii::TRIE_START.0.get(ch as usize / 8 / ::ascii::CHUNK).unwrap_or(&0);
        let offset = chunk as usize *  ::ascii::CHUNK / 2 + ch as usize / 8 %  ::ascii::CHUNK;
        unsafe {  ::ascii::LEAF.0.get_unchecked(offset) }.wrapping_shr(ch as u32 % 8) & 1 != 0
    }
    /// Whether the character has the Unicode property XID\_Continue.
    /*
    pub fn is_xid_continue(ch: char) -> bool */
    pub fn xid_continue(ch: char) -> bool
    {
        if ch.is_ascii() { return ::ascii::ASCII_CONTINUE.0[ch as usize]; }
        let chunk = *::ascii::TRIE_CONTINUE.0.get(ch as usize / 8 / ::ascii::CHUNK).unwrap_or(&0);
        let offset = chunk as usize * ::ascii::CHUNK / 2 + ch as usize / 8 % ::ascii::CHUNK;
        unsafe { ::ascii::LEAF.0.get_unchecked(offset) }.wrapping_shr(ch as u32 % 8) & 1 != 0
    }
    /*
    pub fn is_ident_start(c: char) -> bool*/
    pub fn ident_start(c: char) -> bool
    {
        c == '_' || xid_start(c)
    }
    /*
    pub fn is_ident_continue(c: char) -> bool */
    pub fn ident_continue(c: char) -> bool
    {
        xid_continue(c)
    }
}

pub mod isize
{
    pub use std::isize::{ * };
}

pub mod i128
{
    pub use std::i128::{ * };
}

pub mod io
{
    pub use std::io::{ * };
}

pub mod iter
{
    pub use std::iter::{ * };
}

pub mod marker
{
    pub use std::marker::{ * };
    use ::
    {
        rc::{ Rc },
        panic::{ RefUnwindSafe, UnwindSafe },
        *,
    };
    /*
    */
    pub const MARKER: ProcMacroAutoTraits = ProcMacroAutoTraits(PhantomData);
    /// Zero sized marker with the correct set of autotrait impls we want all proc macro types to have.
    #[derive(Copy, Clone, PartialEq, Eq)]
    pub struct ProcMacroAutoTraits( pub PhantomData<Rc<()>> );
    impl UnwindSafe for ProcMacroAutoTraits {}
    impl RefUnwindSafe for ProcMacroAutoTraits {}
}

pub mod num
{
    pub use std::num::{ * };
    use ::
    {
        *,
    };
    /*
    */
    pub mod traits
    {
        //! Numeric traits for generic mathematics
        use ::
        {
            num::{ Wrapping },
            ops::{ Add, Div, Mul, Rem, Sub, AddAssign, DivAssign, MulAssign, RemAssign, SubAssign },
            *,
        };
        /*
        */
        pub mod bounds
        {
            use ::
            {
                num::
                {
                    NonZeroI128, NonZeroI16, NonZeroI32, NonZeroI64, NonZeroI8, NonZeroIsize, NonZeroU128,
                    NonZeroU16, NonZeroU32, NonZeroU64, NonZeroU8, NonZeroUsize, Wrapping,
                },
                *,
            };
            /*
            */
            /// Numbers which have upper and lower bounds
            pub trait Bounded
            {
               
                /// Returns the smallest finite number this type can represent
                fn min_value() -> Self;
                /// Returns the largest finite number this type can represent
                fn max_value() -> Self;
            }
            /// Numbers which have lower bounds
            pub trait LowerBounded
            {
                /// Returns the smallest finite number this type can represent
                fn min_value() -> Self;
            }
           
            impl<T: Bounded> LowerBounded for T
            {
                fn min_value() -> T {
                    Bounded::min_value()
                }
            }
            /// Numbers which have upper bounds
            pub trait UpperBounded
            {
                /// Returns the largest finite number this type can represent
                fn max_value() -> Self;
            }
           
            impl<T: Bounded> UpperBounded for T
            {
                fn max_value() -> T {
                    Bounded::max_value()
                }
            }
            macro_rules! bounded_impl
            {
                ($t:ty, $min:expr, $max:expr) =>
                {
                    impl Bounded for $t {
                        #[inline]
                        fn min_value() -> $t {
                            $min
                        }
                        #[inline]
                        fn max_value() -> $t {
                            $max
                        }
                    }
                };
            }
            bounded_impl!(usize, usize::MIN, usize::MAX);
            bounded_impl!(u8, u8::MIN, u8::MAX);
            bounded_impl!(u16, u16::MIN, u16::MAX);
            bounded_impl!(u32, u32::MIN, u32::MAX);
            bounded_impl!(u64, u64::MIN, u64::MAX);
            bounded_impl!(u128, u128::MIN, u128::MAX);

            bounded_impl!(isize, isize::MIN, isize::MAX);
            bounded_impl!(i8, i8::MIN, i8::MAX);
            bounded_impl!(i16, i16::MIN, i16::MAX);
            bounded_impl!(i32, i32::MIN, i32::MAX);
            bounded_impl!(i64, i64::MIN, i64::MAX);
            bounded_impl!(i128, i128::MIN, i128::MAX);

            macro_rules! bounded_impl_nonzero_const 
            {
                ($t:ty, $v:expr, $i:ident) => {
                    const $i: $t = match <$t>::new($v) {
                        Some(nz) => nz,
                        None => panic!("bad nonzero bound!"),
                    };
                };
            }
            macro_rules! bounded_impl_nonzero 
            {
                ($t:ty, $min:expr, $max:expr) => {
                    impl Bounded for $t {
                        #[inline]
                        fn min_value() -> $t {
                           
                            bounded_impl_nonzero_const!($t, $min, MIN);
                            MIN
                        }
                        #[inline]
                        fn max_value() -> $t {
                           
                            bounded_impl_nonzero_const!($t, $max, MAX);
                            MAX
                        }
                    }
                };
            }
            bounded_impl_nonzero!(NonZeroUsize, 1, usize::MAX);
            bounded_impl_nonzero!(NonZeroU8, 1, u8::MAX);
            bounded_impl_nonzero!(NonZeroU16, 1, u16::MAX);
            bounded_impl_nonzero!(NonZeroU32, 1, u32::MAX);
            bounded_impl_nonzero!(NonZeroU64, 1, u64::MAX);
            bounded_impl_nonzero!(NonZeroU128, 1, u128::MAX);

            bounded_impl_nonzero!(NonZeroIsize, isize::MIN, isize::MAX);
            bounded_impl_nonzero!(NonZeroI8, i8::MIN, i8::MAX);
            bounded_impl_nonzero!(NonZeroI16, i16::MIN, i16::MAX);
            bounded_impl_nonzero!(NonZeroI32, i32::MIN, i32::MAX);
            bounded_impl_nonzero!(NonZeroI64, i64::MIN, i64::MAX);
            bounded_impl_nonzero!(NonZeroI128, i128::MIN, i128::MAX);

            impl<T: Bounded> Bounded for Wrapping<T> 
            {
                fn min_value() -> Self {
                    Wrapping(T::min_value())
                }
                fn max_value() -> Self {
                    Wrapping(T::max_value())
                }
            }
            bounded_impl!(f32, f32::MIN, f32::MAX);

            macro_rules! for_each_tuple_ 
            {
                ( $m:ident !! ) => (
                    $m! { }
                );
                ( $m:ident !! $h:ident, $($t:ident,)* ) => (
                    $m! { $h $($t)* }
                    for_each_tuple_! { $m !! $($t,)* }
                );
            }
            macro_rules! for_each_tuple 
            {
                ($m:ident) => {
                    for_each_tuple_! { $m !! A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, }
                };
            }
            macro_rules! bounded_tuple 
            {
                ( $($name:ident)* ) => (
                    impl<$($name: Bounded,)*> Bounded for ($($name,)*) {
                        #[inline]
                        fn min_value() -> Self {
                            ($($name::min_value(),)*)
                        }
                        #[inline]
                        fn max_value() -> Self {
                            ($($name::max_value(),)*)
                        }
                    }
                );
            }
            for_each_tuple!(bounded_tuple);
            bounded_impl!(f64, f64::MIN, f64::MAX);
        } pub use self::bounds::Bounded;

        pub mod cast
        {
            use ::
            {
                mem::{ size_of },
                num::
                {
                    NonZeroI128, NonZeroI16, NonZeroI32, NonZeroI64, NonZeroI8, NonZeroIsize, NonZeroU128,
                    NonZeroU16, NonZeroU32, NonZeroU64, NonZeroU8, NonZeroUsize, Wrapping,
                },
                *,
            };
            /*
            */
            /// A generic trait for converting a value to a number.
            pub trait ToPrimitive {
                /// Converts the value of `self` to an `isize`. If the value cannot be
                /// represented by an `isize`, then `None` is returned.
                #[inline] fn to_isize(&self) -> Option<isize> {
                    self.to_i64().as_ref().and_then(ToPrimitive::to_isize)
                }
                /// Converts the value of `self` to an `i8`. If the value cannot be
                /// represented by an `i8`, then `None` is returned.
                #[inline] fn to_i8(&self) -> Option<i8> {
                    self.to_i64().as_ref().and_then(ToPrimitive::to_i8)
                }
                /// Converts the value of `self` to an `i16`. If the value cannot be
                /// represented by an `i16`, then `None` is returned.
                #[inline] fn to_i16(&self) -> Option<i16> {
                    self.to_i64().as_ref().and_then(ToPrimitive::to_i16)
                }
                /// Converts the value of `self` to an `i32`. If the value cannot be
                /// represented by an `i32`, then `None` is returned.
                #[inline] fn to_i32(&self) -> Option<i32> {
                    self.to_i64().as_ref().and_then(ToPrimitive::to_i32)
                }
                /// Converts the value of `self` to an `i64`. If the value cannot be
                /// represented by an `i64`, then `None` is returned.
                fn to_i64(&self) -> Option<i64>;
                /// Converts the value of `self` to an `i128`. If the value cannot be
                /// represented by an `i128` (`i64` under the default implementation), then
                /// `None` is returned.
                #[inline] fn to_i128(&self) -> Option<i128> {
                    self.to_i64().map(From::from)
                }
                /// Converts the value of `self` to a `usize`. If the value cannot be
                /// represented by a `usize`, then `None` is returned.
                #[inline] fn to_usize(&self) -> Option<usize> {
                    self.to_u64().as_ref().and_then(ToPrimitive::to_usize)
                }
                /// Converts the value of `self` to a `u8`. If the value cannot be
                /// represented by a `u8`, then `None` is returned.
                #[inline] fn to_u8(&self) -> Option<u8> {
                    self.to_u64().as_ref().and_then(ToPrimitive::to_u8)
                }
                /// Converts the value of `self` to a `u16`. If the value cannot be
                /// represented by a `u16`, then `None` is returned.
                #[inline] fn to_u16(&self) -> Option<u16> {
                    self.to_u64().as_ref().and_then(ToPrimitive::to_u16)
                }
                /// Converts the value of `self` to a `u32`. If the value cannot be
                /// represented by a `u32`, then `None` is returned.
                #[inline] fn to_u32(&self) -> Option<u32> {
                    self.to_u64().as_ref().and_then(ToPrimitive::to_u32)
                }
                /// Converts the value of `self` to a `u64`. If the value cannot be
                /// represented by a `u64`, then `None` is returned.
                fn to_u64(&self) -> Option<u64>;
                /// Converts the value of `self` to a `u128`. If the value cannot be
                /// represented by a `u128` (`u64` under the default implementation), then
                /// `None` is returned.
                #[inline] fn to_u128(&self) -> Option<u128> {
                    self.to_u64().map(From::from)
                }
                /// Converts the value of `self` to an `f32`. Overflows may map to positive
                /// or negative inifinity, otherwise `None` is returned if the value cannot
                /// be represented by an `f32`.
                #[inline] fn to_f32(&self) -> Option<f32> {
                    self.to_f64().as_ref().and_then(ToPrimitive::to_f32)
                }
                /// Converts the value of `self` to an `f64`. Overflows may map to positive
                /// or negative inifinity, otherwise `None` is returned if the value cannot
                /// be represented by an `f64`.
                /// override this method if they can represent a greater range.
                #[inline] fn to_f64(&self) -> Option<f64> {
                    match self.to_i64() {
                        Some(i) => i.to_f64(),
                        None => self.to_u64().as_ref().and_then(ToPrimitive::to_f64),
                    }
                }
            }
            macro_rules! impl_to_primitive_int_to_int 
            {
                ($SrcT:ident : $( fn $method:ident -> $DstT:ident ; )*) => {$(
                    #[inline] fn $method(&self) -> Option<$DstT> {
                        let min = $DstT::MIN as $SrcT;
                        let max = $DstT::MAX as $SrcT;
                        if size_of::<$SrcT>() <= size_of::<$DstT>() || (min <= *self && *self <= max) {
                            Some(*self as $DstT)
                        } else {
                            None
                        }
                    }
                )*}
            }
            macro_rules! impl_to_primitive_int_to_uint 
            {
                ($SrcT:ident : $( fn $method:ident -> $DstT:ident ; )*) => {$(
                    #[inline] fn $method(&self) -> Option<$DstT> {
                        let max = $DstT::MAX as $SrcT;
                        if 0 <= *self && (size_of::<$SrcT>() <= size_of::<$DstT>() || *self <= max) {
                            Some(*self as $DstT)
                        } else {
                            None
                        }
                    }
                )*}
            }
            macro_rules! impl_to_primitive_int 
            {
                ($T:ident) => {
                    impl ToPrimitive for $T {
                        impl_to_primitive_int_to_int! { $T:
                            fn to_isize -> isize;
                            fn to_i8 -> i8;
                            fn to_i16 -> i16;
                            fn to_i32 -> i32;
                            fn to_i64 -> i64;
                            fn to_i128 -> i128;
                        }
                        impl_to_primitive_int_to_uint! { $T:
                            fn to_usize -> usize;
                            fn to_u8 -> u8;
                            fn to_u16 -> u16;
                            fn to_u32 -> u32;
                            fn to_u64 -> u64;
                            fn to_u128 -> u128;
                        }
                        #[inline]
                        fn to_f32(&self) -> Option<f32> {
                            Some(*self as f32)
                        }
                        #[inline]
                        fn to_f64(&self) -> Option<f64> {
                            Some(*self as f64)
                        }
                    }
                };
            }
            impl_to_primitive_int!(isize);
            impl_to_primitive_int!(i8);
            impl_to_primitive_int!(i16);
            impl_to_primitive_int!(i32);
            impl_to_primitive_int!(i64);
            impl_to_primitive_int!(i128);

            macro_rules! impl_to_primitive_uint_to_int 
            {
                ($SrcT:ident : $( fn $method:ident -> $DstT:ident ; )*) => {$(
                    #[inline] fn $method(&self) -> Option<$DstT> {
                        let max = $DstT::MAX as $SrcT;
                        if size_of::<$SrcT>() < size_of::<$DstT>() || *self <= max {
                            Some(*self as $DstT)
                        } else {
                            None
                        }
                    }
                )*}
            }
            macro_rules! impl_to_primitive_uint_to_uint 
            {
                ($SrcT:ident : $( fn $method:ident -> $DstT:ident ; )*) => {$(
                    #[inline] fn $method(&self) -> Option<$DstT> {
                        let max = $DstT::MAX as $SrcT;
                        if size_of::<$SrcT>() <= size_of::<$DstT>() || *self <= max {
                            Some(*self as $DstT)
                        } else {
                            None
                        }
                    }
                )*}
            }
            macro_rules! impl_to_primitive_uint 
            {
                ($T:ident) => {
                    impl ToPrimitive for $T {
                        impl_to_primitive_uint_to_int! { $T:
                            fn to_isize -> isize;
                            fn to_i8 -> i8;
                            fn to_i16 -> i16;
                            fn to_i32 -> i32;
                            fn to_i64 -> i64;
                            fn to_i128 -> i128;
                        }
                        impl_to_primitive_uint_to_uint! { $T:
                            fn to_usize -> usize;
                            fn to_u8 -> u8;
                            fn to_u16 -> u16;
                            fn to_u32 -> u32;
                            fn to_u64 -> u64;
                            fn to_u128 -> u128;
                        }
                        #[inline]
                        fn to_f32(&self) -> Option<f32> {
                            Some(*self as f32)
                        }
                        #[inline]
                        fn to_f64(&self) -> Option<f64> {
                            Some(*self as f64)
                        }
                    }
                };
            }
            impl_to_primitive_uint!(usize);
            impl_to_primitive_uint!(u8);
            impl_to_primitive_uint!(u16);
            impl_to_primitive_uint!(u32);
            impl_to_primitive_uint!(u64);
            impl_to_primitive_uint!(u128);

            macro_rules! impl_to_primitive_nonzero_to_method 
            {
                ($SrcT:ident : $( fn $method:ident -> $DstT:ident ; )*) => {$(
                    #[inline] fn $method(&self) -> Option<$DstT> {
                        self.get().$method()
                    }
                )*}
            }
            macro_rules! impl_to_primitive_nonzero 
            {
                ($T:ident) => {
                    impl ToPrimitive for $T {
                        impl_to_primitive_nonzero_to_method! { $T:
                            fn to_isize -> isize;
                            fn to_i8 -> i8;
                            fn to_i16 -> i16;
                            fn to_i32 -> i32;
                            fn to_i64 -> i64;
                            fn to_i128 -> i128;

                            fn to_usize -> usize;
                            fn to_u8 -> u8;
                            fn to_u16 -> u16;
                            fn to_u32 -> u32;
                            fn to_u64 -> u64;
                            fn to_u128 -> u128;

                            fn to_f32 -> f32;
                            fn to_f64 -> f64;
                        }
                    }
                };
            }
            impl_to_primitive_nonzero!(NonZeroUsize);
            impl_to_primitive_nonzero!(NonZeroU8);
            impl_to_primitive_nonzero!(NonZeroU16);
            impl_to_primitive_nonzero!(NonZeroU32);
            impl_to_primitive_nonzero!(NonZeroU64);
            impl_to_primitive_nonzero!(NonZeroU128);

            impl_to_primitive_nonzero!(NonZeroIsize);
            impl_to_primitive_nonzero!(NonZeroI8);
            impl_to_primitive_nonzero!(NonZeroI16);
            impl_to_primitive_nonzero!(NonZeroI32);
            impl_to_primitive_nonzero!(NonZeroI64);
            impl_to_primitive_nonzero!(NonZeroI128);

            macro_rules! impl_to_primitive_float_to_float 
            {
                ($SrcT:ident : $( fn $method:ident -> $DstT:ident ; )*) => {$(
                    #[inline] fn $method(&self) -> Option<$DstT> {
                       
                       
                        Some(*self as $DstT)
                    }
                )*}
            }
            macro_rules! float_to_int_unchecked 
            {
               
               
                ($float:expr => $int:ty) => {
                    unsafe { $float.to_int_unchecked::<$int>() }
                };
            }
            macro_rules! impl_to_primitive_float_to_signed_int 
            {
                ($f:ident : $( fn $method:ident -> $i:ident ; )*) => {$(
                    #[inline] fn $method(&self) -> Option<$i> {
                       
                       
                        if size_of::<$f>() > size_of::<$i>() {
                           
                            const MIN_M1: $f = $i::MIN as $f - 1.0;
                            const MAX_P1: $f = $i::MAX as $f + 1.0;
                            if *self > MIN_M1 && *self < MAX_P1 {
                                return Some(float_to_int_unchecked!(*self => $i));
                            }
                        } else {
                           
                           
                            const MIN: $f = $i::MIN as $f;
                           
                           
                            const MAX_P1: $f = $i::MAX as $f;
                            if *self >= MIN && *self < MAX_P1 {
                                return Some(float_to_int_unchecked!(*self => $i));
                            }
                        }
                        None
                    }
                )*}
            }
            macro_rules! impl_to_primitive_float_to_unsigned_int 
            {
                ($f:ident : $( fn $method:ident -> $u:ident ; )*) => {$(
                    #[inline] fn $method(&self) -> Option<$u> {
                       
                       
                        if size_of::<$f>() > size_of::<$u>() {
                           
                            const MAX_P1: $f = $u::MAX as $f + 1.0;
                            if *self > -1.0 && *self < MAX_P1 {
                                return Some(float_to_int_unchecked!(*self => $u));
                            }
                        } else {
                           
                           
                           
                            const MAX_P1: $f = $u::MAX as $f;
                            if *self > -1.0 && *self < MAX_P1 {
                                return Some(float_to_int_unchecked!(*self => $u));
                            }
                        }
                        None
                    }
                )*}
            }
            macro_rules! impl_to_primitive_float 
            {
                ($T:ident) => {
                    impl ToPrimitive for $T {
                        impl_to_primitive_float_to_signed_int! { $T:
                            fn to_isize -> isize;
                            fn to_i8 -> i8;
                            fn to_i16 -> i16;
                            fn to_i32 -> i32;
                            fn to_i64 -> i64;
                            fn to_i128 -> i128;
                        }
                        impl_to_primitive_float_to_unsigned_int! { $T:
                            fn to_usize -> usize;
                            fn to_u8 -> u8;
                            fn to_u16 -> u16;
                            fn to_u32 -> u32;
                            fn to_u64 -> u64;
                            fn to_u128 -> u128;
                        }
                        impl_to_primitive_float_to_float! { $T:
                            fn to_f32 -> f32;
                            fn to_f64 -> f64;
                        }
                    }
                };
            }
            impl_to_primitive_float!(f32);
            impl_to_primitive_float!(f64);
            /// A generic trait for converting a number to a value.
            pub trait FromPrimitive: Sized
            {
                /// Converts an `isize` to return an optional value of this type. If the
                /// value cannot be represented by this type, then `None` is returned.
                #[inline] fn from_isize(n: isize) -> Option<Self> {
                    n.to_i64().and_then(FromPrimitive::from_i64)
                }
                /// Converts an `i8` to return an optional value of this type. If the
                /// value cannot be represented by this type, then `None` is returned.
                #[inline] fn from_i8(n: i8) -> Option<Self> {
                    FromPrimitive::from_i64(From::from(n))
                }
                /// Converts an `i16` to return an optional value of this type. If the
                /// value cannot be represented by this type, then `None` is returned.
                #[inline] fn from_i16(n: i16) -> Option<Self> {
                    FromPrimitive::from_i64(From::from(n))
                }
                /// Converts an `i32` to return an optional value of this type. If the
                /// value cannot be represented by this type, then `None` is returned.
                #[inline] fn from_i32(n: i32) -> Option<Self> {
                    FromPrimitive::from_i64(From::from(n))
                }
                /// Converts an `i64` to return an optional value of this type. If the
                /// value cannot be represented by this type, then `None` is returned.
                fn from_i64(n: i64) -> Option<Self>;
                /// Converts an `i128` to return an optional value of this type. If the
                /// value cannot be represented by this type, then `None` is returned.
                #[inline] fn from_i128(n: i128) -> Option<Self> {
                    n.to_i64().and_then(FromPrimitive::from_i64)
                }
                /// Converts a `usize` to return an optional value of this type. If the
                /// value cannot be represented by this type, then `None` is returned.
                #[inline] fn from_usize(n: usize) -> Option<Self> {
                    n.to_u64().and_then(FromPrimitive::from_u64)
                }
                /// Converts an `u8` to return an optional value of this type. If the
                /// value cannot be represented by this type, then `None` is returned.
                #[inline] fn from_u8(n: u8) -> Option<Self> {
                    FromPrimitive::from_u64(From::from(n))
                }
                /// Converts an `u16` to return an optional value of this type. If the
                /// value cannot be represented by this type, then `None` is returned.
                #[inline] fn from_u16(n: u16) -> Option<Self> {
                    FromPrimitive::from_u64(From::from(n))
                }
                /// Converts an `u32` to return an optional value of this type. If the
                /// value cannot be represented by this type, then `None` is returned.
                #[inline] fn from_u32(n: u32) -> Option<Self> {
                    FromPrimitive::from_u64(From::from(n))
                }
                /// Converts an `u64` to return an optional value of this type. If the
                /// value cannot be represented by this type, then `None` is returned.
                fn from_u64(n: u64) -> Option<Self>;
                /// Converts an `u128` to return an optional value of this type. If the
                /// value cannot be represented by this type, then `None` is returned.
                #[inline] fn from_u128(n: u128) -> Option<Self> {
                    n.to_u64().and_then(FromPrimitive::from_u64)
                }
                /// Converts a `f32` to return an optional value of this type. If the
                /// value cannot be represented by this type, then `None` is returned.
                #[inline] fn from_f32(n: f32) -> Option<Self> {
                    FromPrimitive::from_f64(From::from(n))
                }
                /// Converts a `f64` to return an optional value of this type. If the
                /// value cannot be represented by this type, then `None` is returned.
                /// override this method if they can represent a greater range.
                #[inline] fn from_f64(n: f64) -> Option<Self> {
                    match n.to_i64() {
                        Some(i) => FromPrimitive::from_i64(i),
                        None => n.to_u64().and_then(FromPrimitive::from_u64),
                    }
                }
            }
            macro_rules! impl_from_primitive
            {
                ($T:ty, $to_ty:ident) => {
                    impl FromPrimitive for $T {
                        #[inline]
                        fn from_isize(n: isize) -> Option<$T> {
                            n.$to_ty()
                        }
                        #[inline]
                        fn from_i8(n: i8) -> Option<$T> {
                            n.$to_ty()
                        }
                        #[inline]
                        fn from_i16(n: i16) -> Option<$T> {
                            n.$to_ty()
                        }
                        #[inline]
                        fn from_i32(n: i32) -> Option<$T> {
                            n.$to_ty()
                        }
                        #[inline]
                        fn from_i64(n: i64) -> Option<$T> {
                            n.$to_ty()
                        }
                        #[inline]
                        fn from_i128(n: i128) -> Option<$T> {
                            n.$to_ty()
                        }
                        #[inline]
                        fn from_usize(n: usize) -> Option<$T> {
                            n.$to_ty()
                        }
                        #[inline]
                        fn from_u8(n: u8) -> Option<$T> {
                            n.$to_ty()
                        }
                        #[inline]
                        fn from_u16(n: u16) -> Option<$T> {
                            n.$to_ty()
                        }
                        #[inline]
                        fn from_u32(n: u32) -> Option<$T> {
                            n.$to_ty()
                        }
                        #[inline]
                        fn from_u64(n: u64) -> Option<$T> {
                            n.$to_ty()
                        }
                        #[inline]
                        fn from_u128(n: u128) -> Option<$T> {
                            n.$to_ty()
                        }
                        #[inline]
                        fn from_f32(n: f32) -> Option<$T> {
                            n.$to_ty()
                        }
                        #[inline]
                        fn from_f64(n: f64) -> Option<$T> {
                            n.$to_ty()
                        }
                    }
                };
            }
            impl_from_primitive!(isize, to_isize);
            impl_from_primitive!(i8, to_i8);
            impl_from_primitive!(i16, to_i16);
            impl_from_primitive!(i32, to_i32);
            impl_from_primitive!(i64, to_i64);
            impl_from_primitive!(i128, to_i128);
            impl_from_primitive!(usize, to_usize);
            impl_from_primitive!(u8, to_u8);
            impl_from_primitive!(u16, to_u16);
            impl_from_primitive!(u32, to_u32);
            impl_from_primitive!(u64, to_u64);
            impl_from_primitive!(u128, to_u128);
            impl_from_primitive!(f32, to_f32);
            impl_from_primitive!(f64, to_f64);

            macro_rules! impl_from_primitive_nonzero
            {
                ($T:ty, $to_ty:ident) => {
                    impl FromPrimitive for $T {
                        #[inline]
                        fn from_isize(n: isize) -> Option<$T> {
                            n.$to_ty().and_then(Self::new)
                        }
                        #[inline]
                        fn from_i8(n: i8) -> Option<$T> {
                            n.$to_ty().and_then(Self::new)
                        }
                        #[inline]
                        fn from_i16(n: i16) -> Option<$T> {
                            n.$to_ty().and_then(Self::new)
                        }
                        #[inline]
                        fn from_i32(n: i32) -> Option<$T> {
                            n.$to_ty().and_then(Self::new)
                        }
                        #[inline]
                        fn from_i64(n: i64) -> Option<$T> {
                            n.$to_ty().and_then(Self::new)
                        }
                        #[inline]
                        fn from_i128(n: i128) -> Option<$T> {
                            n.$to_ty().and_then(Self::new)
                        }
                        #[inline]
                        fn from_usize(n: usize) -> Option<$T> {
                            n.$to_ty().and_then(Self::new)
                        }
                        #[inline]
                        fn from_u8(n: u8) -> Option<$T> {
                            n.$to_ty().and_then(Self::new)
                        }
                        #[inline]
                        fn from_u16(n: u16) -> Option<$T> {
                            n.$to_ty().and_then(Self::new)
                        }
                        #[inline]
                        fn from_u32(n: u32) -> Option<$T> {
                            n.$to_ty().and_then(Self::new)
                        }
                        #[inline]
                        fn from_u64(n: u64) -> Option<$T> {
                            n.$to_ty().and_then(Self::new)
                        }
                        #[inline]
                        fn from_u128(n: u128) -> Option<$T> {
                            n.$to_ty().and_then(Self::new)
                        }
                        #[inline]
                        fn from_f32(n: f32) -> Option<$T> {
                            n.$to_ty().and_then(Self::new)
                        }
                        #[inline]
                        fn from_f64(n: f64) -> Option<$T> {
                            n.$to_ty().and_then(Self::new)
                        }
                    }
                };
            }
            impl_from_primitive_nonzero!(NonZeroIsize, to_isize);
            impl_from_primitive_nonzero!(NonZeroI8, to_i8);
            impl_from_primitive_nonzero!(NonZeroI16, to_i16);
            impl_from_primitive_nonzero!(NonZeroI32, to_i32);
            impl_from_primitive_nonzero!(NonZeroI64, to_i64);
            impl_from_primitive_nonzero!(NonZeroI128, to_i128);
            impl_from_primitive_nonzero!(NonZeroUsize, to_usize);
            impl_from_primitive_nonzero!(NonZeroU8, to_u8);
            impl_from_primitive_nonzero!(NonZeroU16, to_u16);
            impl_from_primitive_nonzero!(NonZeroU32, to_u32);
            impl_from_primitive_nonzero!(NonZeroU64, to_u64);
            impl_from_primitive_nonzero!(NonZeroU128, to_u128);

            macro_rules! impl_to_primitive_wrapping 
            {
                ($( fn $method:ident -> $i:ident ; )*) => {$(
                    #[inline] fn $method(&self) -> Option<$i> {
                        (self.0).$method()
                    }
                )*}
            }
            
            impl<T: ToPrimitive> ToPrimitive for Wrapping<T> 
            {
                impl_to_primitive_wrapping! {
                    fn to_isize -> isize;
                    fn to_i8 -> i8;
                    fn to_i16 -> i16;
                    fn to_i32 -> i32;
                    fn to_i64 -> i64;
                    fn to_i128 -> i128;

                    fn to_usize -> usize;
                    fn to_u8 -> u8;
                    fn to_u16 -> u16;
                    fn to_u32 -> u32;
                    fn to_u64 -> u64;
                    fn to_u128 -> u128;

                    fn to_f32 -> f32;
                    fn to_f64 -> f64;
                }
            }
            macro_rules! impl_from_primitive_wrapping 
            {
                ($( fn $method:ident ( $i:ident ); )*) => {$(
                    #[inline] fn $method(n: $i) -> Option<Self> {
                        T::$method(n).map(Wrapping)
                    }
                )*}
            }
            
            impl<T: FromPrimitive> FromPrimitive for Wrapping<T> 
            {
                impl_from_primitive_wrapping! {
                    fn from_isize(isize);
                    fn from_i8(i8);
                    fn from_i16(i16);
                    fn from_i32(i32);
                    fn from_i64(i64);
                    fn from_i128(i128);

                    fn from_usize(usize);
                    fn from_u8(u8);
                    fn from_u16(u16);
                    fn from_u32(u32);
                    fn from_u64(u64);
                    fn from_u128(u128);

                    fn from_f32(f32);
                    fn from_f64(f64);
                }
            }
            /// Cast from one machine scalar to another.
            #[inline] pub fn cast<T: NumCast, U: NumCast>(n: T) -> Option<U>
            {
                NumCast::from(n)
            }
            /// An interface for casting between machine scalars.
            pub trait NumCast: Sized + ToPrimitive
            {
                /// Creates a number from another value that can be converted into
                /// a primitive via the `ToPrimitive` trait. If the source value cannot be
                /// represented by the target type, then `None` is returned.
                fn from<T: ToPrimitive>(n: T) -> Option<Self>;
            }
            macro_rules! impl_num_cast
            {
                ($T:ty, $conv:ident) => {
                    impl NumCast for $T {
                        #[inline]
                        fn from<N: ToPrimitive>(n: N) -> Option<$T> {
                            n.$conv()
                        }
                    }
                };
            }
            impl_num_cast!(u8, to_u8);
            impl_num_cast!(u16, to_u16);
            impl_num_cast!(u32, to_u32);
            impl_num_cast!(u64, to_u64);
            impl_num_cast!(u128, to_u128);
            impl_num_cast!(usize, to_usize);
            impl_num_cast!(i8, to_i8);
            impl_num_cast!(i16, to_i16);
            impl_num_cast!(i32, to_i32);
            impl_num_cast!(i64, to_i64);
            impl_num_cast!(i128, to_i128);
            impl_num_cast!(isize, to_isize);
            impl_num_cast!(f32, to_f32);
            impl_num_cast!(f64, to_f64);

            macro_rules! impl_num_cast_nonzero {
                ($T:ty, $conv:ident) => {
                    impl NumCast for $T {
                        #[inline]
                        fn from<N: ToPrimitive>(n: N) -> Option<$T> {
                            n.$conv().and_then(Self::new)
                        }
                    }
                };
            }
            impl_num_cast_nonzero!(NonZeroUsize, to_usize);
            impl_num_cast_nonzero!(NonZeroU8, to_u8);
            impl_num_cast_nonzero!(NonZeroU16, to_u16);
            impl_num_cast_nonzero!(NonZeroU32, to_u32);
            impl_num_cast_nonzero!(NonZeroU64, to_u64);
            impl_num_cast_nonzero!(NonZeroU128, to_u128);

            impl_num_cast_nonzero!(NonZeroIsize, to_isize);
            impl_num_cast_nonzero!(NonZeroI8, to_i8);
            impl_num_cast_nonzero!(NonZeroI16, to_i16);
            impl_num_cast_nonzero!(NonZeroI32, to_i32);
            impl_num_cast_nonzero!(NonZeroI64, to_i64);
            impl_num_cast_nonzero!(NonZeroI128, to_i128);

            impl<T: NumCast> NumCast for Wrapping<T>
            {
                fn from<U: ToPrimitive>(n: U) -> Option<Self> {
                    T::from(n).map(Wrapping)
                }
            }
            /// Generic interface for casting between machine scalars with the `as` operator, 
            /// which admits narrowing and precision loss.
            pub trait AsPrimitive<T>: 'static + Copy where
            T: 'static + Copy,
            {
                /// Convert a value to another, using the `as` operator.
                fn as_(self) -> T;
            }
            macro_rules! impl_as_primitive
            {
                (@ $T: ty =>  impl $U: ty ) => {
                    impl AsPrimitive<$U> for $T {
                        #[inline] fn as_(self) -> $U { self as $U }
                    }
                };
                (@ $T: ty => { $( $U: ty ),* } ) => {$(
                    impl_as_primitive!(@ $T => impl $U);
                )*};
                ($T: ty => { $( $U: ty ),* } ) => {
                    impl_as_primitive!(@ $T => { $( $U ),* });
                    impl_as_primitive!(@ $T => { u8, u16, u32, u64, u128, usize });
                    impl_as_primitive!(@ $T => { i8, i16, i32, i64, i128, isize });
                };
            }
            impl_as_primitive!(u8 => { char, f32, f64 });
            impl_as_primitive!(i8 => { f32, f64 });
            impl_as_primitive!(u16 => { f32, f64 });
            impl_as_primitive!(i16 => { f32, f64 });
            impl_as_primitive!(u32 => { f32, f64 });
            impl_as_primitive!(i32 => { f32, f64 });
            impl_as_primitive!(u64 => { f32, f64 });
            impl_as_primitive!(i64 => { f32, f64 });
            impl_as_primitive!(u128 => { f32, f64 });
            impl_as_primitive!(i128 => { f32, f64 });
            impl_as_primitive!(usize => { f32, f64 });
            impl_as_primitive!(isize => { f32, f64 });
            impl_as_primitive!(f32 => { f32, f64 });
            impl_as_primitive!(f64 => { f32, f64 });
            impl_as_primitive!(char => { char });
            impl_as_primitive!(bool => {});

        } pub use self::cast::{cast, AsPrimitive, FromPrimitive, NumCast, ToPrimitive};

        pub mod float
        {
            use ::
            {
                cmp::{ Ordering },
                num::
                {
                    traits::{ Num, NumCast, ToPrimitive },
                    FpCategory
                },
                ops::{ Add, Div, Neg },
                *,
            };
            /*
            */
            /// Generic trait for floating point numbers that works with `no_std`.
            pub trait FloatCore: Num + NumCast + Neg<Output = Self> + PartialOrd + Copy
            {
                /// Returns positive infinity.
                fn infinity() -> Self;
                /// Returns negative infinity.
                fn neg_infinity() -> Self;
                /// Returns NaN.
                fn nan() -> Self;
                /// Returns `-0.0`.
                fn neg_zero() -> Self;
                /// Returns the smallest finite value that this type can represent.
                fn min_value() -> Self;
                /// Returns the smallest positive, normalized value that this type can represent.
                fn min_positive_value() -> Self;
                /// Returns epsilon, a small positive value.
                fn epsilon() -> Self;
                /// Returns the largest finite value that this type can represent.
                fn max_value() -> Self;
                /// Returns `true` if the number is NaN.
                #[inline] fn is_nan(self) -> bool {
                    self != self
                }
                /// Returns `true` if the number is infinite.
                #[inline] fn is_infinite(self) -> bool {
                    self == Self::infinity() || self == Self::neg_infinity()
                }
                /// Returns `true` if the number is neither infinite or NaN.
                #[inline] fn is_finite(self) -> bool {
                    !(self.is_nan() || self.is_infinite())
                }
                /// Returns `true` if the number is neither zero, infinite, subnormal or NaN.
                #[inline] fn is_normal(self) -> bool {
                    self.classify() == FpCategory::Normal
                }
                /// Returns `true` if the number is [subnormal].
                #[inline] fn is_subnormal(self) -> bool {
                    self.classify() == FpCategory::Subnormal
                }
                /// Returns the floating point category of the number.
                fn classify(self) -> FpCategory;
                /// Returns the largest integer less than or equal to a number.
                #[inline] fn floor(self) -> Self {
                    let f = self.fract();
                    if f.is_nan() || f.is_zero() {
                        self
                    } else if self < Self::zero() {
                        self - f - Self::one()
                    } else {
                        self - f
                    }
                }
                /// Returns the smallest integer greater than or equal to a number.
                #[inline] fn ceil(self) -> Self {
                    let f = self.fract();
                    if f.is_nan() || f.is_zero() {
                        self
                    } else if self > Self::zero() {
                        self - f + Self::one()
                    } else {
                        self - f
                    }
                }
                /// Returns the nearest integer to a number. Round half-way cases away from `0.0`.
                #[inline] fn round(self) -> Self {
                    let one = Self::one();
                    let h = Self::from(0.5).expect("Unable to cast from 0.5");
                    let f = self.fract();
                    if f.is_nan() || f.is_zero() {
                        self
                    } else if self > Self::zero() {
                        if f < h {
                            self - f
                        } else {
                            self - f + one
                        }
                    } else if -f < h {
                        self - f
                    } else {
                        self - f - one
                    }
                }
                /// Return the integer part of a number.
                #[inline] fn trunc(self) -> Self {
                    let f = self.fract();
                    if f.is_nan() {
                        self
                    } else {
                        self - f
                    }
                }
                /// Returns the fractional part of a number.
                #[inline] fn fract(self) -> Self {
                    if self.is_zero() {
                        Self::zero()
                    } else {
                        self % Self::one()
                    }
                }
                /// Computes the absolute value of `self`. Returns `Float::nan()` if the number is `Float::nan()`.
                #[inline] fn abs(self) -> Self {
                    if self.is_sign_positive() {
                        return self;
                    }
                    if self.is_sign_negative() {
                        return -self;
                    }
                    Self::nan()
                }
                /// Returns a number that represents the sign of `self`.
                #[inline] fn signum(self) -> Self {
                    if self.is_nan() {
                        Self::nan()
                    } else if self.is_sign_negative() {
                        -Self::one()
                    } else {
                        Self::one()
                    }
                }
                /// Returns `true` if `self` is positive, including `+0.0`, `Float::infinity()`, and `Float::nan()`.
                #[inline] fn is_sign_positive(self) -> bool {
                    !self.is_sign_negative()
                }
                /// Returns `true` if `self` is negative, including `-0.0`, `Float::neg_infinity()`, and `-Float::nan()`.
                #[inline] fn is_sign_negative(self) -> bool {
                    let (_, _, sign) = self.integer_decode();
                    sign < 0
                }
                /// Returns the minimum of the two numbers.
                #[inline] fn min(self, other: Self) -> Self {
                    if self.is_nan() {
                        return other;
                    }
                    if other.is_nan() {
                        return self;
                    }
                    if self < other {
                        self
                    } else {
                        other
                    }
                }
                /// Returns the maximum of the two numbers.
                #[inline] fn max(self, other: Self) -> Self {
                    if self.is_nan() {
                        return other;
                    }
                    if other.is_nan() {
                        return self;
                    }
                    if self > other {
                        self
                    } else {
                        other
                    }
                }
                /// A value bounded by a minimum and a maximum.
                fn clamp(self, min: Self, max: Self) -> Self {
                    ::num::traits::clamp(self, min, max)
                }
                /// Returns the reciprocal (multiplicative inverse) of the number.
                #[inline] fn recip(self) -> Self {
                    Self::one() / self
                }
                /// Raise a number to an integer power.
                #[inline] fn powi(mut self, mut exp: i32) -> Self {
                    if exp < 0 {
                        exp = exp.wrapping_neg();
                        self = self.recip();
                    }
                   
                   
                   
                    super::pow(self, (exp as u32).to_usize().unwrap())
                }
                /// Converts to degrees, assuming the number is in radians.
                fn to_degrees(self) -> Self;
                /// Converts to radians, assuming the number is in degrees.
                fn to_radians(self) -> Self;
                /// Returns the mantissa, base 2 exponent, and sign as integers, respectively.
                fn integer_decode(self) -> (u64, i16, i8);
            }
            impl FloatCore for f32
            {
                constant!
                {
                    infinity() -> f32::INFINITY;
                    neg_infinity() -> f32::NEG_INFINITY;
                    nan() -> f32::NAN;
                    neg_zero() -> -0.0;
                    min_value() -> f32::MIN;
                    min_positive_value() -> f32::MIN_POSITIVE;
                    epsilon() -> f32::EPSILON;
                    max_value() -> f32::MAX;
                }
                #[inline] fn integer_decode(self) -> (u64, i16, i8)
                {
                    integer_decode_f32(self)
                }
                forward!
                {
                    Self::is_nan(self) -> bool;
                    Self::is_infinite(self) -> bool;
                    Self::is_finite(self) -> bool;
                    Self::is_normal(self) -> bool;
                    Self::is_subnormal(self) -> bool;
                    Self::clamp(self, min: Self, max: Self) -> Self;
                    Self::classify(self) -> FpCategory;
                    Self::is_sign_positive(self) -> bool;
                    Self::is_sign_negative(self) -> bool;
                    Self::min(self, other: Self) -> Self;
                    Self::max(self, other: Self) -> Self;
                    Self::recip(self) -> Self;
                    Self::to_degrees(self) -> Self;
                    Self::to_radians(self) -> Self;
                }
                
                forward!
                {
                    Self::floor(self) -> Self;
                    Self::ceil(self) -> Self;
                    Self::round(self) -> Self;
                    Self::trunc(self) -> Self;
                    Self::fract(self) -> Self;
                    Self::abs(self) -> Self;
                    Self::signum(self) -> Self;
                    Self::powi(self, n: i32) -> Self;
                }
            }
            impl FloatCore for f64
            {
                constant!
                {
                    infinity() -> f64::INFINITY;
                    neg_infinity() -> f64::NEG_INFINITY;
                    nan() -> f64::NAN;
                    neg_zero() -> -0.0;
                    min_value() -> f64::MIN;
                    min_positive_value() -> f64::MIN_POSITIVE;
                    epsilon() -> f64::EPSILON;
                    max_value() -> f64::MAX;
                }
                #[inline] fn integer_decode(self) -> (u64, i16, i8)
                {
                    integer_decode_f64(self)
                }
                forward!
                {
                    Self::is_nan(self) -> bool;
                    Self::is_infinite(self) -> bool;
                    Self::is_finite(self) -> bool;
                    Self::is_normal(self) -> bool;
                    Self::is_subnormal(self) -> bool;
                    Self::clamp(self, min: Self, max: Self) -> Self;
                    Self::classify(self) -> FpCategory;
                    Self::is_sign_positive(self) -> bool;
                    Self::is_sign_negative(self) -> bool;
                    Self::min(self, other: Self) -> Self;
                    Self::max(self, other: Self) -> Self;
                    Self::recip(self) -> Self;
                    Self::to_degrees(self) -> Self;
                    Self::to_radians(self) -> Self;
                }
                
                forward!
                {
                    Self::floor(self) -> Self;
                    Self::ceil(self) -> Self;
                    Self::round(self) -> Self;
                    Self::trunc(self) -> Self;
                    Self::fract(self) -> Self;
                    Self::abs(self) -> Self;
                    Self::signum(self) -> Self;
                    Self::powi(self, n: i32) -> Self;
                }
            }
            /// Generic trait for floating point numbers
            pub trait Float: Num + Copy + NumCast + PartialOrd + Neg<Output = Self>
            {
                /// Returns the `NaN` value.
                fn nan() -> Self;
                /// Returns the infinite value.
                fn infinity() -> Self;
                /// Returns the negative infinite value.
                fn neg_infinity() -> Self;
                /// Returns `-0.0`.
                fn neg_zero() -> Self;
                /// Returns the smallest finite value that this type can represent.
                fn min_value() -> Self;
                /// Returns the smallest positive, normalized value that this type can represent.
                fn min_positive_value() -> Self;
                /// Returns epsilon, a small positive value.
                fn epsilon() -> Self {
                    Self::from(f32::EPSILON).expect("Unable to cast from f32::EPSILON")
                }
                /// Returns the largest finite value that this type can represent.
                fn max_value() -> Self;
                /// Returns `true` if this value is `NaN` and false otherwise.
                fn is_nan(self) -> bool;
                /// Returns `true` if this value is positive infinity or negative infinity and false otherwise.
                fn is_infinite(self) -> bool;
                /// Returns `true` if this number is neither infinite nor `NaN`.
                fn is_finite(self) -> bool;
                /// Returns `true` if the number is neither zero, infinite, subnormal, or `NaN`.
                fn is_normal(self) -> bool;
                /// Returns `true` if the number is [subnormal].
                #[inline] fn is_subnormal(self) -> bool {
                    self.classify() == FpCategory::Subnormal
                }
                /// Returns the floating point category of the number.
                fn classify(self) -> FpCategory;
                /// Returns the largest integer less than or equal to a number.
                fn floor(self) -> Self;
                /// Returns the smallest integer greater than or equal to a number.
                fn ceil(self) -> Self;
                /// Returns the nearest integer to a number. Round half-way cases away from `0.0`.
                fn round(self) -> Self;
                /// Return the integer part of a number.
                fn trunc(self) -> Self;
                /// Returns the fractional part of a number.
                fn fract(self) -> Self;
                /// Computes the absolute value of `self`. Returns `Float::nan()` if the number is `Float::nan()`.
                fn abs(self) -> Self;
                /// Returns a number that represents the sign of `self`.
                fn signum(self) -> Self;
                /// Returns `true` if `self` is positive, including `+0.0`, `Float::infinity()`, `Float::nan()`.
                fn is_sign_positive(self) -> bool;
                /// Returns `true` if `self` is negative, including `-0.0`, `Float::neg_infinity()`, `-Float::nan()`.
                fn is_sign_negative(self) -> bool;
                /// Fused multiply-add.
                fn mul_add(self, a: Self, b: Self) -> Self;
                /// Take the reciprocal (inverse) of a number, `1/x`.
                fn recip(self) -> Self;
                /// Raise a number to an integer power.
                fn powi(self, n: i32) -> Self;
                /// Raise a number to a floating point power.
                fn powf(self, n: Self) -> Self;
                /// Take the square root of a number.
                fn sqrt(self) -> Self;
                /// Returns `e^(self)`, (the exponential function).
                fn exp(self) -> Self;
                /// Returns `2^(self)`.
                fn exp2(self) -> Self;
                /// Returns the natural logarithm of the number.
                fn ln(self) -> Self;
                /// Returns the logarithm of the number with respect to an arbitrary base.
                fn log(self, base: Self) -> Self;
                /// Returns the base 2 logarithm of the number.
                fn log2(self) -> Self;
                /// Returns the base 10 logarithm of the number.
                fn log10(self) -> Self;
                /// Converts radians to degrees.
                #[inline] fn to_degrees(self) -> Self {
                    let halfpi = Self::zero().acos();
                    let ninety = Self::from(90u8).unwrap();
                    self * ninety / halfpi
                }
                /// Converts degrees to radians.
                #[inline] fn to_radians(self) -> Self {
                    let halfpi = Self::zero().acos();
                    let ninety = Self::from(90u8).unwrap();
                    self * halfpi / ninety
                }
                /// Returns the maximum of the two numbers.
                fn max(self, other: Self) -> Self;
                /// Returns the minimum of the two numbers.
                fn min(self, other: Self) -> Self;
                /// Clamps a value between a min and max.
                fn clamp(self, min: Self, max: Self) -> Self {
                    num::traits::clamp(self, min, max)
                }
                /// The positive difference of two numbers.
                fn abs_sub(self, other: Self) -> Self;
                /// Take the cubic root of a number.
                fn cbrt(self) -> Self;
                /// Calculate the length of the hypotenuse of a right-angle triangle, legs of length `x` and `y`.
                fn hypot(self, other: Self) -> Self;
                /// Computes the sine of a number (in radians).
                fn sin(self) -> Self;
                /// Computes the cosine of a number (in radians).
                fn cos(self) -> Self;
                /// Computes the tangent of a number (in radians).
                fn tan(self) -> Self;
                /// Computes the arcsine of a number.
                fn asin(self) -> Self;
                /// Computes the arccosine of a number.
                fn acos(self) -> Self;
                /// Computes the arctangent of a number.
                fn atan(self) -> Self;
                /// Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).
                fn atan2(self, other: Self) -> Self;
                /// Simultaneously computes the sine and cosine of the number, `x`.
                fn sin_cos(self) -> (Self, Self);
                /// Returns `e^(self) - 1` in a way that is accurate even if the number is close to zero.
                fn exp_m1(self) -> Self;
                /// Returns `ln(1+n)` more accurately than if the operations were performed separately.
                fn ln_1p(self) -> Self;
                /// Hyperbolic sine function.
                fn sinh(self) -> Self;
                /// Hyperbolic cosine function.
                fn cosh(self) -> Self;
                /// Hyperbolic tangent function.
                fn tanh(self) -> Self;
                /// Inverse hyperbolic sine function.
                fn asinh(self) -> Self;
                /// Inverse hyperbolic cosine function.
                fn acosh(self) -> Self;
                /// Inverse hyperbolic tangent function.
                fn atanh(self) -> Self;
                /// Returns the mantissa, base 2 exponent, and sign as integers, respectively.
                fn integer_decode(self) -> (u64, i16, i8);
                /// Returns a number composed of the magnitude of `self` and the sign of `sign`.
                fn copysign(self, sign: Self) -> Self {
                    if self.is_sign_negative() == sign.is_sign_negative() {
                        self
                    } else {
                        self.neg()
                    }
                }
            }
            macro_rules! float_impl_std
            {
                ($T:ident $decode:ident) => {
                    impl Float for $T {
                        constant! {
                            nan() -> $T::NAN;
                            infinity() -> $T::INFINITY;
                            neg_infinity() -> $T::NEG_INFINITY;
                            neg_zero() -> -0.0;
                            min_value() -> $T::MIN;
                            min_positive_value() -> $T::MIN_POSITIVE;
                            epsilon() -> $T::EPSILON;
                            max_value() -> $T::MAX;
                        }
                        #[inline]
                        #[allow(deprecated)]
                        fn abs_sub(self, other: Self) -> Self {
                            <$T>::abs_sub(self, other)
                        }
                        #[inline]
                        fn integer_decode(self) -> (u64, i16, i8) {
                            $decode(self)
                        }
                        forward! {
                            Self::is_nan(self) -> bool;
                            Self::is_infinite(self) -> bool;
                            Self::is_finite(self) -> bool;
                            Self::is_normal(self) -> bool;
                            Self::is_subnormal(self) -> bool;
                            Self::classify(self) -> FpCategory;
                            Self::clamp(self, min: Self, max: Self) -> Self;
                            Self::floor(self) -> Self;
                            Self::ceil(self) -> Self;
                            Self::round(self) -> Self;
                            Self::trunc(self) -> Self;
                            Self::fract(self) -> Self;
                            Self::abs(self) -> Self;
                            Self::signum(self) -> Self;
                            Self::is_sign_positive(self) -> bool;
                            Self::is_sign_negative(self) -> bool;
                            Self::mul_add(self, a: Self, b: Self) -> Self;
                            Self::recip(self) -> Self;
                            Self::powi(self, n: i32) -> Self;
                            Self::powf(self, n: Self) -> Self;
                            Self::sqrt(self) -> Self;
                            Self::exp(self) -> Self;
                            Self::exp2(self) -> Self;
                            Self::ln(self) -> Self;
                            Self::log(self, base: Self) -> Self;
                            Self::log2(self) -> Self;
                            Self::log10(self) -> Self;
                            Self::to_degrees(self) -> Self;
                            Self::to_radians(self) -> Self;
                            Self::max(self, other: Self) -> Self;
                            Self::min(self, other: Self) -> Self;
                            Self::cbrt(self) -> Self;
                            Self::hypot(self, other: Self) -> Self;
                            Self::sin(self) -> Self;
                            Self::cos(self) -> Self;
                            Self::tan(self) -> Self;
                            Self::asin(self) -> Self;
                            Self::acos(self) -> Self;
                            Self::atan(self) -> Self;
                            Self::atan2(self, other: Self) -> Self;
                            Self::sin_cos(self) -> (Self, Self);
                            Self::exp_m1(self) -> Self;
                            Self::ln_1p(self) -> Self;
                            Self::sinh(self) -> Self;
                            Self::cosh(self) -> Self;
                            Self::tanh(self) -> Self;
                            Self::asinh(self) -> Self;
                            Self::acosh(self) -> Self;
                            Self::atanh(self) -> Self;
                            Self::copysign(self, sign: Self) -> Self;
                        }
                    }
                };
            }
            
            fn integer_decode_f32(f: f32) -> (u64, i16, i8)
            {
                let bits: u32 = f.to_bits();
                let sign: i8 = if bits >> 31 == 0 { 1 } else { -1 };
                let mut exponent: i16 = ((bits >> 23) & 0xff) as i16;
                let mantissa = if exponent == 0 {
                    (bits & 0x7fffff) << 1
                } else {
                    (bits & 0x7fffff) | 0x800000
                };
               
                exponent -= 127 + 23;
                (mantissa as u64, exponent, sign)
            }
            fn integer_decode_f64(f: f64) -> (u64, i16, i8)
            {
                let bits: u64 = f.to_bits();
                let sign: i8 = if bits >> 63 == 0 { 1 } else { -1 };
                let mut exponent: i16 = ((bits >> 52) & 0x7ff) as i16;
                let mantissa = if exponent == 0 {
                    (bits & 0xfffffffffffff) << 1
                } else {
                    (bits & 0xfffffffffffff) | 0x10000000000000
                };
               
                exponent -= 1023 + 52;
                (mantissa, exponent, sign)
            }
            float_impl_std!(f32 integer_decode_f32);
            float_impl_std!(f64 integer_decode_f64);
            
            macro_rules! float_const_impl
            {
                ($(#[$doc:meta] $constant:ident,)+) => (
                    #[allow(non_snake_case)]
                    pub trait FloatConst {
                        $(#[$doc] fn $constant() -> Self;)+
                        #[doc = "Return the full circle constant `τ`."]
                        #[inline]
                        fn TAU() -> Self where Self: Sized + Add<Self, Output = Self> {
                            Self::PI() + Self::PI()
                        }
                        #[doc = "Return `log10(2.0)`."]
                        #[inline]
                        fn LOG10_2() -> Self where Self: Sized + Div<Self, Output = Self> {
                            Self::LN_2() / Self::LN_10()
                        }
                        #[doc = "Return `log2(10.0)`."]
                        #[inline]
                        fn LOG2_10() -> Self where Self: Sized + Div<Self, Output = Self> {
                            Self::LN_10() / Self::LN_2()
                        }
                    }
                    float_const_impl! { @float f32, $($constant,)+ }
                    float_const_impl! { @float f64, $($constant,)+ }
                );
                (@float $T:ident, $($constant:ident,)+) => (
                    impl FloatConst for $T {
                        constant! {
                            $( $constant() -> $T::consts::$constant; )+
                            TAU() -> 6.28318530717958647692528676655900577;
                            LOG10_2() -> 0.301029995663981195213738894724493027;
                            LOG2_10() -> 3.32192809488736234787031942948939018;
                        }
                    }
                );
            }
            float_const_impl!
            {
                #[doc = "Return Euler’s number."]
                E,
                #[doc = "Return `1.0 / π`."]
                FRAC_1_PI,
                #[doc = "Return `1.0 / sqrt(2.0)`."]
                FRAC_1_SQRT_2,
                #[doc = "Return `2.0 / π`."]
                FRAC_2_PI,
                #[doc = "Return `2.0 / sqrt(π)`."]
                FRAC_2_SQRT_PI,
                #[doc = "Return `π / 2.0`."]
                FRAC_PI_2,
                #[doc = "Return `π / 3.0`."]
                FRAC_PI_3,
                #[doc = "Return `π / 4.0`."]
                FRAC_PI_4,
                #[doc = "Return `π / 6.0`."]
                FRAC_PI_6,
                #[doc = "Return `π / 8.0`."]
                FRAC_PI_8,
                #[doc = "Return `ln(10.0)`."]
                LN_10,
                #[doc = "Return `ln(2.0)`."]
                LN_2,
                #[doc = "Return `log10(e)`."]
                LOG10_E,
                #[doc = "Return `log2(e)`."]
                LOG2_E,
                #[doc = "Return Archimedes’ constant `π`."]
                PI,
                #[doc = "Return `sqrt(2.0)`."]
                SQRT_2,
            }
            /// Trait for floating point numbers that provide an implementation of the `totalOrder` predicate.
            pub trait TotalOrder
            {
                /// Return the ordering between `self` and `other`.
                fn total_cmp(&self, other: &Self) -> Ordering;
            }
            macro_rules! totalorder_impl
            {
                ($T:ident, $I:ident, $U:ident, $bits:expr) => {
                    impl TotalOrder for $T {
                        #[inline]
                        #[cfg(has_total_cmp)]
                        fn total_cmp(&self, other: &Self) -> Ordering {
                           
                            Self::total_cmp(&self, other)
                        }
                        #[inline]
                        #[cfg(not(has_total_cmp))]
                        fn total_cmp(&self, other: &Self) -> Ordering {
                           
                            let mut left = self.to_bits() as $I;
                            let mut right = other.to_bits() as $I;

                            left ^= (((left >> ($bits - 1)) as $U) >> 1) as $I;
                            right ^= (((right >> ($bits - 1)) as $U) >> 1) as $I;

                            left.cmp(&right)
                        }
                    }
                };
            }
            totalorder_impl!(f64, i64, u64, 64);
            totalorder_impl!(f32, i32, u32, 32);
        } pub use self::float::{ Float, FloatConst };

        pub mod identities
        {
            use ::
            {
                num::{ Saturating, Wrapping },
                ops::{ Add, Mul },
                *,
            };
            /*
            */
            /// Defines an additive identity element for `Self`.
            pub trait Zero: Sized + Add<Self, Output = Self>
            {
                /// Returns the additive identity element of `Self`, `0`.
               
                fn zero() -> Self;
                /// Sets `self` to the additive identity element of `Self`, `0`.
                fn set_zero(&mut self) {
                    *self = Zero::zero();
                }
                /// Returns `true` if `self` is equal to the additive identity.
                fn is_zero(&self) -> bool;
            }
            /// Defines an associated constant representing the additive identity element for `Self`.
            pub trait ConstZero: Zero
            {
                /// The additive identity element of `Self`, `0`.
                const ZERO: Self;
            }
            macro_rules! zero_impl
            {
                ($t:ty, $v:expr) => {
                    impl Zero for $t {
                        #[inline]
                        fn zero() -> $t {
                            $v
                        }
                        #[inline]
                        fn is_zero(&self) -> bool {
                            *self == $v
                        }
                    }
                    impl ConstZero for $t {
                        const ZERO: Self = $v;
                    }
                };
            }
            zero_impl!(usize, 0);
            zero_impl!(u8, 0);
            zero_impl!(u16, 0);
            zero_impl!(u32, 0);
            zero_impl!(u64, 0);
            zero_impl!(u128, 0);

            zero_impl!(isize, 0);
            zero_impl!(i8, 0);
            zero_impl!(i16, 0);
            zero_impl!(i32, 0);
            zero_impl!(i64, 0);
            zero_impl!(i128, 0);

            zero_impl!(f32, 0.0);
            zero_impl!(f64, 0.0);

            impl<T: Zero> Zero for Wrapping<T> where
                Wrapping<T>: Add<Output = Wrapping<T>>,
            {
                fn is_zero(&self) -> bool {
                    self.0.is_zero()
                }
                fn set_zero(&mut self) {
                    self.0.set_zero();
                }
                fn zero() -> Self {
                    Wrapping(T::zero())
                }
            }
            
            impl<T: ConstZero> ConstZero for Wrapping<T> where
                Wrapping<T>: Add<Output = Wrapping<T>>,
            {
                const ZERO: Self = Wrapping(T::ZERO);
            }
            #[cfg(has_num_saturating)]
            impl<T: Zero> Zero for Saturating<T> where
                Saturating<T>: Add<Output = Saturating<T>>,
            {
                fn is_zero(&self) -> bool {
                    self.0.is_zero()
                }
                fn set_zero(&mut self) {
                    self.0.set_zero();
                }
                fn zero() -> Self {
                    Saturating(T::zero())
                }
            }
            #[cfg(has_num_saturating)]
            impl<T: ConstZero> ConstZero for Saturating<T> where
                Saturating<T>: Add<Output = Saturating<T>>,
            {
                const ZERO: Self = Saturating(T::ZERO);
            }
            /// Defines a multiplicative identity element for `Self`.
            /// a * 1 = a       ∀ a ∈ Self
            /// 1 * a = a       ∀ a ∈ Self
            /// ```
            pub trait One: Sized + Mul<Self, Output = Self> {
                /// Returns the multiplicative identity element of `Self`, `1`.
               
                fn one() -> Self;
                /// Sets `self` to the multiplicative identity element of `Self`, `1`.
                fn set_one(&mut self) {
                    *self = One::one();
                }
                /// Returns `true` if `self` is equal to the multiplicative identity.
                #[inline] fn is_one(&self) -> bool
                where
                    Self: PartialEq,
                {
                    *self == Self::one()
                }
            }
            /// Defines an associated constant representing the multiplicative identity
            /// element for `Self`.
            pub trait ConstOne: One {
                /// The multiplicative identity element of `Self`, `1`.
                const ONE: Self;
            }
            macro_rules! one_impl {
                ($t:ty, $v:expr) => {
                    impl One for $t {
                        #[inline]
                        fn one() -> $t {
                            $v
                        }
                        #[inline]
                        fn is_one(&self) -> bool {
                            *self == $v
                        }
                    }
                    impl ConstOne for $t {
                        const ONE: Self = $v;
                    }
                };
            }
            one_impl!(usize, 1);
            one_impl!(u8, 1);
            one_impl!(u16, 1);
            one_impl!(u32, 1);
            one_impl!(u64, 1);
            one_impl!(u128, 1);

            one_impl!(isize, 1);
            one_impl!(i8, 1);
            one_impl!(i16, 1);
            one_impl!(i32, 1);
            one_impl!(i64, 1);
            one_impl!(i128, 1);

            one_impl!(f32, 1.0);
            one_impl!(f64, 1.0);

            impl<T: One> One for Wrapping<T> where
                Wrapping<T>: Mul<Output = Wrapping<T>>,
            {
                fn set_one(&mut self) {
                    self.0.set_one();
                }
                fn one() -> Self {
                    Wrapping(T::one())
                }
            }
            
            impl<T: ConstOne> ConstOne for Wrapping<T> where
                Wrapping<T>: Mul<Output = Wrapping<T>>,
            {
                const ONE: Self = Wrapping(T::ONE);
            }
            #[cfg(has_num_saturating)]
            impl<T: One> One for Saturating<T> where
                Saturating<T>: Mul<Output = Saturating<T>>,
            {
                fn set_one(&mut self) {
                    self.0.set_one();
                }
                fn one() -> Self {
                    Saturating(T::one())
                }
            }
            #[cfg(has_num_saturating)]
            impl<T: ConstOne> ConstOne for Saturating<T> where
                Saturating<T>: Mul<Output = Saturating<T>>,
            {
                const ONE: Self = Saturating(T::ONE);
            }
           

            /// Returns the additive identity, `0`.
            #[inline( always )] pub fn zero<T: Zero>() -> T {
                Zero::zero()
            }
            /// Returns the multiplicative identity, `1`.
            #[inline( always )] pub fn one<T: One>() -> T {
                One::one()
            }
        } pub use self::identities::{one, zero, ConstOne, ConstZero, One, Zero};

        pub mod int
        {
            use ::
            {
                num::
                {
                    traits::
                    {
                        bounds::Bounded,
                        ops::
                        {
                            checked::*,
                            saturating::Saturating,
                        },
                        Num, NumCast,
                    },
                },
                ops::{BitAnd, BitOr, BitXor, Not, Shl, Shr},
                *,
            };
            /*
            */
            /// Generic trait for primitive integers.
            pub trait PrimInt:
                Sized
                + Copy
                + Num
                + NumCast
                + Bounded
                + PartialOrd
                + Ord
                + Eq
                + Not<Output = Self>
                + BitAnd<Output = Self>
                + BitOr<Output = Self>
                + BitXor<Output = Self>
                + Shl<usize, Output = Self>
                + Shr<usize, Output = Self>
                + CheckedAdd<Output = Self>
                + CheckedSub<Output = Self>
                + CheckedMul<Output = Self>
                + CheckedDiv<Output = Self>
                + Saturating
            {
                /// Returns the number of ones in the binary representation of `self`.
                fn count_ones(self) -> u32;
                /// Returns the number of zeros in the binary representation of `self`.
                fn count_zeros(self) -> u32;
                /// Returns the number of leading ones in the binary representation
                /// of `self`.
                fn leading_ones(self) -> u32 {
                    (!self).leading_zeros()
                }
                /// Returns the number of leading zeros in the binary representation
                /// of `self`.
                fn leading_zeros(self) -> u32;
                /// Returns the number of trailing ones in the binary representation
                /// of `self`.
                fn trailing_ones(self) -> u32 {
                    (!self).trailing_zeros()
                }
                /// Returns the number of trailing zeros in the binary representation
                /// of `self`.
                fn trailing_zeros(self) -> u32;
                /// Shifts the bits to the left by a specified amount, `n`, wrapping
                /// the truncated bits to the end of the resulting integer.
                fn rotate_left(self, n: u32) -> Self;
                /// Shifts the bits to the right by a specified amount, `n`, wrapping
                /// the truncated bits to the beginning of the resulting integer.
                fn rotate_right(self, n: u32) -> Self;
                /// Shifts the bits to the left by a specified amount, `n`, filling
                /// zeros in the least significant bits.
                fn signed_shl(self, n: u32) -> Self;
                /// Shifts the bits to the right by a specified amount, `n`, copying
                /// the "sign bit" in the most significant bits even for unsigned types.
                fn signed_shr(self, n: u32) -> Self;
                /// Shifts the bits to the left by a specified amount, `n`, filling
                /// zeros in the least significant bits.
                fn unsigned_shl(self, n: u32) -> Self;
                /// Shifts the bits to the right by a specified amount, `n`, filling
                /// zeros in the most significant bits.
                fn unsigned_shr(self, n: u32) -> Self;
                /// Reverses the byte order of the integer.
                fn swap_bytes(self) -> Self;
                /// Reverses the order of bits in the integer.
                fn reverse_bits(self) -> Self {
                    reverse_bits_fallback(self)
                }
                /// Convert an integer from big endian to the target's endianness.
                fn from_be(x: Self) -> Self;
                /// Convert an integer from little endian to the target's endianness.
                fn from_le(x: Self) -> Self;
                /// Convert `self` to big endian from the target's endianness.
                fn to_be(self) -> Self;
                /// Convert `self` to little endian from the target's endianness.
                fn to_le(self) -> Self;
                /// Raises self to the power of `exp`, using exponentiation by squaring.
                fn pow(self, exp: u32) -> Self;
            }
            fn one_per_byte<P: PrimInt>() -> P {
               
               
               
               
                let mut ret = P::one();
                let mut shift = 8;
                let mut b = ret.count_zeros() >> 3;
                while b != 0 {
                    ret = (ret << shift) | ret;
                    shift <<= 1;
                    b >>= 1;
                }
                ret
            }
            fn reverse_bits_fallback<P: PrimInt>(i: P) -> P {
                let rep_01: P = one_per_byte();
                let rep_03 = (rep_01 << 1) | rep_01;
                let rep_05 = (rep_01 << 2) | rep_01;
                let rep_0f = (rep_03 << 2) | rep_03;
                let rep_33 = (rep_03 << 4) | rep_03;
                let rep_55 = (rep_05 << 4) | rep_05;

               
               
                let mut ret = i.swap_bytes();
                ret = ((ret & rep_0f) << 4) | ((ret >> 4) & rep_0f);
                ret = ((ret & rep_33) << 2) | ((ret >> 2) & rep_33);
                ret = ((ret & rep_55) << 1) | ((ret >> 1) & rep_55);
                ret
            }
            macro_rules! prim_int_impl {
                ($T:ty, $S:ty, $U:ty) => {
                    impl PrimInt for $T {
                        #[inline]
                        fn count_ones(self) -> u32 {
                            <$T>::count_ones(self)
                        }
                        #[inline]
                        fn count_zeros(self) -> u32 {
                            <$T>::count_zeros(self)
                        }
                        #[inline]
                        fn leading_ones(self) -> u32 {
                            <$T>::leading_ones(self)
                        }
                        #[inline]
                        fn leading_zeros(self) -> u32 {
                            <$T>::leading_zeros(self)
                        }
                        #[inline]
                        fn trailing_ones(self) -> u32 {
                            <$T>::trailing_ones(self)
                        }
                        #[inline]
                        fn trailing_zeros(self) -> u32 {
                            <$T>::trailing_zeros(self)
                        }
                        #[inline]
                        fn rotate_left(self, n: u32) -> Self {
                            <$T>::rotate_left(self, n)
                        }
                        #[inline]
                        fn rotate_right(self, n: u32) -> Self {
                            <$T>::rotate_right(self, n)
                        }
                        #[inline]
                        fn signed_shl(self, n: u32) -> Self {
                            ((self as $S) << n) as $T
                        }
                        #[inline]
                        fn signed_shr(self, n: u32) -> Self {
                            ((self as $S) >> n) as $T
                        }
                        #[inline]
                        fn unsigned_shl(self, n: u32) -> Self {
                            ((self as $U) << n) as $T
                        }
                        #[inline]
                        fn unsigned_shr(self, n: u32) -> Self {
                            ((self as $U) >> n) as $T
                        }
                        #[inline]
                        fn swap_bytes(self) -> Self {
                            <$T>::swap_bytes(self)
                        }
                        #[inline]
                        fn reverse_bits(self) -> Self {
                            <$T>::reverse_bits(self)
                        }
                        #[inline]
                        fn from_be(x: Self) -> Self {
                            <$T>::from_be(x)
                        }
                        #[inline]
                        fn from_le(x: Self) -> Self {
                            <$T>::from_le(x)
                        }
                        #[inline]
                        fn to_be(self) -> Self {
                            <$T>::to_be(self)
                        }
                        #[inline]
                        fn to_le(self) -> Self {
                            <$T>::to_le(self)
                        }
                        #[inline]
                        fn pow(self, exp: u32) -> Self {
                            <$T>::pow(self, exp)
                        }
                    }
                };
            }
            
            prim_int_impl!(u8, i8, u8);
            prim_int_impl!(u16, i16, u16);
            prim_int_impl!(u32, i32, u32);
            prim_int_impl!(u64, i64, u64);
            prim_int_impl!(u128, i128, u128);
            prim_int_impl!(usize, isize, usize);
            prim_int_impl!(i8, i8, u8);
            prim_int_impl!(i16, i16, u16);
            prim_int_impl!(i32, i32, u32);
            prim_int_impl!(i64, i64, u64);
            prim_int_impl!(i128, i128, u128);
            prim_int_impl!(isize, isize, usize);
        } pub use self::int::PrimInt;

        pub mod ops
        {
            use ::
            {
                *,
            };
            /*
            */
            pub mod bytes
            {
                /*!
                */
                use ::
                {
                    borrow::{ Borrow, BorrowMut },
                    cmp::{ Eq, Ord, PartialEq, PartialOrd },
                    fmt::{ Debug },
                    hash::{ Hash },
                    *,
                };
                /*
                */
                pub trait NumBytes:
                    Debug
                    + AsRef<[u8]>
                    + AsMut<[u8]>
                    + PartialEq
                    + Eq
                    + PartialOrd
                    + Ord
                    + Hash
                    + Borrow<[u8]>
                    + BorrowMut<[u8]>
                {
                }
                impl<T> NumBytes for T where
                    T: Debug
                        + AsRef<[u8]>
                        + AsMut<[u8]>
                        + PartialEq
                        + Eq
                        + PartialOrd
                        + Ord
                        + Hash
                        + Borrow<[u8]>
                        + BorrowMut<[u8]>
                        + ?Sized
                {
                }
                pub trait ToBytes {
                    type Bytes: NumBytes;

                    /// Return the memory representation of this number as a byte array in big-endian byte order.
                    ///
                    /// # Examples
                    ///
                    /// ```
                    /// use ::num::traits::ToBytes;
                    ///
                    /// let bytes = ToBytes::to_be_bytes(&0x12345678u32);
                    /// assert_eq!(bytes, [0x12, 0x34, 0x56, 0x78]);
                    /// ```
                    fn to_be_bytes(&self) -> Self::Bytes;

                    /// Return the memory representation of this number as a byte array in little-endian byte order.
                    ///
                    /// # Examples
                    ///
                    /// ```
                    /// use ::num::traits::ToBytes;
                    ///
                    /// let bytes = ToBytes::to_le_bytes(&0x12345678u32);
                    /// assert_eq!(bytes, [0x78, 0x56, 0x34, 0x12]);
                    /// ```
                    fn to_le_bytes(&self) -> Self::Bytes;

                    /// Return the memory representation of this number as a byte array in native byte order.
                    ///
                    /// As the target platform's native endianness is used,
                    /// portable code should use [`to_be_bytes`] or [`to_le_bytes`], as appropriate, instead.
                    ///
                    /// [`to_be_bytes`]: #method.to_be_bytes
                    /// [`to_le_bytes`]: #method.to_le_bytes
                    ///
                    /// # Examples
                    ///
                    /// ```
                    /// use ::num::traits::ToBytes;
                    ///
                    /// #[cfg(target_endian = "big")]
                    /// let expected = [0x12, 0x34, 0x56, 0x78];
                    ///
                    /// #[cfg(target_endian = "little")]
                    /// let expected = [0x78, 0x56, 0x34, 0x12];
                    ///
                    /// let bytes = ToBytes::to_ne_bytes(&0x12345678u32);
                    /// assert_eq!(bytes, expected)
                    /// ```
                    fn to_ne_bytes(&self) -> Self::Bytes {
                        #[cfg(target_endian = "big")]
                        let bytes = self.to_be_bytes();
                        #[cfg(target_endian = "little")]
                        let bytes = self.to_le_bytes();
                        bytes
                    }
                }
                pub trait FromBytes: Sized {
                    type Bytes: NumBytes + ?Sized;

                    /// Create a number from its representation as a byte array in big endian.
                    ///
                    /// # Examples
                    ///
                    /// ```
                    /// use ::num::traits::FromBytes;
                    ///
                    /// let value: u32 = FromBytes::from_be_bytes(&[0x12, 0x34, 0x56, 0x78]);
                    /// assert_eq!(value, 0x12345678);
                    /// ```
                    fn from_be_bytes(bytes: &Self::Bytes) -> Self;

                    /// Create a number from its representation as a byte array in little endian.
                    ///
                    /// # Examples
                    ///
                    /// ```
                    /// use ::num::traits::FromBytes;
                    ///
                    /// let value: u32 = FromBytes::from_le_bytes(&[0x78, 0x56, 0x34, 0x12]);
                    /// assert_eq!(value, 0x12345678);
                    /// ```
                    fn from_le_bytes(bytes: &Self::Bytes) -> Self;

                    /// Create a number from its memory representation as a byte array in native endianness.
                    ///
                    /// As the target platform's native endianness is used,
                    /// portable code likely wants to use [`from_be_bytes`] or [`from_le_bytes`], as appropriate instead.
                    ///
                    /// [`from_be_bytes`]: #method.from_be_bytes
                    /// [`from_le_bytes`]: #method.from_le_bytes
                    ///
                    /// # Examples
                    ///
                    /// ```
                    /// use ::num::traits::FromBytes;
                    ///
                    /// #[cfg(target_endian = "big")]
                    /// let bytes = [0x12, 0x34, 0x56, 0x78];
                    ///
                    /// #[cfg(target_endian = "little")]
                    /// let bytes = [0x78, 0x56, 0x34, 0x12];
                    ///
                    /// let value: u32 = FromBytes::from_ne_bytes(&bytes);
                    /// assert_eq!(value, 0x12345678)
                    /// ```
                    fn from_ne_bytes(bytes: &Self::Bytes) -> Self {
                        #[cfg(target_endian = "big")]
                        let this = Self::from_be_bytes(bytes);
                        #[cfg(target_endian = "little")]
                        let this = Self::from_le_bytes(bytes);
                        this
                    }
                }
                macro_rules! float_to_from_bytes_impl {
                    ($T:ty, $L:expr) => {
                        impl ToBytes for $T {
                            type Bytes = [u8; $L];

                            #[inline]
                            fn to_be_bytes(&self) -> Self::Bytes {
                                <$T>::to_be_bytes(*self)
                            }
                            #[inline]
                            fn to_le_bytes(&self) -> Self::Bytes {
                                <$T>::to_le_bytes(*self)
                            }
                            #[inline]
                            fn to_ne_bytes(&self) -> Self::Bytes {
                                <$T>::to_ne_bytes(*self)
                            }
                        }
                        impl FromBytes for $T {
                            type Bytes = [u8; $L];

                            #[inline]
                            fn from_be_bytes(bytes: &Self::Bytes) -> Self {
                                <$T>::from_be_bytes(*bytes)
                            }
                            #[inline]
                            fn from_le_bytes(bytes: &Self::Bytes) -> Self {
                                <$T>::from_le_bytes(*bytes)
                            }
                            #[inline]
                            fn from_ne_bytes(bytes: &Self::Bytes) -> Self {
                                <$T>::from_ne_bytes(*bytes)
                            }
                        }
                    };
                }
                macro_rules! int_to_from_bytes_impl {
                    ($T:ty, $L:expr) => {
                        impl ToBytes for $T {
                            type Bytes = [u8; $L];

                            #[inline]
                            fn to_be_bytes(&self) -> Self::Bytes {
                                <$T>::to_be_bytes(*self)
                            }
                            #[inline]
                            fn to_le_bytes(&self) -> Self::Bytes {
                                <$T>::to_le_bytes(*self)
                            }
                            #[inline]
                            fn to_ne_bytes(&self) -> Self::Bytes {
                                <$T>::to_ne_bytes(*self)
                            }
                        }
                        impl FromBytes for $T {
                            type Bytes = [u8; $L];

                            #[inline]
                            fn from_be_bytes(bytes: &Self::Bytes) -> Self {
                                <$T>::from_be_bytes(*bytes)
                            }
                            #[inline]
                            fn from_le_bytes(bytes: &Self::Bytes) -> Self {
                                <$T>::from_le_bytes(*bytes)
                            }
                            #[inline]
                            fn from_ne_bytes(bytes: &Self::Bytes) -> Self {
                                <$T>::from_ne_bytes(*bytes)
                            }
                        }
                    };
                }
                int_to_from_bytes_impl!(u8, 1);
                int_to_from_bytes_impl!(u16, 2);
                int_to_from_bytes_impl!(u32, 4);
                int_to_from_bytes_impl!(u64, 8);
                int_to_from_bytes_impl!(u128, 16);
                #[cfg(target_pointer_width = "64")]
                int_to_from_bytes_impl!(usize, 8);
                #[cfg(target_pointer_width = "32")]
                int_to_from_bytes_impl!(usize, 4);

                int_to_from_bytes_impl!(i8, 1);
                int_to_from_bytes_impl!(i16, 2);
                int_to_from_bytes_impl!(i32, 4);
                int_to_from_bytes_impl!(i64, 8);
                int_to_from_bytes_impl!(i128, 16);
                #[cfg(target_pointer_width = "64")]
                int_to_from_bytes_impl!(isize, 8);
                #[cfg(target_pointer_width = "32")]
                int_to_from_bytes_impl!(isize, 4);

                float_to_from_bytes_impl!(f32, 4);
                float_to_from_bytes_impl!(f64, 8);
            }
            
            pub mod checked
            {
                /*!
                */
                use ::
                {
                    ops::{Add, Div, Mul, Rem, Shl, Shr, Sub},
                    *,
                };
                /*
                */
                /// Performs addition, returning `None` if overflow occurred.
                pub trait CheckedAdd: Sized + Add<Self, Output = Self> {
                    /// Adds two numbers, checking for overflow. If overflow happens, `None` is
                    /// returned.
                    fn checked_add(&self, v: &Self) -> Option<Self>;
                }
                macro_rules! checked_impl {
                    ($trait_name:ident, $method:ident, $t:ty) => {
                        impl $trait_name for $t {
                            #[inline]
                            fn $method(&self, v: &$t) -> Option<$t> {
                                <$t>::$method(*self, *v)
                            }
                        }
                    };
                }
                checked_impl!(CheckedAdd, checked_add, u8);
                checked_impl!(CheckedAdd, checked_add, u16);
                checked_impl!(CheckedAdd, checked_add, u32);
                checked_impl!(CheckedAdd, checked_add, u64);
                checked_impl!(CheckedAdd, checked_add, usize);
                checked_impl!(CheckedAdd, checked_add, u128);

                checked_impl!(CheckedAdd, checked_add, i8);
                checked_impl!(CheckedAdd, checked_add, i16);
                checked_impl!(CheckedAdd, checked_add, i32);
                checked_impl!(CheckedAdd, checked_add, i64);
                checked_impl!(CheckedAdd, checked_add, isize);
                checked_impl!(CheckedAdd, checked_add, i128);
                /// Performs subtraction, returning `None` if overflow occurred.
                pub trait CheckedSub: Sized + Sub<Self, Output = Self> {
                    /// Subtracts two numbers, checking for overflow. If overflow happens,
                    /// `None` is returned.
                    fn checked_sub(&self, v: &Self) -> Option<Self>;
                }
                checked_impl!(CheckedSub, checked_sub, u8);
                checked_impl!(CheckedSub, checked_sub, u16);
                checked_impl!(CheckedSub, checked_sub, u32);
                checked_impl!(CheckedSub, checked_sub, u64);
                checked_impl!(CheckedSub, checked_sub, usize);
                checked_impl!(CheckedSub, checked_sub, u128);

                checked_impl!(CheckedSub, checked_sub, i8);
                checked_impl!(CheckedSub, checked_sub, i16);
                checked_impl!(CheckedSub, checked_sub, i32);
                checked_impl!(CheckedSub, checked_sub, i64);
                checked_impl!(CheckedSub, checked_sub, isize);
                checked_impl!(CheckedSub, checked_sub, i128);
                /// Performs multiplication, returning `None` if overflow occurred.
                pub trait CheckedMul: Sized + Mul<Self, Output = Self> {
                    /// Multiplies two numbers, checking for overflow. If overflow happens,
                    /// `None` is returned.
                    fn checked_mul(&self, v: &Self) -> Option<Self>;
                }
                checked_impl!(CheckedMul, checked_mul, u8);
                checked_impl!(CheckedMul, checked_mul, u16);
                checked_impl!(CheckedMul, checked_mul, u32);
                checked_impl!(CheckedMul, checked_mul, u64);
                checked_impl!(CheckedMul, checked_mul, usize);
                checked_impl!(CheckedMul, checked_mul, u128);

                checked_impl!(CheckedMul, checked_mul, i8);
                checked_impl!(CheckedMul, checked_mul, i16);
                checked_impl!(CheckedMul, checked_mul, i32);
                checked_impl!(CheckedMul, checked_mul, i64);
                checked_impl!(CheckedMul, checked_mul, isize);
                checked_impl!(CheckedMul, checked_mul, i128);
                /// Performs division, returning `None` on division by zero or if overflow
                /// occurred.
                pub trait CheckedDiv: Sized + Div<Self, Output = Self> {
                    /// Divides two numbers, checking for overflow and division by
                    /// zero. If any of that happens, `None` is returned.
                    fn checked_div(&self, v: &Self) -> Option<Self>;
                }
                checked_impl!(CheckedDiv, checked_div, u8);
                checked_impl!(CheckedDiv, checked_div, u16);
                checked_impl!(CheckedDiv, checked_div, u32);
                checked_impl!(CheckedDiv, checked_div, u64);
                checked_impl!(CheckedDiv, checked_div, usize);
                checked_impl!(CheckedDiv, checked_div, u128);

                checked_impl!(CheckedDiv, checked_div, i8);
                checked_impl!(CheckedDiv, checked_div, i16);
                checked_impl!(CheckedDiv, checked_div, i32);
                checked_impl!(CheckedDiv, checked_div, i64);
                checked_impl!(CheckedDiv, checked_div, isize);
                checked_impl!(CheckedDiv, checked_div, i128);
                /// Performs integral remainder, returning `None` on division by zero or if
                /// overflow occurred.
                pub trait CheckedRem: Sized + Rem<Self, Output = Self> {
                    /// Finds the remainder of dividing two numbers, checking for overflow and
                    /// division by zero. If any of that happens, `None` is returned.
                    ///
                    /// # Examples
                    ///
                    /// ```
                    /// use ::num::traits::CheckedRem;
                    /// use ::i32::MIN;
                    ///
                    /// assert_eq!(CheckedRem::checked_rem(&10, &7), Some(3));
                    /// assert_eq!(CheckedRem::checked_rem(&10, &-7), Some(3));
                    /// assert_eq!(CheckedRem::checked_rem(&-10, &7), Some(-3));
                    /// assert_eq!(CheckedRem::checked_rem(&-10, &-7), Some(-3));
                    ///
                    /// assert_eq!(CheckedRem::checked_rem(&10, &0), None);
                    ///
                    /// assert_eq!(CheckedRem::checked_rem(&MIN, &1), Some(0));
                    /// assert_eq!(CheckedRem::checked_rem(&MIN, &-1), None);
                    /// ```
                    fn checked_rem(&self, v: &Self) -> Option<Self>;
                }
                checked_impl!(CheckedRem, checked_rem, u8);
                checked_impl!(CheckedRem, checked_rem, u16);
                checked_impl!(CheckedRem, checked_rem, u32);
                checked_impl!(CheckedRem, checked_rem, u64);
                checked_impl!(CheckedRem, checked_rem, usize);
                checked_impl!(CheckedRem, checked_rem, u128);

                checked_impl!(CheckedRem, checked_rem, i8);
                checked_impl!(CheckedRem, checked_rem, i16);
                checked_impl!(CheckedRem, checked_rem, i32);
                checked_impl!(CheckedRem, checked_rem, i64);
                checked_impl!(CheckedRem, checked_rem, isize);
                checked_impl!(CheckedRem, checked_rem, i128);

                macro_rules! checked_impl_unary {
                    ($trait_name:ident, $method:ident, $t:ty) => {
                        impl $trait_name for $t {
                            #[inline]
                            fn $method(&self) -> Option<$t> {
                                <$t>::$method(*self)
                            }
                        }
                    };
                }
                /// Performs negation, returning `None` if the result can't be represented.
                pub trait CheckedNeg: Sized {
                    /// Negates a number, returning `None` for results that can't be represented, like signed `MIN`
                    /// values that can't be positive, or non-zero unsigned values that can't be negative.
                    ///
                    /// # Examples
                    ///
                    /// ```
                    /// use ::num::traits::CheckedNeg;
                    /// use ::i32::MIN;
                    ///
                    /// assert_eq!(CheckedNeg::checked_neg(&1_i32), Some(-1));
                    /// assert_eq!(CheckedNeg::checked_neg(&-1_i32), Some(1));
                    /// assert_eq!(CheckedNeg::checked_neg(&MIN), None);
                    ///
                    /// assert_eq!(CheckedNeg::checked_neg(&0_u32), Some(0));
                    /// assert_eq!(CheckedNeg::checked_neg(&1_u32), None);
                    /// ```
                    fn checked_neg(&self) -> Option<Self>;
                }
                checked_impl_unary!(CheckedNeg, checked_neg, u8);
                checked_impl_unary!(CheckedNeg, checked_neg, u16);
                checked_impl_unary!(CheckedNeg, checked_neg, u32);
                checked_impl_unary!(CheckedNeg, checked_neg, u64);
                checked_impl_unary!(CheckedNeg, checked_neg, usize);
                checked_impl_unary!(CheckedNeg, checked_neg, u128);

                checked_impl_unary!(CheckedNeg, checked_neg, i8);
                checked_impl_unary!(CheckedNeg, checked_neg, i16);
                checked_impl_unary!(CheckedNeg, checked_neg, i32);
                checked_impl_unary!(CheckedNeg, checked_neg, i64);
                checked_impl_unary!(CheckedNeg, checked_neg, isize);
                checked_impl_unary!(CheckedNeg, checked_neg, i128);
                /// Performs shift left, returning `None` on shifts larger than or equal to
                /// the type width.
                pub trait CheckedShl: Sized + Shl<u32, Output = Self> {
                    /// Checked shift left. Computes `self << rhs`, returning `None`
                    /// if `rhs` is larger than or equal to the number of bits in `self`.
                    ///
                    /// ```
                    /// use ::num::traits::CheckedShl;
                    ///
                    /// let x: u16 = 0x0001;
                    ///
                    /// assert_eq!(CheckedShl::checked_shl(&x, 0),  Some(0x0001));
                    /// assert_eq!(CheckedShl::checked_shl(&x, 1),  Some(0x0002));
                    /// assert_eq!(CheckedShl::checked_shl(&x, 15), Some(0x8000));
                    /// assert_eq!(CheckedShl::checked_shl(&x, 16), None);
                    /// ```
                    fn checked_shl(&self, rhs: u32) -> Option<Self>;
                }
                macro_rules! checked_shift_impl {
                    ($trait_name:ident, $method:ident, $t:ty) => {
                        impl $trait_name for $t {
                            #[inline]
                            fn $method(&self, rhs: u32) -> Option<$t> {
                                <$t>::$method(*self, rhs)
                            }
                        }
                    };
                }
                checked_shift_impl!(CheckedShl, checked_shl, u8);
                checked_shift_impl!(CheckedShl, checked_shl, u16);
                checked_shift_impl!(CheckedShl, checked_shl, u32);
                checked_shift_impl!(CheckedShl, checked_shl, u64);
                checked_shift_impl!(CheckedShl, checked_shl, usize);
                checked_shift_impl!(CheckedShl, checked_shl, u128);

                checked_shift_impl!(CheckedShl, checked_shl, i8);
                checked_shift_impl!(CheckedShl, checked_shl, i16);
                checked_shift_impl!(CheckedShl, checked_shl, i32);
                checked_shift_impl!(CheckedShl, checked_shl, i64);
                checked_shift_impl!(CheckedShl, checked_shl, isize);
                checked_shift_impl!(CheckedShl, checked_shl, i128);
                /// Performs shift right, returning `None` on shifts larger than or equal to
                /// the type width.
                pub trait CheckedShr: Sized + Shr<u32, Output = Self> {
                    /// Checked shift right. Computes `self >> rhs`, returning `None`
                    /// if `rhs` is larger than or equal to the number of bits in `self`.
                    ///
                    /// ```
                    /// use ::num::traits::CheckedShr;
                    ///
                    /// let x: u16 = 0x8000;
                    ///
                    /// assert_eq!(CheckedShr::checked_shr(&x, 0),  Some(0x8000));
                    /// assert_eq!(CheckedShr::checked_shr(&x, 1),  Some(0x4000));
                    /// assert_eq!(CheckedShr::checked_shr(&x, 15), Some(0x0001));
                    /// assert_eq!(CheckedShr::checked_shr(&x, 16), None);
                    /// ```
                    fn checked_shr(&self, rhs: u32) -> Option<Self>;
                }
                checked_shift_impl!(CheckedShr, checked_shr, u8);
                checked_shift_impl!(CheckedShr, checked_shr, u16);
                checked_shift_impl!(CheckedShr, checked_shr, u32);
                checked_shift_impl!(CheckedShr, checked_shr, u64);
                checked_shift_impl!(CheckedShr, checked_shr, usize);
                checked_shift_impl!(CheckedShr, checked_shr, u128);

                checked_shift_impl!(CheckedShr, checked_shr, i8);
                checked_shift_impl!(CheckedShr, checked_shr, i16);
                checked_shift_impl!(CheckedShr, checked_shr, i32);
                checked_shift_impl!(CheckedShr, checked_shr, i64);
                checked_shift_impl!(CheckedShr, checked_shr, isize);
                checked_shift_impl!(CheckedShr, checked_shr, i128);

            }
            
            pub mod euclid
            {
                /*!
                */
                use ::
                {
                    ops::{Div, Rem},
                    *,
                };
                /*
                */
                pub trait Euclid: Sized + Div<Self, Output = Self> + Rem<Self, Output = Self> {
                    /// Calculates Euclidean division, the matching method for `rem_euclid`.
                    ///
                    /// This computes the integer `n` such that
                    /// `self = n * v + self.rem_euclid(v)`.
                    /// In other words, the result is `self / v` rounded to the integer `n`
                    /// such that `self >= n * v`.
                    ///
                    /// # Examples
                    ///
                    /// ```
                    /// use ::num::traits::Euclid;
                    ///
                    /// let a: i32 = 7;
                    /// let b: i32 = 4;
                    /// assert_eq!(Euclid::div_euclid(&a, &b), 1);
                    /// assert_eq!(Euclid::div_euclid(&-a, &b), -2);
                    /// assert_eq!(Euclid::div_euclid(&a, &-b), -1);
                    /// assert_eq!(Euclid::div_euclid(&-a, &-b), 2);
                    /// ```
                    fn div_euclid(&self, v: &Self) -> Self;

                    /// Calculates the least nonnegative remainder of `self (mod v)`.
                    ///
                    /// In particular, the return value `r` satisfies `0.0 <= r < v.abs()` in
                    /// most cases. However, due to a floating point round-off error it can
                    /// result in `r == v.abs()`, violating the mathematical definition, if
                    /// `self` is much smaller than `v.abs()` in magnitude and `self < 0.0`.
                    /// This result is not an element of the function's codomain, but it is the
                    /// closest floating point number in the real numbers and thus fulfills the
                    /// property `self == self.div_euclid(v) * v + self.rem_euclid(v)`
                    /// approximatively.
                    ///
                    /// # Examples
                    ///
                    /// ```
                    /// use ::num::traits::Euclid;
                    ///
                    /// let a: i32 = 7;
                    /// let b: i32 = 4;
                    /// assert_eq!(Euclid::rem_euclid(&a, &b), 3);
                    /// assert_eq!(Euclid::rem_euclid(&-a, &b), 1);
                    /// assert_eq!(Euclid::rem_euclid(&a, &-b), 3);
                    /// assert_eq!(Euclid::rem_euclid(&-a, &-b), 1);
                    /// ```
                    fn rem_euclid(&self, v: &Self) -> Self;

                    /// Returns both the quotient and remainder from Euclidean division.
                    ///
                    /// By default, it internally calls both `Euclid::div_euclid` and `Euclid::rem_euclid`,
                    /// but it can be overridden in order to implement some optimization.
                    ///
                    /// # Examples
                    ///
                    /// ```
                    /// # use ::num::traits::Euclid;
                    /// let x = 5u8;
                    /// let y = 3u8;
                    ///
                    /// let div = Euclid::div_euclid(&x, &y);
                    /// let rem = Euclid::rem_euclid(&x, &y);
                    ///
                    /// assert_eq!((div, rem), Euclid::div_rem_euclid(&x, &y));
                    /// ```
                    fn div_rem_euclid(&self, v: &Self) -> (Self, Self) {
                        (self.div_euclid(v), self.rem_euclid(v))
                    }
                }
                macro_rules! euclid_forward_impl 
                {
                    ($($t:ty)*) => {$(
                        impl Euclid for $t {
                            #[inline]
                            fn div_euclid(&self, v: &$t) -> Self {
                                <$t>::div_euclid(*self, *v)
                            }
                            #[inline]
                            fn rem_euclid(&self, v: &$t) -> Self {
                                <$t>::rem_euclid(*self, *v)
                            }
                        }
                    )*}
                }
                euclid_forward_impl!(isize i8 i16 i32 i64 i128);
                euclid_forward_impl!(usize u8 u16 u32 u64 u128);
                euclid_forward_impl!(f32 f64);

                pub trait CheckedEuclid: Euclid
                {
                    /// Performs euclid division, returning `None` on division by zero or if
                    /// overflow occurred.
                    fn checked_div_euclid(&self, v: &Self) -> Option<Self>;

                    /// Finds the euclid remainder of dividing two numbers, returning `None` on
                    /// division by zero or if overflow occurred.
                    fn checked_rem_euclid(&self, v: &Self) -> Option<Self>;

                    /// Returns both the quotient and remainder from checked Euclidean division,
                    /// returning `None` on division by zero or if overflow occurred.
                    ///
                    /// By default, it internally calls both `CheckedEuclid::checked_div_euclid` and `CheckedEuclid::checked_rem_euclid`,
                    /// but it can be overridden in order to implement some optimization.
                    /// # Examples
                    ///
                    /// ```
                    /// # use ::num::traits::CheckedEuclid;
                    /// let x = 5u8;
                    /// let y = 3u8;
                    ///
                    /// let div = CheckedEuclid::checked_div_euclid(&x, &y);
                    /// let rem = CheckedEuclid::checked_rem_euclid(&x, &y);
                    ///
                    /// assert_eq!(Some((div.unwrap(), rem.unwrap())), CheckedEuclid::checked_div_rem_euclid(&x, &y));
                    /// ```
                    fn checked_div_rem_euclid(&self, v: &Self) -> Option<(Self, Self)> {
                        Some((self.checked_div_euclid(v)?, self.checked_rem_euclid(v)?))
                    }
                }
                macro_rules! checked_euclid_forward_impl 
                {
                    ($($t:ty)*) => {$(
                        impl CheckedEuclid for $t {
                            #[inline]
                            fn checked_div_euclid(&self, v: &$t) -> Option<Self> {
                                <$t>::checked_div_euclid(*self, *v)
                            }
                            #[inline]
                            fn checked_rem_euclid(&self, v: &$t) -> Option<Self> {
                                <$t>::checked_rem_euclid(*self, *v)
                            }
                        }
                    )*}
                }
                checked_euclid_forward_impl!(isize i8 i16 i32 i64 i128);
                checked_euclid_forward_impl!(usize u8 u16 u32 u64 u128);
            }
            
            pub mod inv
            {
                /*!
                */
                use ::
                {
                    *,
                };
                /*
                */
                /// Unary operator for retrieving the multiplicative inverse, or reciprocal, of a value.
                pub trait Inv {
                    /// The result after applying the operator.
                    type Output;

                    /// Returns the multiplicative inverse of `self`.
                    ///
                    /// # Examples
                    ///
                    /// ```
                    /// use ::f64::INFINITY;
                    /// use ::num::traits::Inv;
                    ///
                    /// assert_eq!(7.0.inv() * 7.0, 1.0);
                    /// assert_eq!((-0.0).inv(), -INFINITY);
                    /// ```
                    fn inv(self) -> Self::Output;
                }
                impl Inv for f32 {
                    type Output = f32;
                    #[inline] fn inv(self) -> f32 {
                        1.0 / self
                    }
                }
                impl Inv for f64 {
                    type Output = f64;
                    #[inline] fn inv(self) -> f64 {
                        1.0 / self
                    }
                }
                impl<'a> Inv for &'a f32 {
                    type Output = f32;
                    #[inline] fn inv(self) -> f32 {
                        1.0 / *self
                    }
                }
                impl<'a> Inv for &'a f64 {
                    type Output = f64;
                    #[inline] fn inv(self) -> f64 {
                        1.0 / *self
                    }
                }
            }
            
            pub mod mul_add
            {
                /*!
                */
                use ::
                {
                    *,
                };
                /*
                */
                /// Fused multiply-add.
                pub trait MulAdd<A = Self, B = Self> 
                {
                    /// The resulting type after applying the fused multiply-add.
                    type Output;

                    /// Performs the fused multiply-add operation `(self * a) + b`
                    fn mul_add(self, a: A, b: B) -> Self::Output;
                }
                /// The fused multiply-add assignment operation `*self = (*self * a) + b`
                pub trait MulAddAssign<A = Self, B = Self> 
                {
                    /// Performs the fused multiply-add assignment operation `*self = (*self * a) + b`
                    fn mul_add_assign(&mut self, a: A, b: B);
                }
                
                impl MulAdd<f32, f32> for f32                    
                {
                    type Output = Self;

                    #[inline] fn mul_add(self, a: Self, b: Self) -> Self::Output {
                        <Self as ::num::traits::Float>::mul_add(self, a, b)
                    }
                }
                
                impl MulAdd<f64, f64> for f64
                {
                    type Output = Self;

                    #[inline] fn mul_add(self, a: Self, b: Self) -> Self::Output {
                        <Self as ::num::traits::Float>::mul_add(self, a, b)
                    }
                }
                macro_rules! mul_add_impl 
                {
                    ($trait_name:ident for $($t:ty)*) => {$(
                        impl $trait_name for $t {
                            type Output = Self;

                            #[inline]
                            fn mul_add(self, a: Self, b: Self) -> Self::Output {
                                (self * a) + b
                            }
                        }
                    )*}
                }
                mul_add_impl!(MulAdd for isize i8 i16 i32 i64 i128);
                mul_add_impl!(MulAdd for usize u8 u16 u32 u64 u128);
                
                impl MulAddAssign<f32, f32> for f32
                {
                    #[inline] fn mul_add_assign(&mut self, a: Self, b: Self) {
                        *self = <Self as ::num::traits::Float>::mul_add(*self, a, b)
                    }
                }
                
                impl MulAddAssign<f64, f64> for f64
                {
                    #[inline] fn mul_add_assign(&mut self, a: Self, b: Self) {
                        *self = <Self as ::num::traits::Float>::mul_add(*self, a, b)
                    }
                }
                macro_rules! mul_add_assign_impl
                {
                    ($trait_name:ident for $($t:ty)*) => {$(
                        impl $trait_name for $t {
                            #[inline]
                            fn mul_add_assign(&mut self, a: Self, b: Self) {
                                *self = (*self * a) + b
                            }
                        }
                    )*}
                }
                mul_add_assign_impl!(MulAddAssign for isize i8 i16 i32 i64 i128);
                mul_add_assign_impl!(MulAddAssign for usize u8 u16 u32 u64 u128);
            }
            
            pub mod overflowing
            {
                /*!
                */
                use ::
                {
                    ops::{Add, Mul, Sub},
                    *,
                };
                /*
                */
                macro_rules! overflowing_impl {
                    ($trait_name:ident, $method:ident, $t:ty) => {
                        impl $trait_name for $t {
                            #[inline]
                            fn $method(&self, v: &Self) -> (Self, bool) {
                                <$t>::$method(*self, *v)
                            }
                        }
                    };
                }
                /// Performs addition with a flag for overflow.
                pub trait OverflowingAdd: Sized + Add<Self, Output = Self> {
                    /// Returns a tuple of the sum along with a boolean indicating whether an arithmetic overflow would occur.
                    /// If an overflow would have occurred then the wrapped value is returned.
                    fn overflowing_add(&self, v: &Self) -> (Self, bool);
                }
                overflowing_impl!(OverflowingAdd, overflowing_add, u8);
                overflowing_impl!(OverflowingAdd, overflowing_add, u16);
                overflowing_impl!(OverflowingAdd, overflowing_add, u32);
                overflowing_impl!(OverflowingAdd, overflowing_add, u64);
                overflowing_impl!(OverflowingAdd, overflowing_add, usize);
                overflowing_impl!(OverflowingAdd, overflowing_add, u128);

                overflowing_impl!(OverflowingAdd, overflowing_add, i8);
                overflowing_impl!(OverflowingAdd, overflowing_add, i16);
                overflowing_impl!(OverflowingAdd, overflowing_add, i32);
                overflowing_impl!(OverflowingAdd, overflowing_add, i64);
                overflowing_impl!(OverflowingAdd, overflowing_add, isize);
                overflowing_impl!(OverflowingAdd, overflowing_add, i128);
                /// Performs substraction with a flag for overflow.
                pub trait OverflowingSub: Sized + Sub<Self, Output = Self> {
                    /// Returns a tuple of the difference along with a boolean indicating whether an arithmetic overflow would occur.
                    /// If an overflow would have occurred then the wrapped value is returned.
                    fn overflowing_sub(&self, v: &Self) -> (Self, bool);
                }
                overflowing_impl!(OverflowingSub, overflowing_sub, u8);
                overflowing_impl!(OverflowingSub, overflowing_sub, u16);
                overflowing_impl!(OverflowingSub, overflowing_sub, u32);
                overflowing_impl!(OverflowingSub, overflowing_sub, u64);
                overflowing_impl!(OverflowingSub, overflowing_sub, usize);
                overflowing_impl!(OverflowingSub, overflowing_sub, u128);

                overflowing_impl!(OverflowingSub, overflowing_sub, i8);
                overflowing_impl!(OverflowingSub, overflowing_sub, i16);
                overflowing_impl!(OverflowingSub, overflowing_sub, i32);
                overflowing_impl!(OverflowingSub, overflowing_sub, i64);
                overflowing_impl!(OverflowingSub, overflowing_sub, isize);
                overflowing_impl!(OverflowingSub, overflowing_sub, i128);
                /// Performs multiplication with a flag for overflow.
                pub trait OverflowingMul: Sized + Mul<Self, Output = Self> {
                    /// Returns a tuple of the product along with a boolean indicating whether an arithmetic overflow would occur.
                    /// If an overflow would have occurred then the wrapped value is returned.
                    fn overflowing_mul(&self, v: &Self) -> (Self, bool);
                }
                overflowing_impl!(OverflowingMul, overflowing_mul, u8);
                overflowing_impl!(OverflowingMul, overflowing_mul, u16);
                overflowing_impl!(OverflowingMul, overflowing_mul, u32);
                overflowing_impl!(OverflowingMul, overflowing_mul, u64);
                overflowing_impl!(OverflowingMul, overflowing_mul, usize);
                overflowing_impl!(OverflowingMul, overflowing_mul, u128);

                overflowing_impl!(OverflowingMul, overflowing_mul, i8);
                overflowing_impl!(OverflowingMul, overflowing_mul, i16);
                overflowing_impl!(OverflowingMul, overflowing_mul, i32);
                overflowing_impl!(OverflowingMul, overflowing_mul, i64);
                overflowing_impl!(OverflowingMul, overflowing_mul, isize);
                overflowing_impl!(OverflowingMul, overflowing_mul, i128);
            }
            
            pub mod saturating
            {
                /*!
                */
                use ::
                {
                    ops::{Add, Mul, Sub},
                    *,
                };
                /*
                */
                /// Saturating math operations. Deprecated.
                pub trait Saturating
                {
                    /// Saturating addition operator.
                    /// Returns a+b, saturating at the numeric bounds instead of overflowing.
                    fn saturating_add(self, v: Self) -> Self;

                    /// Saturating subtraction operator.
                    /// Returns a-b, saturating at the numeric bounds instead of overflowing.
                    fn saturating_sub(self, v: Self) -> Self;
                }
                macro_rules! deprecated_saturating_impl
                {
                    ($trait_name:ident for $($t:ty)*) => {$(
                        impl $trait_name for $t {
                            #[inline]
                            fn saturating_add(self, v: Self) -> Self {
                                Self::saturating_add(self, v)
                            }
                            #[inline]
                            fn saturating_sub(self, v: Self) -> Self {
                                Self::saturating_sub(self, v)
                            }
                        }
                    )*}
                }
                deprecated_saturating_impl!(Saturating for isize i8 i16 i32 i64 i128);
                deprecated_saturating_impl!(Saturating for usize u8 u16 u32 u64 u128);

                macro_rules! saturating_impl
                {
                    ($trait_name:ident, $method:ident, $t:ty) => {
                        impl $trait_name for $t {
                            #[inline]
                            fn $method(&self, v: &Self) -> Self {
                                <$t>::$method(*self, *v)
                            }
                        }
                    };
                }
                /// Performs addition that saturates at the numeric bounds instead of overflowing.
                pub trait SaturatingAdd: Sized + Add<Self, Output = Self>
                {
                    /// Saturating addition. Computes `self + other`, saturating at the relevant high or low boundary of
                    /// the type.
                    fn saturating_add(&self, v: &Self) -> Self;
                }
                saturating_impl!(SaturatingAdd, saturating_add, u8);
                saturating_impl!(SaturatingAdd, saturating_add, u16);
                saturating_impl!(SaturatingAdd, saturating_add, u32);
                saturating_impl!(SaturatingAdd, saturating_add, u64);
                saturating_impl!(SaturatingAdd, saturating_add, usize);
                saturating_impl!(SaturatingAdd, saturating_add, u128);

                saturating_impl!(SaturatingAdd, saturating_add, i8);
                saturating_impl!(SaturatingAdd, saturating_add, i16);
                saturating_impl!(SaturatingAdd, saturating_add, i32);
                saturating_impl!(SaturatingAdd, saturating_add, i64);
                saturating_impl!(SaturatingAdd, saturating_add, isize);
                saturating_impl!(SaturatingAdd, saturating_add, i128);
                /// Performs subtraction that saturates at the numeric bounds instead of overflowing.
                pub trait SaturatingSub: Sized + Sub<Self, Output = Self> 
                {
                    /// Saturating subtraction. Computes `self - other`, saturating at the relevant high or low boundary of
                    /// the type.
                    fn saturating_sub(&self, v: &Self) -> Self;
                }
                saturating_impl!(SaturatingSub, saturating_sub, u8);
                saturating_impl!(SaturatingSub, saturating_sub, u16);
                saturating_impl!(SaturatingSub, saturating_sub, u32);
                saturating_impl!(SaturatingSub, saturating_sub, u64);
                saturating_impl!(SaturatingSub, saturating_sub, usize);
                saturating_impl!(SaturatingSub, saturating_sub, u128);

                saturating_impl!(SaturatingSub, saturating_sub, i8);
                saturating_impl!(SaturatingSub, saturating_sub, i16);
                saturating_impl!(SaturatingSub, saturating_sub, i32);
                saturating_impl!(SaturatingSub, saturating_sub, i64);
                saturating_impl!(SaturatingSub, saturating_sub, isize);
                saturating_impl!(SaturatingSub, saturating_sub, i128);
                /// Performs multiplication that saturates at the numeric bounds instead of overflowing.
                pub trait SaturatingMul: Sized + Mul<Self, Output = Self> 
                {
                    /// Saturating multiplication. Computes `self * other`, saturating at the relevant high or low boundary of
                    /// the type.
                    fn saturating_mul(&self, v: &Self) -> Self;
                }
                saturating_impl!(SaturatingMul, saturating_mul, u8);
                saturating_impl!(SaturatingMul, saturating_mul, u16);
                saturating_impl!(SaturatingMul, saturating_mul, u32);
                saturating_impl!(SaturatingMul, saturating_mul, u64);
                saturating_impl!(SaturatingMul, saturating_mul, usize);
                saturating_impl!(SaturatingMul, saturating_mul, u128);

                saturating_impl!(SaturatingMul, saturating_mul, i8);
                saturating_impl!(SaturatingMul, saturating_mul, i16);
                saturating_impl!(SaturatingMul, saturating_mul, i32);
                saturating_impl!(SaturatingMul, saturating_mul, i64);
                saturating_impl!(SaturatingMul, saturating_mul, isize);
                saturating_impl!(SaturatingMul, saturating_mul, i128);
            }
            
            pub mod wrapping
            {
                /*!
                */
                use ::
                {
                    num::{ Wrapping },
                    ops::{ Add, Mul, Neg, Shl, Shr, Sub },
                    *,
                };
                /*
                */
                macro_rules! wrapping_impl
                {
                    ($trait_name:ident, $method:ident, $t:ty) => {
                        impl $trait_name for $t {
                            #[inline]
                            fn $method(&self, v: &Self) -> Self {
                                <$t>::$method(*self, *v)
                            }
                        }
                    };
                    ($trait_name:ident, $method:ident, $t:ty, $rhs:ty) => {
                        impl $trait_name<$rhs> for $t {
                            #[inline]
                            fn $method(&self, v: &$rhs) -> Self {
                                <$t>::$method(*self, *v)
                            }
                        }
                    };
                }
                /// Performs addition that wraps around on overflow.
                pub trait WrappingAdd: Sized + Add<Self, Output = Self>
                {
                    /// Wrapping (modular) addition. Computes `self + other`, wrapping around at the boundary of
                    /// the type.
                    fn wrapping_add(&self, v: &Self) -> Self;
                }
                wrapping_impl!(WrappingAdd, wrapping_add, u8);
                wrapping_impl!(WrappingAdd, wrapping_add, u16);
                wrapping_impl!(WrappingAdd, wrapping_add, u32);
                wrapping_impl!(WrappingAdd, wrapping_add, u64);
                wrapping_impl!(WrappingAdd, wrapping_add, usize);
                wrapping_impl!(WrappingAdd, wrapping_add, u128);

                wrapping_impl!(WrappingAdd, wrapping_add, i8);
                wrapping_impl!(WrappingAdd, wrapping_add, i16);
                wrapping_impl!(WrappingAdd, wrapping_add, i32);
                wrapping_impl!(WrappingAdd, wrapping_add, i64);
                wrapping_impl!(WrappingAdd, wrapping_add, isize);
                wrapping_impl!(WrappingAdd, wrapping_add, i128);
                /// Performs subtraction that wraps around on overflow.
                pub trait WrappingSub: Sized + Sub<Self, Output = Self>
                {
                    /// Wrapping (modular) subtraction. Computes `self - other`, wrapping around at the boundary
                    /// of the type.
                    fn wrapping_sub(&self, v: &Self) -> Self;
                }
                wrapping_impl!(WrappingSub, wrapping_sub, u8);
                wrapping_impl!(WrappingSub, wrapping_sub, u16);
                wrapping_impl!(WrappingSub, wrapping_sub, u32);
                wrapping_impl!(WrappingSub, wrapping_sub, u64);
                wrapping_impl!(WrappingSub, wrapping_sub, usize);
                wrapping_impl!(WrappingSub, wrapping_sub, u128);

                wrapping_impl!(WrappingSub, wrapping_sub, i8);
                wrapping_impl!(WrappingSub, wrapping_sub, i16);
                wrapping_impl!(WrappingSub, wrapping_sub, i32);
                wrapping_impl!(WrappingSub, wrapping_sub, i64);
                wrapping_impl!(WrappingSub, wrapping_sub, isize);
                wrapping_impl!(WrappingSub, wrapping_sub, i128);
                /// Performs multiplication that wraps around on overflow.
                pub trait WrappingMul: Sized + Mul<Self, Output = Self>
                {
                    /// Wrapping (modular) multiplication. Computes `self * other`, wrapping around at the boundary
                    /// of the type.
                    fn wrapping_mul(&self, v: &Self) -> Self;
                }
                wrapping_impl!(WrappingMul, wrapping_mul, u8);
                wrapping_impl!(WrappingMul, wrapping_mul, u16);
                wrapping_impl!(WrappingMul, wrapping_mul, u32);
                wrapping_impl!(WrappingMul, wrapping_mul, u64);
                wrapping_impl!(WrappingMul, wrapping_mul, usize);
                wrapping_impl!(WrappingMul, wrapping_mul, u128);

                wrapping_impl!(WrappingMul, wrapping_mul, i8);
                wrapping_impl!(WrappingMul, wrapping_mul, i16);
                wrapping_impl!(WrappingMul, wrapping_mul, i32);
                wrapping_impl!(WrappingMul, wrapping_mul, i64);
                wrapping_impl!(WrappingMul, wrapping_mul, isize);
                wrapping_impl!(WrappingMul, wrapping_mul, i128);

                macro_rules! wrapping_unary_impl 
                {
                    ($trait_name:ident, $method:ident, $t:ty) => {
                        impl $trait_name for $t {
                            #[inline]
                            fn $method(&self) -> $t {
                                <$t>::$method(*self)
                            }
                        }
                    };
                }
                /// Performs a negation that does not panic.
                pub trait WrappingNeg: Sized 
                {
                    /// Wrapping (modular) negation. Computes `-self`,
                    /// wrapping around at the boundary of the type.
                    ///
                    /// Since unsigned types do not have negative equivalents
                    /// all applications of this function will wrap (except for `-0`).
                    /// For values smaller than the corresponding signed type's maximum
                    /// the result is the same as casting the corresponding signed value.
                    /// Any larger values are equivalent to `MAX + 1 - (val - MAX - 1)` where
                    /// `MAX` is the corresponding signed type's maximum.
                    ///
                    /// ```
                    /// use ::num::traits::WrappingNeg;
                    ///
                    /// assert_eq!(100i8.wrapping_neg(), -100);
                    /// assert_eq!((-100i8).wrapping_neg(), 100);
                    /// assert_eq!((-128i8).wrapping_neg(), -128);
                    /// ```
                    fn wrapping_neg(&self) -> Self;
                }
                wrapping_unary_impl!(WrappingNeg, wrapping_neg, u8);
                wrapping_unary_impl!(WrappingNeg, wrapping_neg, u16);
                wrapping_unary_impl!(WrappingNeg, wrapping_neg, u32);
                wrapping_unary_impl!(WrappingNeg, wrapping_neg, u64);
                wrapping_unary_impl!(WrappingNeg, wrapping_neg, usize);
                wrapping_unary_impl!(WrappingNeg, wrapping_neg, u128);
                wrapping_unary_impl!(WrappingNeg, wrapping_neg, i8);
                wrapping_unary_impl!(WrappingNeg, wrapping_neg, i16);
                wrapping_unary_impl!(WrappingNeg, wrapping_neg, i32);
                wrapping_unary_impl!(WrappingNeg, wrapping_neg, i64);
                wrapping_unary_impl!(WrappingNeg, wrapping_neg, isize);
                wrapping_unary_impl!(WrappingNeg, wrapping_neg, i128);

                macro_rules! wrapping_shift_impl 
                {
                    ($trait_name:ident, $method:ident, $t:ty) => {
                        impl $trait_name for $t {
                            #[inline]
                            fn $method(&self, rhs: u32) -> $t {
                                <$t>::$method(*self, rhs)
                            }
                        }
                    };
                }
                /// Performs a left shift that does not panic.
                pub trait WrappingShl: Sized + Shl<usize, Output = Self> 
                {
                    /// Panic-free bitwise shift-left; yields `self << mask(rhs)`,
                    /// where `mask` removes any high order bits of `rhs` that would
                    /// cause the shift to exceed the bitwidth of the type.
                    ///
                    /// ```
                    /// use ::num::traits::WrappingShl;
                    ///
                    /// let x: u16 = 0x0001;
                    ///
                    /// assert_eq!(WrappingShl::wrapping_shl(&x, 0),  0x0001);
                    /// assert_eq!(WrappingShl::wrapping_shl(&x, 1),  0x0002);
                    /// assert_eq!(WrappingShl::wrapping_shl(&x, 15), 0x8000);
                    /// assert_eq!(WrappingShl::wrapping_shl(&x, 16), 0x0001);
                    /// ```
                    fn wrapping_shl(&self, rhs: u32) -> Self;
                }
                wrapping_shift_impl!(WrappingShl, wrapping_shl, u8);
                wrapping_shift_impl!(WrappingShl, wrapping_shl, u16);
                wrapping_shift_impl!(WrappingShl, wrapping_shl, u32);
                wrapping_shift_impl!(WrappingShl, wrapping_shl, u64);
                wrapping_shift_impl!(WrappingShl, wrapping_shl, usize);
                wrapping_shift_impl!(WrappingShl, wrapping_shl, u128);

                wrapping_shift_impl!(WrappingShl, wrapping_shl, i8);
                wrapping_shift_impl!(WrappingShl, wrapping_shl, i16);
                wrapping_shift_impl!(WrappingShl, wrapping_shl, i32);
                wrapping_shift_impl!(WrappingShl, wrapping_shl, i64);
                wrapping_shift_impl!(WrappingShl, wrapping_shl, isize);
                wrapping_shift_impl!(WrappingShl, wrapping_shl, i128);
                /// Performs a right shift that does not panic.
                pub trait WrappingShr: Sized + Shr<usize, Output = Self> 
                {
                    /// Panic-free bitwise shift-right; yields `self >> mask(rhs)`,
                    /// where `mask` removes any high order bits of `rhs` that would
                    /// cause the shift to exceed the bitwidth of the type.
                    ///
                    /// ```
                    /// use ::num::traits::WrappingShr;
                    ///
                    /// let x: u16 = 0x8000;
                    ///
                    /// assert_eq!(WrappingShr::wrapping_shr(&x, 0),  0x8000);
                    /// assert_eq!(WrappingShr::wrapping_shr(&x, 1),  0x4000);
                    /// assert_eq!(WrappingShr::wrapping_shr(&x, 15), 0x0001);
                    /// assert_eq!(WrappingShr::wrapping_shr(&x, 16), 0x8000);
                    /// ```
                    fn wrapping_shr(&self, rhs: u32) -> Self;
                }
                wrapping_shift_impl!(WrappingShr, wrapping_shr, u8);
                wrapping_shift_impl!(WrappingShr, wrapping_shr, u16);
                wrapping_shift_impl!(WrappingShr, wrapping_shr, u32);
                wrapping_shift_impl!(WrappingShr, wrapping_shr, u64);
                wrapping_shift_impl!(WrappingShr, wrapping_shr, usize);
                wrapping_shift_impl!(WrappingShr, wrapping_shr, u128);

                wrapping_shift_impl!(WrappingShr, wrapping_shr, i8);
                wrapping_shift_impl!(WrappingShr, wrapping_shr, i16);
                wrapping_shift_impl!(WrappingShr, wrapping_shr, i32);
                wrapping_shift_impl!(WrappingShr, wrapping_shr, i64);
                wrapping_shift_impl!(WrappingShr, wrapping_shr, isize);
                wrapping_shift_impl!(WrappingShr, wrapping_shr, i128);
               
                impl<T: WrappingAdd> WrappingAdd for Wrapping<T> where
                    Wrapping<T>: Add<Output = Wrapping<T>>,
                {
                    fn wrapping_add(&self, v: &Self) -> Self {
                        Wrapping(self.0.wrapping_add(&v.0))
                    }
                }
                
                impl<T: WrappingSub> WrappingSub for Wrapping<T> where
                    Wrapping<T>: Sub<Output = Wrapping<T>>,
                {
                    fn wrapping_sub(&self, v: &Self) -> Self {
                        Wrapping(self.0.wrapping_sub(&v.0))
                    }
                }
                impl<T: WrappingMul> WrappingMul for Wrapping<T> where
                    Wrapping<T>: Mul<Output = Wrapping<T>>,
                {
                    fn wrapping_mul(&self, v: &Self) -> Self {
                        Wrapping(self.0.wrapping_mul(&v.0))
                    }
                }
                impl<T: WrappingNeg> WrappingNeg for Wrapping<T> where
                    Wrapping<T>: Neg<Output = Wrapping<T>>,
                {
                    fn wrapping_neg(&self) -> Self {
                        Wrapping(self.0.wrapping_neg())
                    }
                }
                impl<T: WrappingShl> WrappingShl for Wrapping<T> where
                    Wrapping<T>: Shl<usize, Output = Wrapping<T>>,
                {
                    fn wrapping_shl(&self, rhs: u32) -> Self {
                        Wrapping(self.0.wrapping_shl(rhs))
                    }
                }
                impl<T: WrappingShr> WrappingShr for Wrapping<T> where
                    Wrapping<T>: Shr<usize, Output = Wrapping<T>>,
                {
                    fn wrapping_shr(&self, rhs: u32) -> Self {
                        Wrapping(self.0.wrapping_shr(rhs))
                    }
                }
            }
        } pub use self::ops::
        {
            bytes::{ FromBytes, ToBytes },
            checked::{ CheckedAdd, CheckedDiv, CheckedMul, CheckedNeg, CheckedRem, CheckedShl, CheckedShr, CheckedSub },
            euclid::{ CheckedEuclid, Euclid },
            inv::{ Inv },
            mul_add::{ MulAdd, MulAddAssign },
            saturating::{ Saturating, SaturatingAdd, SaturatingMul, SaturatingSub },
            wrapping::{ WrappingAdd, WrappingMul, WrappingNeg, WrappingShl, WrappingShr, WrappingSub },
        };

        pub mod pow
        {
            use ::
            {
                num::
                {
                    traits::{ CheckedMul, One, Float }, Wrapping
                },
                ops::{ Mul },
                *,
            };
            /*
            */
            /// Binary operator for raising a value to a power.
            pub trait Pow<RHS>
            {
                /// The result after applying the operator.
                type Output;
                /// Returns `self` to the power `rhs`.
                fn pow(self, rhs: RHS) -> Self::Output;
            }
            macro_rules! pow_impl {
                ($t:ty) =>
                {
                    pow_impl!($t, u8);
                    pow_impl!($t, usize);
                };
                ($t:ty, $rhs:ty) => {
                    pow_impl!($t, $rhs, usize, pow);
                };
                ($t:ty, $rhs:ty, $desired_rhs:ty, $method:expr) => {
                    impl Pow<$rhs> for $t {
                        type Output = $t;
                        #[inline]
                        fn pow(self, rhs: $rhs) -> $t {
                            ($method)(self, <$desired_rhs>::from(rhs))
                        }
                    }
                    impl<'a> Pow<&'a $rhs> for $t {
                        type Output = $t;
                        #[inline]
                        fn pow(self, rhs: &'a $rhs) -> $t {
                            ($method)(self, <$desired_rhs>::from(*rhs))
                        }
                    }
                    impl<'a> Pow<$rhs> for &'a $t {
                        type Output = $t;
                        #[inline]
                        fn pow(self, rhs: $rhs) -> $t {
                            ($method)(*self, <$desired_rhs>::from(rhs))
                        }
                    }
                    impl<'a, 'b> Pow<&'a $rhs> for &'b $t {
                        type Output = $t;
                        #[inline]
                        fn pow(self, rhs: &'a $rhs) -> $t {
                            ($method)(*self, <$desired_rhs>::from(*rhs))
                        }
                    }
                };
            }
            pow_impl!(u8, u8, u32, u8::pow);
            pow_impl!(u8, u16, u32, u8::pow);
            pow_impl!(u8, u32, u32, u8::pow);
            pow_impl!(u8, usize);
            pow_impl!(i8, u8, u32, i8::pow);
            pow_impl!(i8, u16, u32, i8::pow);
            pow_impl!(i8, u32, u32, i8::pow);
            pow_impl!(i8, usize);
            pow_impl!(u16, u8, u32, u16::pow);
            pow_impl!(u16, u16, u32, u16::pow);
            pow_impl!(u16, u32, u32, u16::pow);
            pow_impl!(u16, usize);
            pow_impl!(i16, u8, u32, i16::pow);
            pow_impl!(i16, u16, u32, i16::pow);
            pow_impl!(i16, u32, u32, i16::pow);
            pow_impl!(i16, usize);
            pow_impl!(u32, u8, u32, u32::pow);
            pow_impl!(u32, u16, u32, u32::pow);
            pow_impl!(u32, u32, u32, u32::pow);
            pow_impl!(u32, usize);
            pow_impl!(i32, u8, u32, i32::pow);
            pow_impl!(i32, u16, u32, i32::pow);
            pow_impl!(i32, u32, u32, i32::pow);
            pow_impl!(i32, usize);
            pow_impl!(u64, u8, u32, u64::pow);
            pow_impl!(u64, u16, u32, u64::pow);
            pow_impl!(u64, u32, u32, u64::pow);
            pow_impl!(u64, usize);
            pow_impl!(i64, u8, u32, i64::pow);
            pow_impl!(i64, u16, u32, i64::pow);
            pow_impl!(i64, u32, u32, i64::pow);
            pow_impl!(i64, usize);

            pow_impl!(u128, u8, u32, u128::pow);
            pow_impl!(u128, u16, u32, u128::pow);
            pow_impl!(u128, u32, u32, u128::pow);
            pow_impl!(u128, usize);

            pow_impl!(i128, u8, u32, i128::pow);
            pow_impl!(i128, u16, u32, i128::pow);
            pow_impl!(i128, u32, u32, i128::pow);
            pow_impl!(i128, usize);

            pow_impl!(usize, u8, u32, usize::pow);
            pow_impl!(usize, u16, u32, usize::pow);
            pow_impl!(usize, u32, u32, usize::pow);
            pow_impl!(usize, usize);
            pow_impl!(isize, u8, u32, isize::pow);
            pow_impl!(isize, u16, u32, isize::pow);
            pow_impl!(isize, u32, u32, isize::pow);
            pow_impl!(isize, usize);
            pow_impl!(Wrapping<u8>);
            pow_impl!(Wrapping<i8>);
            pow_impl!(Wrapping<u16>);
            pow_impl!(Wrapping<i16>);
            pow_impl!(Wrapping<u32>);
            pow_impl!(Wrapping<i32>);
            pow_impl!(Wrapping<u64>);
            pow_impl!(Wrapping<i64>);
            pow_impl!(Wrapping<u128>);
            pow_impl!(Wrapping<i128>);
            pow_impl!(Wrapping<usize>);
            pow_impl!(Wrapping<isize>);

            pow_impl!(f32, i8, i32, <f32 as Float>::powi);
            pow_impl!(f32, u8, i32, <f32 as Float>::powi);
            pow_impl!(f32, i16, i32, <f32 as Float>::powi);
            pow_impl!(f32, u16, i32, <f32 as Float>::powi);
            pow_impl!(f32, i32, i32, <f32 as Float>::powi);
            pow_impl!(f64, i8, i32, <f64 as Float>::powi);
            pow_impl!(f64, u8, i32, <f64 as Float>::powi);
            pow_impl!(f64, i16, i32, <f64 as Float>::powi);
            pow_impl!(f64, u16, i32, <f64 as Float>::powi);
            pow_impl!(f64, i32, i32, <f64 as Float>::powi);
            pow_impl!(f32, f32, f32, <f32 as Float>::powf);
            pow_impl!(f64, f32, f64, <f64 as Float>::powf);
            pow_impl!(f64, f64, f64, <f64 as Float>::powf);            
            /// Raises a value to the power of exp, using exponentiation by squaring.
            #[inline] pub fn pow<T: Clone + One + Mul<T, Output = T>>(mut base: T, mut exp: usize) -> T 
            {
                if exp == 0 {
                    return T::one();
                }
                while exp & 1 == 0 {
                    base = base.clone() * base;
                    exp >>= 1;
                }
                if exp == 1 {
                    return base;
                }
                let mut acc = base.clone();
                while exp > 1 {
                    exp >>= 1;
                    base = base.clone() * base;
                    if exp & 1 == 1 {
                        acc = acc * base.clone();
                    }
                }
                acc
            }
            /// Raises a value to the power of exp, returning `None` if an overflow occurred.
            #[inline] pub fn checked_pow<T: Clone + One + CheckedMul>(mut base: T, mut exp: usize) -> Option<T> 
            {
                if exp == 0 {
                    return Some(T::one());
                }
                while exp & 1 == 0 {
                    base = base.checked_mul(&base)?;
                    exp >>= 1;
                }
                if exp == 1 {
                    return Some(base);
                }
                let mut acc = base.clone();
                while exp > 1 {
                    exp >>= 1;
                    base = base.checked_mul(&base)?;
                    if exp & 1 == 1 {
                        acc = acc.checked_mul(&base)?;
                    }
                }
                Some(acc)
            }

        } pub use self::pow::{checked_pow, pow, Pow};

        pub mod real
        {
            use ::
            {
                num::traits::{Float, Num, NumCast},
                ops::{ Neg },
                *,
            };
            /*
            */
            /// A trait for real number types that do not necessarily have
            /// floating-point-specific characteristics such as NaN and infinity.
            pub trait Real: Num + Copy + NumCast + PartialOrd + Neg<Output = Self>
            {
                /// Returns the smallest finite value that this type can represent.
                fn min_value() -> Self;
                /// Returns the smallest positive, normalized value that this type can represent.
                fn min_positive_value() -> Self;
                /// Returns epsilon, a small positive value.
                fn epsilon() -> Self;
                /// Returns the largest finite value that this type can represent.
                fn max_value() -> Self;
                /// Returns the largest integer less than or equal to a number.
                fn floor(self) -> Self;
                /// Returns the smallest integer greater than or equal to a number.
                fn ceil(self) -> Self;
                /// Returns the nearest integer to a number.
                fn round(self) -> Self;
                /// Return the integer part of a number.
                fn trunc(self) -> Self;
                /// Returns the fractional part of a number.
                fn fract(self) -> Self;
                /// Computes the absolute value of `self`.
                fn abs(self) -> Self;
                /// Returns a number that represents the sign of `self`.
                fn signum(self) -> Self;
                /// Returns `true` if `self` is positive, including `+0.0`,
                /// `Float::infinity()`, and with newer versions of Rust `f64::NAN`.
                fn is_sign_positive(self) -> bool;
                /// Returns `true` if `self` is negative, including `-0.0`,
                /// `Float::neg_infinity()`, and with newer versions of Rust `-f64::NAN`.
                fn is_sign_negative(self) -> bool;
                /// Fused multiply-add.
                fn mul_add(self, a: Self, b: Self) -> Self;
                /// Take the reciprocal (inverse) of a number, `1/x`.
                fn recip(self) -> Self;
                /// Raise a number to an integer power.
                fn powi(self, n: i32) -> Self;
                /// Raise a number to a real number power.
                fn powf(self, n: Self) -> Self;
                /// Take the square root of a number.
                fn sqrt(self) -> Self;
                /// Returns `e^(self)`, (the exponential function).
                fn exp(self) -> Self;
                /// Returns `2^(self)`.
                fn exp2(self) -> Self;
                /// Returns the natural logarithm of the number.
                fn ln(self) -> Self;
                /// Returns the logarithm of the number with respect to an arbitrary base.
                fn log(self, base: Self) -> Self;
                /// Returns the base 2 logarithm of the number.
                fn log2(self) -> Self;
                /// Returns the base 10 logarithm of the number.
                fn log10(self) -> Self;
                /// Converts radians to degrees.
                fn to_degrees(self) -> Self;
                /// Converts degrees to radians.
                fn to_radians(self) -> Self;
                /// Returns the maximum of the two numbers.
                fn max(self, other: Self) -> Self;
                /// Returns the minimum of the two numbers.
                fn min(self, other: Self) -> Self;
                /// The positive difference of two numbers.
                fn abs_sub(self, other: Self) -> Self;
                /// Take the cubic root of a number.
                fn cbrt(self) -> Self;
                /// Calculate the length of the hypotenuse of a right-angle triangle given legs of length `x` and `y`.
                fn hypot(self, other: Self) -> Self;
                /// Computes the sine of a number (in radians).
                fn sin(self) -> Self;
                /// Computes the cosine of a number (in radians).
                fn cos(self) -> Self;
                /// Computes the tangent of a number (in radians).
                fn tan(self) -> Self;
                /// Computes the arcsine of a number.
                fn asin(self) -> Self;
                /// Computes the arccosine of a number.
                fn acos(self) -> Self;
                /// Computes the arctangent of a number.
                fn atan(self) -> Self;
                /// Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).
                fn atan2(self, other: Self) -> Self;
                /// Simultaneously computes the sine and cosine of the number, `x`.
                fn sin_cos(self) -> (Self, Self);
                /// Returns `e^(self) - 1` in a way that is accurate even if the number is close to zero.
                fn exp_m1(self) -> Self;
                /// Returns `ln(1+n)` more accurately than if the operations were performed separately.
                fn ln_1p(self) -> Self;
                /// Hyperbolic sine function.
                fn sinh(self) -> Self;
                /// Hyperbolic cosine function.
                fn cosh(self) -> Self;
                /// Hyperbolic tangent function.
                fn tanh(self) -> Self;
                /// Inverse hyperbolic sine function.
                fn asinh(self) -> Self;
                /// Inverse hyperbolic cosine function.
                fn acosh(self) -> Self;
                /// Inverse hyperbolic tangent function.
                fn atanh(self) -> Self;
            }
            
            impl<T: Float> Real for T
            {
                forward! {
                    Float::min_value() -> Self;
                    Float::min_positive_value() -> Self;
                    Float::epsilon() -> Self;
                    Float::max_value() -> Self;
                }
                forward! {
                    Float::floor(self) -> Self;
                    Float::ceil(self) -> Self;
                    Float::round(self) -> Self;
                    Float::trunc(self) -> Self;
                    Float::fract(self) -> Self;
                    Float::abs(self) -> Self;
                    Float::signum(self) -> Self;
                    Float::is_sign_positive(self) -> bool;
                    Float::is_sign_negative(self) -> bool;
                    Float::mul_add(self, a: Self, b: Self) -> Self;
                    Float::recip(self) -> Self;
                    Float::powi(self, n: i32) -> Self;
                    Float::powf(self, n: Self) -> Self;
                    Float::sqrt(self) -> Self;
                    Float::exp(self) -> Self;
                    Float::exp2(self) -> Self;
                    Float::ln(self) -> Self;
                    Float::log(self, base: Self) -> Self;
                    Float::log2(self) -> Self;
                    Float::log10(self) -> Self;
                    Float::to_degrees(self) -> Self;
                    Float::to_radians(self) -> Self;
                    Float::max(self, other: Self) -> Self;
                    Float::min(self, other: Self) -> Self;
                    Float::abs_sub(self, other: Self) -> Self;
                    Float::cbrt(self) -> Self;
                    Float::hypot(self, other: Self) -> Self;
                    Float::sin(self) -> Self;
                    Float::cos(self) -> Self;
                    Float::tan(self) -> Self;
                    Float::asin(self) -> Self;
                    Float::acos(self) -> Self;
                    Float::atan(self) -> Self;
                    Float::atan2(self, other: Self) -> Self;
                    Float::sin_cos(self) -> (Self, Self);
                    Float::exp_m1(self) -> Self;
                    Float::ln_1p(self) -> Self;
                    Float::sinh(self) -> Self;
                    Float::cosh(self) -> Self;
                    Float::tanh(self) -> Self;
                    Float::asinh(self) -> Self;
                    Float::acosh(self) -> Self;
                    Float::atanh(self) -> Self;
                }
            }
        }

        pub mod sign
        {
            use ::
            {
                num::
                {
                    traits::{ float::{ Float, FloatCore }, Num }, Wrapping
                },
                ops::{ Neg },
                *,
            };
            /*
            */
            /// Useful functions for signed numbers (i.e. numbers that can be negative).
            pub trait Signed: Sized + Num + Neg<Output = Self>
            {
                /// Computes the absolute value.
                fn abs(&self) -> Self;
                /// The positive difference of two numbers.
                fn abs_sub(&self, other: &Self) -> Self;
                /// Returns the sign of the number.
                /// * `-1` if the number is negative
                fn signum(&self) -> Self;
                /// Returns true if the number is positive and false if the number is zero or negative.
                fn is_positive(&self) -> bool;
                /// Returns true if the number is negative and false if the number is zero or positive.
                fn is_negative(&self) -> bool;
            }
            macro_rules! signed_impl {
                ($($t:ty)*) => ($(
                    impl Signed for $t {
                        #[inline]
                        fn abs(&self) -> $t {
                            if self.is_negative() { -*self } else { *self }
                        }
                        #[inline]
                        fn abs_sub(&self, other: &$t) -> $t {
                            if *self <= *other { 0 } else { *self - *other }
                        }
                        #[inline]
                        fn signum(&self) -> $t {
                            match *self {
                                n if n > 0 => 1,
                                0 => 0,
                                _ => -1,
                            }
                        }
                        #[inline]
                        fn is_positive(&self) -> bool { *self > 0 }
                        #[inline]
                        fn is_negative(&self) -> bool { *self < 0 }
                    }
                )*)
            }
            signed_impl!(isize i8 i16 i32 i64 i128);

            impl<T: Signed> Signed for Wrapping<T> where
                Wrapping<T>: Num + Neg<Output = Wrapping<T>>,
            {
                #[inline] fn abs(&self) -> Self {
                    Wrapping(self.0.abs())
                }
                #[inline] fn abs_sub(&self, other: &Self) -> Self {
                    Wrapping(self.0.abs_sub(&other.0))
                }
                #[inline] fn signum(&self) -> Self {
                    Wrapping(self.0.signum())
                }
                #[inline] fn is_positive(&self) -> bool {
                    self.0.is_positive()
                }
                #[inline] fn is_negative(&self) -> bool {
                    self.0.is_negative()
                }
            }
            macro_rules! signed_float_impl {
                ($t:ty) => {
                    impl Signed for $t {
                        /// Computes the absolute value. Returns `NAN` if the number is `NAN`.
                        #[inline]
                        fn abs(&self) -> $t {
                            Float::abs(*self)
                        }
                        /// The positive difference of two numbers. Returns `0.0` if the number is
                        /// less than or equal to `other`, otherwise the difference between`self`
                        /// and `other` is returned.
                        #[inline]
                        fn abs_sub(&self, other: &$t) -> $t {
                            if *self <= *other {
                                0.
                            } else {
                                *self - *other
                            }
                        }
                        /// # Returns
                        ///
                        /// - `1.0` if the number is positive, `+0.0` or `INFINITY`
                        /// - `-1.0` if the number is negative, `-0.0` or `NEG_INFINITY`
                        /// - `NAN` if the number is NaN
                        #[inline]
                        fn signum(&self) -> $t {
                            Float::signum(*self)
                        }
                        /// Returns `true` if the number is positive, including `+0.0` and `INFINITY`
                        #[inline]
                        fn is_positive(&self) -> bool {
                            Float::is_sign_positive(*self)
                        }
                        /// Returns `true` if the number is negative, including `-0.0` and `NEG_INFINITY`
                        #[inline]
                        fn is_negative(&self) -> bool {
                            Float::is_sign_negative(*self)
                        }
                    }
                };
            }
            signed_float_impl!(f32);
            signed_float_impl!(f64);
            /// Computes the absolute value.
            #[inline( always )] pub fn abs<T: Signed>(value: T) -> T {
                value.abs()
            }
            /// The positive difference of two numbers.
            #[inline( always )] pub fn abs_sub<T: Signed>(x: T, y: T) -> T {
                x.abs_sub(&y)
            }
            /// Returns the sign of the number.
            #[inline( always )] pub fn signum<T: Signed>(value: T) -> T {
                value.signum()
            }
            /// A trait for values which cannot be negative
            pub trait Unsigned: Num {}
            macro_rules! empty_trait_impl
            {
                ($name:ident for $($t:ty)*) => ($(
                    impl $name for $t {}
                )*)
            }
            empty_trait_impl!(Unsigned for usize u8 u16 u32 u64 u128);

            impl<T: Unsigned> Unsigned for Wrapping<T> where Wrapping<T>: Num {}
        } pub use self::sign::{abs, abs_sub, signum, Signed, Unsigned};
        /// The base trait for numeric types, covering `0` and `1` values,
        /// comparisons, basic numeric operations, and string conversion.
        pub trait Num: PartialEq + Zero + One + NumOps
        {
            type FromStrRadixErr;

            /// Convert from a string and radix (typically `2..=36`).
            /// use ::num::traits::Num;
            ///
            /// let result = <i32 as Num>::from_str_radix("27", 10);
            /// assert_eq!(result, Ok(27));
            ///
            /// let result = <i32 as Num>::from_str_radix("foo", 10);
            /// assert!(result.is_err());
            /// ```
            ///
            /// # Supported radices
            ///
            /// The exact range of supported radices is at the discretion of each type implementation. For
            /// primitive integers, this is implemented by the inherent `from_str_radix` methods in the
            /// standard library, which **panic** if the radix is not in the range from 2 to 36. The
            /// implementation in this crate for primitive floats is similar.
            /// It's possible that a type might not even support the common radix 10, nor any, if string
            /// parsing doesn't make sense for that type.
            fn from_str_radix(str: &str, radix: u32) -> Result<Self, Self::FromStrRadixErr>;
        }
        /// Generic trait for types implementing basic numeric operations.
        pub trait NumOps<Rhs = Self, Output = Self>:
            Add<Rhs, Output = Output>
            + Sub<Rhs, Output = Output>
            + Mul<Rhs, Output = Output>
            + Div<Rhs, Output = Output>
            + Rem<Rhs, Output = Output>
        {
        }

        impl<T, Rhs, Output> NumOps<Rhs, Output> for T where
            T: Add<Rhs, Output = Output>
                + Sub<Rhs, Output = Output>
                + Mul<Rhs, Output = Output>
                + Div<Rhs, Output = Output>
                + Rem<Rhs, Output = Output>
        {
        }
        /// The trait for `Num` types which also implement numeric operations taking the second operand by reference.
        pub trait NumRef: Num + for<'r> NumOps<&'r Self> {}
        impl<T> NumRef for T where T: Num + for<'r> NumOps<&'r T> {}
        /// Trait for `Num` references which implement numeric operations, taking the second operand either by value or by reference.
        pub trait RefNum<Base>: NumOps<Base, Base> + for<'r> NumOps<&'r Base, Base> {}
        impl<T, Base> RefNum<Base> for T where T: NumOps<Base, Base> + for<'r> NumOps<&'r Base, Base> {}
        /// Generic trait for types implementing numeric assignment operators (like `+=`).
        pub trait NumAssignOps<Rhs = Self>:
        AddAssign<Rhs> + SubAssign<Rhs> + MulAssign<Rhs> + DivAssign<Rhs> + RemAssign<Rhs>
        {
        }

        impl<T, Rhs> NumAssignOps<Rhs> for T where
            T: AddAssign<Rhs> + SubAssign<Rhs> + MulAssign<Rhs> + DivAssign<Rhs> + RemAssign<Rhs>
        {
        }
        /// The trait for `Num` types which also implement assignment operators.
        pub trait NumAssign: Num + NumAssignOps {}
        impl<T> NumAssign for T where T: Num + NumAssignOps {}
        /// Trait for `NumAssign` types which also implement assignment operations taking the second operand by reference.
        pub trait NumAssignRef: NumAssign + for<'r> NumAssignOps<&'r Self> {}
        impl<T> NumAssignRef for T where T: NumAssign + for<'r> NumAssignOps<&'r T> {}

        macro_rules! int_trait_impl
        {
            ($name:ident for $($t:ty)*) => ($(
                impl $name for $t {
                    type FromStrRadixErr = ::num::ParseIntError;
                    #[inline] fn from_str_radix(s: &str, radix: u32)
                                    -> Result<Self, ::num::ParseIntError>
                    {
                        <$t>::from_str_radix(s, radix)
                    }
                }
            )*)
        }

        int_trait_impl!(Num for usize u8 u16 u32 u64 u128);
        int_trait_impl!(Num for isize i8 i16 i32 i64 i128);

        impl<T: Num> Num for Wrapping<T> where
            Wrapping<T>: NumOps,
        {
            type FromStrRadixErr = T::FromStrRadixErr;
            fn from_str_radix(str: &str, radix: u32) -> Result<Self, Self::FromStrRadixErr> {
                T::from_str_radix(str, radix).map(Wrapping)
            }
        }
        
        #[derive(Debug)]
        pub enum FloatErrorKind
        {
            Empty,
            Invalid,
        }
        
        #[derive(Debug)]
        pub struct ParseFloatError
        {
            pub kind: FloatErrorKind,
        }

        impl fmt::Display for ParseFloatError
        {
            fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result
                {let description = match self.kind {
                    FloatErrorKind::Empty => "cannot parse float from empty string",
                    FloatErrorKind::Invalid => "invalid float literal",
                };

                description.fmt(f)
            }
        }

        fn str_to_ascii_lower_eq_str(a: &str, b: &str) -> bool
        {
            a.len() == b.len()
                && a.bytes().zip(b.bytes()).all(|(a, b)| {
                    let a_to_ascii_lower = a | (((b'A' <= a && a <= b'Z') as u8) << 5);
                    a_to_ascii_lower == b
                })
        }
        
        macro_rules! float_trait_impl
        {
            ($name:ident for $($t:ident)*) => ($(
                impl $name for $t {
                    type FromStrRadixErr = ParseFloatError;

                    fn from_str_radix(src: &str, radix: u32)
                                    -> Result<Self, Self::FromStrRadixErr>
                    {
                        use self::FloatErrorKind::*;
                        use self::ParseFloatError as PFE;

                       
                        if radix == 10 {
                            return src.parse().map_err(|_| PFE {
                                kind: if src.is_empty() { Empty } else { Invalid },
                            });
                        }
                       
                        if str_to_ascii_lower_eq_str(src, "inf")
                            || str_to_ascii_lower_eq_str(src, "infinity")
                        {
                            return Ok(::$t::INFINITY);
                        } else if str_to_ascii_lower_eq_str(src, "-inf")
                            || str_to_ascii_lower_eq_str(src, "-infinity")
                        {
                            return Ok(::$t::NEG_INFINITY);
                        } else if str_to_ascii_lower_eq_str(src, "nan") {
                            return Ok(::$t::NAN);
                        } else if str_to_ascii_lower_eq_str(src, "-nan") {
                            return Ok(-::$t::NAN);
                        }
                        fn slice_shift_char(src: &str) -> Option<(char, &str)> {
                            let mut chars = src.chars();
                            Some((chars.next()?, chars.as_str()))
                        }
                        let (is_positive, src) =  match slice_shift_char(src) {
                            None             => return Err(PFE { kind: Empty }),
                            Some(('-', ""))  => return Err(PFE { kind: Empty }),
                            Some(('-', src)) => (false, src),
                            Some((_, _))     => (true,  src),
                        };

                       
                        let mut sig = if is_positive { 0.0 } else { -0.0 };
                       
                        let mut prev_sig = sig;
                        let mut cs = src.chars().enumerate();
                       
                        let mut exp_info = None::<(char, usize)>;

                       
                        for (i, c) in cs.by_ref() {
                            match c.to_digit(radix) {
                                Some(digit) => {
                                   
                                    sig *= radix as $t;

                                   
                                    if is_positive {
                                        sig += (digit as isize) as $t;
                                    } else {
                                        sig -= (digit as isize) as $t;
                                    }
                                   
                                   
                                    if prev_sig != 0.0 {
                                        if is_positive && sig <= prev_sig
                                            { return Ok(::$t::INFINITY); }
                                        if !is_positive && sig >= prev_sig
                                            { return Ok(::$t::NEG_INFINITY); }
                                       
                                        if is_positive && (prev_sig != (sig - digit as $t) / radix as $t)
                                            { return Ok(::$t::INFINITY); }
                                        if !is_positive && (prev_sig != (sig + digit as $t) / radix as $t)
                                            { return Ok(::$t::NEG_INFINITY); }
                                    }
                                    prev_sig = sig;
                                },
                                None => match c {
                                    'e' | 'E' | 'p' | 'P' => {
                                        exp_info = Some((c, i + 1));
                                        break; 
                                    },
                                    '.' => {
                                        break; 
                                    },
                                    _ => {
                                        return Err(PFE { kind: Invalid });
                                    },
                                },
                            }
                        }
                       
                       
                        if exp_info.is_none() {
                            let mut power = 1.0;
                            for (i, c) in cs.by_ref() {
                                match c.to_digit(radix) {
                                    Some(digit) => {
                                       
                                        power /= radix as $t;
                                       
                                        sig = if is_positive {
                                            sig + (digit as $t) * power
                                        } else {
                                            sig - (digit as $t) * power
                                        };
                                       
                                        if is_positive && sig < prev_sig
                                            { return Ok(::$t::INFINITY); }
                                        if !is_positive && sig > prev_sig
                                            { return Ok(::$t::NEG_INFINITY); }
                                        prev_sig = sig;
                                    },
                                    None => match c {
                                        'e' | 'E' | 'p' | 'P' => {
                                            exp_info = Some((c, i + 1));
                                            break;
                                        },
                                        _ => {
                                            return Err(PFE { kind: Invalid });
                                        },
                                    },
                                }
                            }
                        }
                       
                        let exp = match exp_info {
                            Some((c, offset)) => {
                                let base = match c {
                                    'E' | 'e' if radix == 10 => 10.0,
                                    'P' | 'p' if radix == 16 => 2.0,
                                    _ => return Err(PFE { kind: Invalid }),
                                };

                               
                                let src = &src[offset..];
                                let (is_positive, exp) = match slice_shift_char(src) {
                                    Some(('-', src)) => (false, src.parse::<usize>()),
                                    Some(('+', src)) => (true,  src.parse::<usize>()),
                                    Some((_, _))     => (true,  src.parse::<usize>()),
                                    None             => return Err(PFE { kind: Invalid }),
                                };

                                                    fn pow(base: $t, exp: usize) -> $t {
                                    Float::powi(base, exp as i32)
                                }
                               

                                match (is_positive, exp) {
                                    (true,  Ok(exp)) => pow(base, exp),
                                    (false, Ok(exp)) => 1.0 / pow(base, exp),
                                    (_, Err(_))      => return Err(PFE { kind: Invalid }),
                                }
                            },
                            None => 1.0,
                        };

                        Ok(sig * exp)
                    }
                }
            )*)
        }
        
        float_trait_impl!(Num for f32 f64);
        /// A value bounded by a minimum and a maximum
        #[inline] pub fn clamp<T: PartialOrd>(input: T, min: T, max: T) -> T
        {
            debug_assert!(min <= max, "min must be less than or equal to max");
            if input < min {
                min
            } else if input > max {
                max
            } else {
                input
            }
        }
        /// A value bounded by a minimum value
        #[inline] pub fn clamp_min<T: PartialOrd>(input: T, min: T) -> T
        {
            debug_assert!(min == min, "min must not be NAN");
            if input < min {
                min
            } else {
                input
            }
        }
        /// A value bounded by a maximum value
        #[inline] pub fn clamp_max<T: PartialOrd>(input: T, max: T) -> T
        {
            debug_assert!(max == max, "max must not be NAN");
            if input > max {
                max
            } else {
                input
            }
        }
    }
    /*
    */
    pub mod integers
    {
        //! Integer trait and functions.
        use ::
        {
            num::{ traits::{ Num, Signed, Zero } },
            ops::{ Add },
            *,
        };
        /*
        */
        pub mod average
        {
            /*!
            */
            use ::
            {
                num::integers::{ Integer },
                ops::{BitAnd, BitOr, BitXor, Shr},
                *,
            };
            /*
            */
            /// Provides methods to compute the average of two integers, without overflows.
            pub trait Average: Integer {
                /// Returns the ceiling value of the average of `self` and `other`. assert_eq!(u8::max_value().average_ceil(&2), 129);
                /// assert_eq!(i8::min_value().average_ceil(&-1), -64);
                /// assert_eq!(i8::min_value().average_ceil(&i8::max_value()), 0);
                /// ```
                ///
                fn average_ceil(&self, other: &Self) -> Self;
                /// Returns the floor value of the average of `self` and `other`. assert_eq!(u8::max_value().average_floor(&2), 128);
                /// assert_eq!(i8::min_value().average_floor(&-1), -65);
                /// assert_eq!(i8::min_value().average_floor(&i8::max_value()), -1);
                /// ```
                ///
                fn average_floor(&self, other: &Self) -> Self;
            }
            
            impl<I> Average for I
            where
                I: Integer + Shr<usize, Output = I>,
                for<'a, 'b> &'a I:
                    BitAnd<&'b I, Output = I> + BitOr<&'b I, Output = I> + BitXor<&'b I, Output = I>,
            {
               
               

                /// Returns the floor value of the average of `self` and `other`.
                #[inline] fn average_floor(&self, other: &I) -> I {
                    (self & other) + ((self ^ other) >> 1)
                }
                /// Returns the ceil value of the average of `self` and `other`.
                #[inline] fn average_ceil(&self, other: &I) -> I {
                    (self | other) - ((self ^ other) >> 1)
                }
            }
            /// Returns the floor value of the average of `x` and `y` --
            /// see [Average::average_floor](trait.Average.html#tymethod.average_floor).
            #[inline] pub fn average_floor<T: Average>(x: T, y: T) -> T {
                x.average_floor(&y)
            }
            /// Returns the ceiling value of the average of `x` and `y` --
            /// see [Average::average_ceil](trait.Average.html#tymethod.average_ceil).
            #[inline] pub fn average_ceil<T: Average>(x: T, y: T) -> T {
                x.average_ceil(&y)
            }
        } pub use self::average::{average_ceil, average_floor, Average};

        pub mod roots
        {
            /*!
            */
            use ::
            {
                num::
                {
                    traits::{checked_pow, PrimInt},
                    integers::{ Integer },
                },
                *,
            };
            /*
            */
            /// Provides methods to compute an integer's square root, cube root,
            /// and arbitrary `n`th root.
            pub trait Roots: Integer {
                /// Returns the truncated principal `n`th root of an integer
                /// -- `if x >= 0 { ⌊ⁿ√x⌋ } else { ⌈ⁿ√x⌉ }`
                ///
                /// This is solving for `r` in `rⁿ = x`, rounding toward zero.
                ///
                /// ```
                /// use ::num::integers::Roots;
                ///
                /// let x: i32 = 12345;
                /// assert_eq!(x.nth_root(1), x);
                /// assert_eq!(x.nth_root(2), x.sqrt());
                /// assert_eq!(x.nth_root(3), x.cbrt());
                /// assert_eq!(x.nth_root(4), 10);
                /// assert_eq!(x.nth_root(13), 2);
                /// assert_eq!(x.nth_root(14), 1);
                /// assert_eq!(x.nth_root(::u32::MAX), 1);
                ///
                /// assert_eq!(::i32::MAX.nth_root(30), 2);
                /// assert_eq!(::i32::MAX.nth_root(31), 1);
                /// assert_eq!(::i32::MIN.nth_root(31), -2);
                /// assert_eq!((::i32::MIN + 1).nth_root(31), -1);
                ///
                /// assert_eq!(::u32::MAX.nth_root(31), 2);
                /// assert_eq!(::u32::MAX.nth_root(32), 1);
                /// ```
                fn nth_root(&self, n: u32) -> Self;
                /// Returns the truncated principal square root of an integer -- `⌊√x⌋`
                ///
                /// This is solving for `r` in `r² = x`, rounding toward zero.
                #[inline] fn sqrt(&self) -> Self {
                    self.nth_root(2)
                }
                /// Returns the truncated principal cube root of an integer --
                /// `if x >= 0 { ⌊∛x⌋ } else { ⌈∛x⌉ }`
                ///
                /// This is solving for `r` in `r³ = x`, rounding toward zero.
                #[inline] fn cbrt(&self) -> Self {
                    self.nth_root(3)
                }
            }
            /// Returns the truncated principal square root of an integer --
            /// see [Roots::sqrt](trait.Roots.html#method.sqrt).
            #[inline] pub fn sqrt<T: Roots>(x: T) -> T {
                x.sqrt()
            }
            /// Returns the truncated principal cube root of an integer --
            /// see [Roots::cbrt](trait.Roots.html#method.cbrt).
            #[inline] pub fn cbrt<T: Roots>(x: T) -> T {
                x.cbrt()
            }
            /// Returns the truncated principal `n`th root of an integer --
            /// see [Roots::nth_root](trait.Roots.html#tymethod.nth_root).
            #[inline] pub fn nth_root<T: Roots>(x: T, n: u32) -> T {
                x.nth_root(n)
            }
            macro_rules! signed_roots {
                ($T:ty, $U:ty) => {
                    impl Roots for $T {
                        #[inline]
                        fn nth_root(&self, n: u32) -> Self {
                            if *self >= 0 {
                                (*self as $U).nth_root(n) as Self
                            } else {
                                assert!(n.is_odd(), "even roots of a negative are imaginary");
                                -((self.wrapping_neg() as $U).nth_root(n) as Self)
                            }
                        }
                        #[inline]
                        fn sqrt(&self) -> Self {
                            assert!(*self >= 0, "the square root of a negative is imaginary");
                            (*self as $U).sqrt() as Self
                        }
                        #[inline]
                        fn cbrt(&self) -> Self {
                            if *self >= 0 {
                                (*self as $U).cbrt() as Self
                            } else {
                                -((self.wrapping_neg() as $U).cbrt() as Self)
                            }
                        }
                    }
                };
            }
            signed_roots!(i8, u8);
            signed_roots!(i16, u16);
            signed_roots!(i32, u32);
            signed_roots!(i64, u64);
            signed_roots!(i128, u128);
            signed_roots!(isize, usize);

            #[inline] fn fixpoint<T, F>(mut x: T, f: F) -> T
            where
                T: Integer + Copy,
                F: Fn(T) -> T,
            {
                let mut xn = f(x);
                while x < xn {
                    x = xn;
                    xn = f(x);
                }
                while x > xn {
                    x = xn;
                    xn = f(x);
                }
                x
            }
            #[inline] fn bits<T>() -> u32 {
                8 * mem::size_of::<T>() as u32
            }
            #[inline] fn log2<T: PrimInt>(x: T) -> u32
            {
                debug_assert!(x > T::zero());
                bits::<T>() - 1 - x.leading_zeros()
            }
            macro_rules! unsigned_roots {
                ($T:ident) => {
                    impl Roots for $T {
                        #[inline]
                        fn nth_root(&self, n: u32) -> Self {
                            fn go(a: $T, n: u32) -> $T {
                               
                                match n {
                                    0 => panic!("can't find a root of degree 0!"),
                                    1 => return a,
                                    2 => return a.sqrt(),
                                    3 => return a.cbrt(),
                                    _ => (),
                                }
                               
                                if bits::<$T>() <= n || a < (1 << n) {
                                    return (a > 0) as $T;
                                }
                                if bits::<$T>() > 64 {
                                   
                                    return if a <= ::u64::MAX as $T {
                                        (a as u64).nth_root(n) as $T
                                    } else {
                                        let lo = (a >> n).nth_root(n) << 1;
                                        let hi = lo + 1;
                                       
                                       
                                        if hi.next_power_of_two().trailing_zeros() * n >= bits::<$T>() {
                                            match checked_pow(hi, n as usize) {
                                                Some(x) if x <= a => hi,
                                                _ => lo,
                                            }
                                        } else {
                                            if hi.pow(n) <= a {
                                                hi
                                            } else {
                                                lo
                                            }
                                        }
                                    };
                                }
                                
                                #[inline] fn guess(x: $T, n: u32) -> $T {
                                   
                                    if bits::<$T>() <= 32 || x <= ::u32::MAX as $T {
                                        1 << ((log2(x) + n - 1) / n)
                                    } else {
                                        ((x as f64).ln() / f64::from(n)).exp() as $T
                                    }
                                }
                                
                                let n1 = n - 1;
                                let next = |x: $T| {
                                    let y = match checked_pow(x, n1 as usize) {
                                        Some(ax) => a / ax,
                                        None => 0,
                                    };
                                    (y + x * n1 as $T) / n as $T
                                };
                                fixpoint(guess(a, n), next)
                            }
                            go(*self, n)
                        }
                        #[inline]
                        fn sqrt(&self) -> Self {
                            fn go(a: $T) -> $T {
                                if bits::<$T>() > 64 {
                                   
                                    return if a <= ::u64::MAX as $T {
                                        (a as u64).sqrt() as $T
                                    } else {
                                        let lo = (a >> 2u32).sqrt() << 1;
                                        let hi = lo + 1;
                                        if hi * hi <= a {
                                            hi
                                        } else {
                                            lo
                                        }
                                    };
                                }
                                if a < 4 {
                                    return (a > 0) as $T;
                                }
                                                    #[inline]
                                fn guess(x: $T) -> $T {
                                    (x as f64).sqrt() as $T
                                }
                                
                                let next = |x: $T| (a / x + x) >> 1;
                                fixpoint(guess(a), next)
                            }
                            go(*self)
                        }
                        #[inline]
                        fn cbrt(&self) -> Self {
                            fn go(a: $T) -> $T {
                                if bits::<$T>() > 64 {
                                   
                                    return if a <= ::u64::MAX as $T {
                                        (a as u64).cbrt() as $T
                                    } else {
                                        let lo = (a >> 3u32).cbrt() << 1;
                                        let hi = lo + 1;
                                        if hi * hi * hi <= a {
                                            hi
                                        } else {
                                            lo
                                        }
                                    };
                                }
                                if bits::<$T>() <= 32 {
                                   
                                    let mut x = a;
                                    let mut y2 = 0;
                                    let mut y = 0;
                                    let smax = bits::<$T>() / 3;
                                    for s in (0..smax + 1).rev() {
                                        let s = s * 3;
                                        y2 *= 4;
                                        y *= 2;
                                        let b = 3 * (y2 + y) + 1;
                                        if x >> s >= b {
                                            x -= b << s;
                                            y2 += 2 * y + 1;
                                            y += 1;
                                        }
                                    }
                                    return y;
                                }
                                if a < 8 {
                                    return (a > 0) as $T;
                                }
                                if a <= ::u32::MAX as $T {
                                    return (a as u32).cbrt() as $T;
                                }
                                                    #[inline]
                                fn guess(x: $T) -> $T {
                                    (x as f64).cbrt() as $T
                                }
                                
                                let next = |x: $T| (a / (x * x) + x * 2) / 3;
                                fixpoint(guess(a), next)
                            }
                            go(*self)
                        }
                    }
                };
            }
            unsigned_roots!(u8);
            unsigned_roots!(u16);
            unsigned_roots!(u32);
            unsigned_roots!(u64);
            unsigned_roots!(u128);
            unsigned_roots!(usize);
        } pub use self::roots::{cbrt, nth_root, sqrt, Roots};

        pub trait Integer: Sized + Num + PartialOrd + Ord + Eq 
        {
            /// Floored integer division.
            /// assert!((-8).div_floor(&-3) ==  2);
            ///
            /// assert!(( 1).div_floor(& 2) ==  0);
            /// assert!(( 1).div_floor(&-2) == -1);
            /// assert!((-1).div_floor(& 2) == -1);
            /// assert!((-1).div_floor(&-2) ==  0);
            /// ~~~
            fn div_floor(&self, other: &Self) -> Self;

            /// Floored integer modulo, satisfying:
            ///
            /// ~~~
            /// # use ::num::integers::Integer;
            /// # let n = 1; let d = 1;
            /// assert!(n.div_floor(&d) * d + n.mod_floor(&d) == n)
            /// ~~~
            ///
            /// # Examples
            ///
            /// ~~~
            /// # use ::num::integers::Integer;
            /// assert!(( 8).mod_floor(& 3) ==  2);
            /// assert!(( 8).mod_floor(&-3) == -1);
            /// assert!((-8).mod_floor(& 3) ==  1);
            /// assert!((-8).mod_floor(&-3) == -2);
            ///
            /// assert!(( 1).mod_floor(& 2) ==  1);
            /// assert!(( 1).mod_floor(&-2) == -1);
            /// assert!((-1).mod_floor(& 2) ==  1);
            /// assert!((-1).mod_floor(&-2) == -1);
            /// ~~~
            fn mod_floor(&self, other: &Self) -> Self;

            /// Ceiled integer division.
            /// assert_eq!((-8).div_ceil(&-3),  3);
            ///
            /// assert_eq!(( 1).div_ceil( &2), 1);
            /// assert_eq!(( 1).div_ceil(&-2), 0);
            /// assert_eq!((-1).div_ceil( &2), 0);
            /// assert_eq!((-1).div_ceil(&-2), 1);
            /// ~~~
            fn div_ceil(&self, other: &Self) -> Self {
                let (q, r) = self.div_mod_floor(other);
                if r.is_zero() {
                    q
                } else {
                    q + Self::one()
                }
            }
            /// Greatest Common Divisor (GCD).
            fn gcd(&self, other: &Self) -> Self;

            /// Lowest Common Multiple (LCM).
            /// ~~~
            fn lcm(&self, other: &Self) -> Self;

            /// Greatest Common Divisor (GCD) and
            /// Lowest Common Multiple (LCM) together.
            #[inline] fn gcd_lcm(&self, other: &Self) -> (Self, Self) {
                (self.gcd(other), self.lcm(other))
            }
            /// Greatest common divisor and Bézout coefficients.
            ///     let ExtendedGcd { gcd, x, y, .. } = a.extended_gcd(&b);
            ///     gcd == x * a + y * b
            /// }
            /// assert!(check(10isize, 4isize));
            /// assert!(check(8isize,  9isize));
            /// # }
            /// ~~~
            #[inline] fn extended_gcd(&self, other: &Self) -> ExtendedGcd<Self> where
                Self: Clone,
            {
                let mut s = (Self::zero(), Self::one());
                let mut t = (Self::one(), Self::zero());
                let mut r = (other.clone(), self.clone());

                while !r.0.is_zero() {
                    let q = r.1.clone() / r.0.clone();
                    let f = |mut r: (Self, Self)| {
                        mem::swap(&mut r.0, &mut r.1);
                        r.0 = r.0 - q.clone() * r.1.clone();
                        r
                    };
                    r = f(r);
                    s = f(s);
                    t = f(t);
                }
                if r.1 >= Self::zero() {
                    ExtendedGcd {
                        gcd: r.1,
                        x: s.1,
                        y: t.1,
                    }
                } else {
                    ExtendedGcd {
                        gcd: Self::zero() - r.1,
                        x: Self::zero() - s.1,
                        y: Self::zero() - t.1,
                    }
                }
            }
            /// Greatest common divisor, least common multiple, and Bézout coefficients.
            #[inline] fn extended_gcd_lcm(&self, other: &Self) -> (ExtendedGcd<Self>, Self)
            where
                Self: Clone + Signed,
            {
                (self.extended_gcd(other), self.lcm(other))
            }
            /// Deprecated, use `is_multiple_of` instead.
            #[deprecated(note = "Please use is_multiple_of instead")]
            #[inline] fn divides(&self, other: &Self) -> bool {
                self.is_multiple_of(other)
            }
            /// Returns `true` if `self` is a multiple of `other`.
            fn is_multiple_of(&self, other: &Self) -> bool;

            /// Returns `true` if the number is even.
            fn is_even(&self) -> bool;

            /// Returns `true` if the number is odd.
            fn is_odd(&self) -> bool;

            /// Simultaneous truncated integer division and modulus.
            /// assert_eq!((-8).div_rem( &3), (-2, -2));
            /// assert_eq!((-8).div_rem(&-3), ( 2, -2));
            ///
            /// assert_eq!(( 1).div_rem( &2), ( 0,  1));
            /// assert_eq!(( 1).div_rem(&-2), ( 0,  1));
            /// assert_eq!((-1).div_rem( &2), ( 0, -1));
            /// assert_eq!((-1).div_rem(&-2), ( 0, -1));
            /// ~~~
            fn div_rem(&self, other: &Self) -> (Self, Self);
            /// Simultaneous floored integer division and modulus.
            /// assert_eq!((-8).div_mod_floor( &3), (-3,  1));
            /// assert_eq!((-8).div_mod_floor(&-3), ( 2, -2));
            ///
            /// assert_eq!(( 1).div_mod_floor( &2), ( 0,  1));
            /// assert_eq!(( 1).div_mod_floor(&-2), (-1, -1));
            /// assert_eq!((-1).div_mod_floor( &2), (-1,  1));
            /// assert_eq!((-1).div_mod_floor(&-2), ( 0, -1));
            /// ~~~
            fn div_mod_floor(&self, other: &Self) -> (Self, Self) {
                (self.div_floor(other), self.mod_floor(other))
            }
            /// Rounds up to nearest multiple of argument.
            ///
            /// ~~~
            /// # use ::num::integers::Integer;
            /// assert_eq!(( 16).next_multiple_of(& 8),  16);
            /// assert_eq!(( 23).next_multiple_of(& 8),  24);
            /// assert_eq!(( 16).next_multiple_of(&-8),  16);
            /// assert_eq!(( 23).next_multiple_of(&-8),  16);
            /// assert_eq!((-16).next_multiple_of(& 8), -16);
            /// assert_eq!((-23).next_multiple_of(& 8), -16);
            /// assert_eq!((-16).next_multiple_of(&-8), -16);
            /// assert_eq!((-23).next_multiple_of(&-8), -24);
            /// ~~~
            #[inline] fn next_multiple_of(&self, other: &Self) -> Self
            where
                Self: Clone,
            {
                let m = self.mod_floor(other);
                self.clone()
                    + if m.is_zero() {
                        Self::zero()
                    } else {
                        other.clone() - m
                    }
            }
            /// Rounds down to nearest multiple of argument.
            ///
            /// ~~~
            /// # use ::num::integers::Integer;
            /// assert_eq!(( 16).prev_multiple_of(& 8),  16);
            /// assert_eq!(( 23).prev_multiple_of(& 8),  16);
            /// assert_eq!(( 16).prev_multiple_of(&-8),  16);
            /// assert_eq!(( 23).prev_multiple_of(&-8),  24);
            /// assert_eq!((-16).prev_multiple_of(& 8), -16);
            /// assert_eq!((-23).prev_multiple_of(& 8), -24);
            /// assert_eq!((-16).prev_multiple_of(&-8), -16);
            /// assert_eq!((-23).prev_multiple_of(&-8), -16);
            /// ~~~
            #[inline] fn prev_multiple_of(&self, other: &Self) -> Self
            where
                Self: Clone,
            {
                self.clone() - self.mod_floor(other)
            }
            /// Decrements self by one.
            /// ~~~
            fn dec(&mut self)
            where
                Self: Clone,
            {
                *self = self.clone() - Self::one()
            }
            /// Increments self by one.
            /// ~~~
            fn inc(&mut self)
            where
                Self: Clone,
            {
                *self = self.clone() + Self::one()
            }
        }
        /// Greatest common divisor and Bézout coefficients.
        #[derive(Debug, Clone, Copy, PartialEq, Eq)]
        pub struct ExtendedGcd<A> 
        {
            pub gcd: A,
            pub x: A,
            pub y: A,
        }
        /// Simultaneous integer division and modulus
        #[inline] pub fn div_rem<T: Integer>(x: T, y: T) -> (T, T) 
        {
            x.div_rem(&y)
        }
        /// Floored integer division
        #[inline] pub fn div_floor<T: Integer>(x: T, y: T) -> T 
        {
            x.div_floor(&y)
        }
        /// Floored integer modulus
        #[inline] pub fn mod_floor<T: Integer>(x: T, y: T) -> T 
        {
            x.mod_floor(&y)
        }
        /// Simultaneous floored integer division and modulus
        #[inline] pub fn div_mod_floor<T: Integer>(x: T, y: T) -> (T, T) 
        {
            x.div_mod_floor(&y)
        }
        /// Ceiled integer division
        #[inline] pub fn div_ceil<T: Integer>(x: T, y: T) -> T 
        {
            x.div_ceil(&y)
        }
        /// Calculates the Greatest Common Divisor (GCD) of the number and `other`.
        #[inline(always)] pub fn gcd<T: Integer>(x: T, y: T) -> T 
        {
            x.gcd(&y)
        }
        /// Calculates the Lowest Common Multiple (LCM) of the number and `other`.
        #[inline(always)] pub fn lcm<T: Integer>(x: T, y: T) -> T 
        {
            x.lcm(&y)
        }
        /// Calculates the Greatest Common Divisor (GCD) and Lowest Common Multiple (LCM) of the number and `other`.
        #[inline(always)] pub fn gcd_lcm<T: Integer>(x: T, y: T) -> (T, T) 
        {
            x.gcd_lcm(&y)
        }

        macro_rules! impl_integer_for_isize 
        {
            ($T:ty, $test_mod:ident) => {
                impl Integer for $T {
                    /// Floored integer division
                    #[inline] fn div_floor(&self, other: &Self) -> Self {
                       
                       
                        let (d, r) = self.div_rem(other);
                        if (r > 0 && *other < 0) || (r < 0 && *other > 0) {
                            d - 1
                        } else {
                            d
                        }
                    }
                    /// Floored integer modulo
                    #[inline] fn mod_floor(&self, other: &Self) -> Self {
                       
                       
                        let r = *self % *other;
                        if (r > 0 && *other < 0) || (r < 0 && *other > 0) {
                            r + *other
                        } else {
                            r
                        }
                    }
                    /// Calculates `div_floor` and `mod_floor` simultaneously
                    #[inline] fn div_mod_floor(&self, other: &Self) -> (Self, Self) {
                       
                       
                        let (d, r) = self.div_rem(other);
                        if (r > 0 && *other < 0) || (r < 0 && *other > 0) {
                            (d - 1, r + *other)
                        } else {
                            (d, r)
                        }
                    }
                    #[inline] fn div_ceil(&self, other: &Self) -> Self {
                        let (d, r) = self.div_rem(other);
                        if (r > 0 && *other > 0) || (r < 0 && *other < 0) {
                            d + 1
                        } else {
                            d
                        }
                    }
                    /// Calculates the Greatest Common Divisor (GCD) of the number and
                    /// `other`. The result is always non-negative.
                    #[inline] fn gcd(&self, other: &Self) -> Self {
                       
                        let mut m = *self;
                        let mut n = *other;
                        if m == 0 || n == 0 {
                            return (m | n).abs();
                        }
                       
                        let shift = (m | n).trailing_zeros();

                       
                       
                       
                       

                       
                       
                       
                        if m == Self::min_value() || n == Self::min_value() {
                            return (1 << shift).abs();
                        }
                       
                        m = m.abs();
                        n = n.abs();

                       
                        m >>= m.trailing_zeros();
                        n >>= n.trailing_zeros();

                        while m != n {
                            if m > n {
                                m -= n;
                                m >>= m.trailing_zeros();
                            } else {
                                n -= m;
                                n >>= n.trailing_zeros();
                            }
                        }
                        m << shift
                    }
                    #[inline] fn extended_gcd_lcm(&self, other: &Self) -> (ExtendedGcd<Self>, Self) {
                        let egcd = self.extended_gcd(other);
                       
                        let lcm = if egcd.gcd.is_zero() {
                            Self::zero()
                        } else {
                            (*self * (*other / egcd.gcd)).abs()
                        };
                        (egcd, lcm)
                    }
                    /// Calculates the Lowest Common Multiple (LCM) of the number and
                    /// `other`.
                    #[inline] fn lcm(&self, other: &Self) -> Self {
                        self.gcd_lcm(other).1
                    }
                    /// Calculates the Greatest Common Divisor (GCD) and
                    /// Lowest Common Multiple (LCM) of the number and `other`.
                    #[inline] fn gcd_lcm(&self, other: &Self) -> (Self, Self) {
                        if self.is_zero() && other.is_zero() {
                            return (Self::zero(), Self::zero());
                        }
                        let gcd = self.gcd(other);
                       
                        let lcm = (*self * (*other / gcd)).abs();
                        (gcd, lcm)
                    }
                    /// Returns `true` if the number is a multiple of `other`.
                    #[inline] fn is_multiple_of(&self, other: &Self) -> bool {
                        if other.is_zero() {
                            return self.is_zero();
                        }
                        *self % *other == 0
                    }
                    /// Returns `true` if the number is divisible by `2`
                    #[inline] fn is_even(&self) -> bool {
                        (*self) & 1 == 0
                    }
                    /// Returns `true` if the number is not divisible by `2`
                    #[inline] fn is_odd(&self) -> bool {
                        !self.is_even()
                    }
                    /// Simultaneous truncated integer division and modulus.
                    #[inline] fn div_rem(&self, other: &Self) -> (Self, Self) {
                        (*self / *other, *self % *other)
                    }
                    /// Rounds up to nearest multiple of argument.
                    #[inline] fn next_multiple_of(&self, other: &Self) -> Self {
                       
                        if *other == -1 {
                            return *self;
                        }
                        let m = Integer::mod_floor(self, other);
                        *self + if m == 0 { 0 } else { other - m }
                    }
                    /// Rounds down to nearest multiple of argument.
                    #[inline] fn prev_multiple_of(&self, other: &Self) -> Self {
                       
                        if *other == -1 {
                            return *self;
                        }
                        *self - Integer::mod_floor(self, other)
                    }
                }
            };
        }

        impl_integer_for_isize!(i8, test_integer_i8);
        impl_integer_for_isize!(i16, test_integer_i16);
        impl_integer_for_isize!(i32, test_integer_i32);
        impl_integer_for_isize!(i64, test_integer_i64);
        impl_integer_for_isize!(i128, test_integer_i128);
        impl_integer_for_isize!(isize, test_integer_isize);

        macro_rules! impl_integer_for_usize 
        {
            ($T:ty, $test_mod:ident) => {
                impl Integer for $T {
                    /// Unsigned integer division. Returns the same result as `div` (`/`).
                    #[inline] fn div_floor(&self, other: &Self) -> Self {
                        *self / *other
                    }
                    /// Unsigned integer modulo operation. Returns the same result as `rem` (`%`).
                    #[inline] fn mod_floor(&self, other: &Self) -> Self {
                        *self % *other
                    }
                    #[inline] fn div_ceil(&self, other: &Self) -> Self {
                        *self / *other + (0 != *self % *other) as Self
                    }
                    /// Calculates the Greatest Common Divisor (GCD) of the number and `other`
                    #[inline] fn gcd(&self, other: &Self) -> Self {
                       
                        let mut m = *self;
                        let mut n = *other;
                        if m == 0 || n == 0 {
                            return m | n;
                        }
                       
                        let shift = (m | n).trailing_zeros();

                       
                        m >>= m.trailing_zeros();
                        n >>= n.trailing_zeros();

                        while m != n {
                            if m > n {
                                m -= n;
                                m >>= m.trailing_zeros();
                            } else {
                                n -= m;
                                n >>= n.trailing_zeros();
                            }
                        }
                        m << shift
                    }
                    #[inline] fn extended_gcd_lcm(&self, other: &Self) -> (ExtendedGcd<Self>, Self) {
                        let egcd = self.extended_gcd(other);
                       
                        let lcm = if egcd.gcd.is_zero() {
                            Self::zero()
                        } else {
                            *self * (*other / egcd.gcd)
                        };
                        (egcd, lcm)
                    }
                    /// Calculates the Lowest Common Multiple (LCM) of the number and `other`.
                    #[inline] fn lcm(&self, other: &Self) -> Self {
                        self.gcd_lcm(other).1
                    }
                    /// Calculates the Greatest Common Divisor (GCD) and
                    /// Lowest Common Multiple (LCM) of the number and `other`.
                    #[inline] fn gcd_lcm(&self, other: &Self) -> (Self, Self) {
                        if self.is_zero() && other.is_zero() {
                            return (Self::zero(), Self::zero());
                        }
                        let gcd = self.gcd(other);
                        let lcm = *self * (*other / gcd);
                        (gcd, lcm)
                    }
                    /// Returns `true` if the number is a multiple of `other`.
                    #[inline] fn is_multiple_of(&self, other: &Self) -> bool {
                        if other.is_zero() {
                            return self.is_zero();
                        }
                        *self % *other == 0
                    }
                    /// Returns `true` if the number is divisible by `2`.
                    #[inline] fn is_even(&self) -> bool {
                        *self % 2 == 0
                    }
                    /// Returns `true` if the number is not divisible by `2`.
                    #[inline] fn is_odd(&self) -> bool {
                        !self.is_even()
                    }
                    /// Simultaneous truncated integer division and modulus.
                    #[inline] fn div_rem(&self, other: &Self) -> (Self, Self) {
                        (*self / *other, *self % *other)
                    }
                }
            };
        }

        impl_integer_for_usize!(u8, test_integer_u8);
        impl_integer_for_usize!(u16, test_integer_u16);
        impl_integer_for_usize!(u32, test_integer_u32);
        impl_integer_for_usize!(u64, test_integer_u64);
        impl_integer_for_usize!(u128, test_integer_u128);
        impl_integer_for_usize!(usize, test_integer_usize);
        /// An iterator over binomial coefficients.
        pub struct IterBinomial<T> 
        {
            a: T,
            n: T,
            k: T,
        }

        impl<T> IterBinomial<T> where
            T: Integer,
        {
            /// For a given n, iterate over all binomial coefficients binomial(n, k), for k=0...n.
            /// be no overflow:
            ///
            /// type | n
            /// -----|---
            /// u8   | 10
            /// i8   |  9
            /// u16  | 18
            /// i16  | 17
            /// u32  | 34
            /// i32  | 33
            /// u64  | 67
            /// i64  | 66
            ///
            /// For larger n, `T` should be a bigint type.
            pub fn new(n: T) -> IterBinomial<T> {
                IterBinomial {
                    k: T::zero(),
                    a: T::one(),
                    n,
                }
            }
        }

        impl<T> Iterator for IterBinomial<T> where
        T: Integer + Clone,
        {
            type Item = T;

            fn next(&mut self) -> Option<T> {
                if self.k > self.n {
                    return None;
                }
                self.a = if !self.k.is_zero() {
                    multiply_and_divide(
                        self.a.clone(),
                        self.n.clone() - self.k.clone() + T::one(),
                        self.k.clone(),
                    )
                } else {
                    T::one()
                };
                self.k = self.k.clone() + T::one();
                Some(self.a.clone())
            }
        }
        /// Calculate r * a / b, avoiding overflows and fractions.
        fn multiply_and_divide<T: Integer + Clone>(r: T, a: T, b: T) -> T
        {
           
            let g = gcd(r.clone(), b.clone());
            r / g.clone() * (a / (b / g))
        }
        /// Calculate the binomial coefficient.
        pub fn binomial<T: Integer + Clone>(mut n: T, k: T) -> T
        {
           
            if k > n {
                return T::zero();
            }
            if k > n.clone() - k.clone() {
                return binomial(n.clone(), n - k);
            }
            let mut r = T::one();
            let mut d = T::one();
            loop {
                if d > k {
                    break;
                }
                r = multiply_and_divide(r, n.clone(), d.clone());
                n = n - T::one();
                d = d + T::one();
            }
            r
        }
        /// Calculate the multinomial coefficient.
        pub fn multinomial<T: Integer + Clone>(k: &[T]) -> T where
            for<'a> T: Add<&'a T, Output = T>,
        {
            let mut r = T::one();
            let mut p = T::zero();
            for i in k {
                p = p + i;
                r = r * binomial(p.clone(), i.clone());
            }
            r
        }
    }
    /*
    */
    pub mod big
    {
        //! Big Integer Types for Rust
        use ::
        {
            *,
        };
        /*
        */
        pub mod int
        {
            use ::
            {
                cmp::{ Ordering::{self, Equal} },
                default::{ Default },
                num::
                {
                    traits::{ ConstZero, Num, One, Pow, Signed, Zero },
                    integers::{Integer, Roots},
                    big::
                    {
                        digit::BigDigit,
                        uint::{BigUint, IntDigits, to_str_radix_reversed, U32Digits, U64Digits},
                    },
                },
                ops::{ Neg, Not },
                string::{ String },
                vec::{ Vec },
                *,
            };
            /*
            */
            use self::Sign::{Minus, NoSign, Plus};

            pub mod addition
            {
                use ::
                {
                    cmp::Ordering::{ Equal, Greater, Less },
                    iter::{ Sum },
                    num::
                    {
                        big::{ IsizePromotion, UsizePromotion },
                        traits::{ CheckedAdd },
                    },
                    ops::{ Add, AddAssign },
                    *,
                };
                use super::CheckedUnsignedAbs::{ Negative, Positive };
                use super::Sign::{ Minus, NoSign, Plus };
                use super::{ BigInt, UnsignedAbs };
                /*
                */
                macro_rules! bigint_add 
                {
                    ($a:expr, $a_owned:expr, $a_data:expr, $b:expr, $b_owned:expr, $b_data:expr) => {
                        match ($a.sign, $b.sign) {
                            (_, NoSign) => $a_owned,
                            (NoSign, _) => $b_owned,
                           
                            (Plus, Plus) | (Minus, Minus) => BigInt::from_biguint($a.sign, $a_data + $b_data),
                           
                            (Plus, Minus) | (Minus, Plus) => match $a.data.cmp(&$b.data) {
                                Less => BigInt::from_biguint($b.sign, $b_data - $a_data),
                                Greater => BigInt::from_biguint($a.sign, $a_data - $b_data),
                                Equal => BigInt::ZERO,
                            },
                        }
                    };
                }
                impl Add<&BigInt> for &BigInt 
                {
                    type Output = BigInt;

                    #[inline] fn add(self, other: &BigInt) -> BigInt {
                        bigint_add!(
                            self,
                            self.clone(),
                            &self.data,
                            other,
                            other.clone(),
                            &other.data
                        )
                    }
                }
                impl Add<BigInt> for &BigInt 
                {
                    type Output = BigInt;

                    #[inline] fn add(self, other: BigInt) -> BigInt {
                        bigint_add!(self, self.clone(), &self.data, other, other, other.data)
                    }
                }
                impl Add<&BigInt> for BigInt
                {
                    type Output = BigInt;

                    #[inline] fn add(self, other: &BigInt) -> BigInt {
                        bigint_add!(self, self, self.data, other, other.clone(), &other.data)
                    }
                }
                impl Add<BigInt> for BigInt
                {
                    type Output = BigInt;

                    #[inline] fn add(self, other: BigInt) -> BigInt {
                        bigint_add!(self, self, self.data, other, other, other.data)
                    }
                }
                impl AddAssign<&BigInt> for BigInt 
                {
                    #[inline] fn add_assign(&mut self, other: &BigInt) {
                        let n = mem::replace(self, Self::ZERO);
                        *self = n + other;
                    }
                }
                forward_val_assign!(impl AddAssign for BigInt, add_assign);

                promote_all_scalars!(impl Add for BigInt, add);
                promote_all_scalars_assign!(impl AddAssign for BigInt, add_assign);
                forward_all_scalar_binop_to_val_val_commutative!(impl Add<u32> for BigInt, add);
                forward_all_scalar_binop_to_val_val_commutative!(impl Add<u64> for BigInt, add);
                forward_all_scalar_binop_to_val_val_commutative!(impl Add<u128> for BigInt, add);

                impl Add<u32> for BigInt
                {
                    type Output = BigInt;

                    #[inline] fn add(self, other: u32) -> BigInt {
                        match self.sign {
                            NoSign => From::from(other),
                            Plus => BigInt::from(self.data + other),
                            Minus => match self.data.cmp(&From::from(other)) {
                                Equal => Self::ZERO,
                                Less => BigInt::from(other - self.data),
                                Greater => -BigInt::from(self.data - other),
                            },
                        }
                    }
                }
                impl AddAssign<u32> for BigInt
                {
                    #[inline] fn add_assign(&mut self, other: u32) {
                        let n = mem::replace(self, Self::ZERO);
                        *self = n + other;
                    }
                }
                impl Add<u64> for BigInt
                {
                    type Output = BigInt;

                    #[inline] fn add(self, other: u64) -> BigInt {
                        match self.sign {
                            NoSign => From::from(other),
                            Plus => BigInt::from(self.data + other),
                            Minus => match self.data.cmp(&From::from(other)) {
                                Equal => Self::ZERO,
                                Less => BigInt::from(other - self.data),
                                Greater => -BigInt::from(self.data - other),
                            },
                        }
                    }
                }
                impl AddAssign<u64> for BigInt
                {
                    #[inline] fn add_assign(&mut self, other: u64) {
                        let n = mem::replace(self, Self::ZERO);
                        *self = n + other;
                    }
                }
                impl Add<u128> for BigInt
                {
                    type Output = BigInt;

                    #[inline] fn add(self, other: u128) -> BigInt {
                        match self.sign {
                            NoSign => BigInt::from(other),
                            Plus => BigInt::from(self.data + other),
                            Minus => match self.data.cmp(&From::from(other)) {
                                Equal => Self::ZERO,
                                Less => BigInt::from(other - self.data),
                                Greater => -BigInt::from(self.data - other),
                            },
                        }
                    }
                }
                impl AddAssign<u128> for BigInt
                {
                    #[inline] fn add_assign(&mut self, other: u128) {
                        let n = mem::replace(self, Self::ZERO);
                        *self = n + other;
                    }
                }
                forward_all_scalar_binop_to_val_val_commutative!(impl Add<i32> for BigInt, add);
                forward_all_scalar_binop_to_val_val_commutative!(impl Add<i64> for BigInt, add);
                forward_all_scalar_binop_to_val_val_commutative!(impl Add<i128> for BigInt, add);

                impl Add<i32> for BigInt
                {
                    type Output = BigInt;

                    #[inline] fn add(self, other: i32) -> BigInt {
                        match other.checked_uabs() {
                            Positive(u) => self + u,
                            Negative(u) => self - u,
                        }
                    }
                }
                impl AddAssign<i32> for BigInt
                {
                    #[inline] fn add_assign(&mut self, other: i32) {
                        match other.checked_uabs() {
                            Positive(u) => *self += u,
                            Negative(u) => *self -= u,
                        }
                    }
                }
                impl Add<i64> for BigInt
                {
                    type Output = BigInt;

                    #[inline] fn add(self, other: i64) -> BigInt {
                        match other.checked_uabs() {
                            Positive(u) => self + u,
                            Negative(u) => self - u,
                        }
                    }
                }
                impl AddAssign<i64> for BigInt
                {
                    #[inline] fn add_assign(&mut self, other: i64) {
                        match other.checked_uabs() {
                            Positive(u) => *self += u,
                            Negative(u) => *self -= u,
                        }
                    }
                }
                impl Add<i128> for BigInt
                {
                    type Output = BigInt;

                    #[inline] fn add(self, other: i128) -> BigInt {
                        match other.checked_uabs() {
                            Positive(u) => self + u,
                            Negative(u) => self - u,
                        }
                    }
                }
                impl AddAssign<i128> for BigInt
                {
                    #[inline] fn add_assign(&mut self, other: i128) {
                        match other.checked_uabs() {
                            Positive(u) => *self += u,
                            Negative(u) => *self -= u,
                        }
                    }
                }
                impl CheckedAdd for BigInt
                {
                    #[inline] fn checked_add(&self, v: &BigInt) -> Option<BigInt> {
                        Some(self.add(v))
                    }
                }
                impl_sum_iter_type!(BigInt);
            }
            pub mod division
            {
                use ::
                {
                    num::
                    {
                        big::{IsizePromotion, UsizePromotion},
                        integers::{ Integer },
                        traits::{ CheckedDiv, CheckedEuclid, Euclid, Signed, ToPrimitive, Zero },
                    },
                    ops::{ Div, DivAssign, Rem, RemAssign },
                    *,
                };
                use super::CheckedUnsignedAbs::{Negative, Positive};
                use super::Sign::NoSign;
                use super::{BigInt, UnsignedAbs};
                /*
                */
                forward_all_binop_to_ref_ref!(impl Div for BigInt, div);

                impl Div<&BigInt> for &BigInt
                {
                    type Output = BigInt;

                    #[inline] fn div(self, other: &BigInt) -> BigInt {
                        let (q, _) = self.div_rem(other);
                        q
                    }
                }
                impl DivAssign<&BigInt> for BigInt
                {
                    #[inline] fn div_assign(&mut self, other: &BigInt) {
                        *self = &*self / other;
                    }
                }
                forward_val_assign!(impl DivAssign for BigInt, div_assign);

                promote_all_scalars!(impl Div for BigInt, div);
                promote_all_scalars_assign!(impl DivAssign for BigInt, div_assign);
                forward_all_scalar_binop_to_val_val!(impl Div<u32> for BigInt, div);
                forward_all_scalar_binop_to_val_val!(impl Div<u64> for BigInt, div);
                forward_all_scalar_binop_to_val_val!(impl Div<u128> for BigInt, div);

                impl Div<u32> for BigInt
                {
                    type Output = BigInt;

                    #[inline] fn div(self, other: u32) -> BigInt {
                        BigInt::from_biguint(self.sign, self.data / other)
                    }
                }
                impl DivAssign<u32> for BigInt
                {
                    #[inline] fn div_assign(&mut self, other: u32) {
                        self.data /= other;
                        if self.data.is_zero() {
                            self.sign = NoSign;
                        }
                    }
                }
                impl Div<BigInt> for u32 {
                    type Output = BigInt;

                    #[inline] fn div(self, other: BigInt) -> BigInt {
                        BigInt::from_biguint(other.sign, self / other.data)
                    }
                }
                impl Div<u64> for BigInt
                {
                    type Output = BigInt;

                    #[inline] fn div(self, other: u64) -> BigInt {
                        BigInt::from_biguint(self.sign, self.data / other)
                    }
                }
                impl DivAssign<u64> for BigInt
                {
                    #[inline] fn div_assign(&mut self, other: u64) {
                        self.data /= other;
                        if self.data.is_zero() {
                            self.sign = NoSign;
                        }
                    }
                }
                impl Div<BigInt> for u64 {
                    type Output = BigInt;

                    #[inline] fn div(self, other: BigInt) -> BigInt {
                        BigInt::from_biguint(other.sign, self / other.data)
                    }
                }
                impl Div<u128> for BigInt
                {
                    type Output = BigInt;

                    #[inline] fn div(self, other: u128) -> BigInt {
                        BigInt::from_biguint(self.sign, self.data / other)
                    }
                }
                impl DivAssign<u128> for BigInt
                {
                    #[inline] fn div_assign(&mut self, other: u128) {
                        self.data /= other;
                        if self.data.is_zero() {
                            self.sign = NoSign;
                        }
                    }
                }
                impl Div<BigInt> for u128 {
                    type Output = BigInt;

                    #[inline] fn div(self, other: BigInt) -> BigInt {
                        BigInt::from_biguint(other.sign, self / other.data)
                    }
                }
                forward_all_scalar_binop_to_val_val!(impl Div<i32> for BigInt, div);
                forward_all_scalar_binop_to_val_val!(impl Div<i64> for BigInt, div);
                forward_all_scalar_binop_to_val_val!(impl Div<i128> for BigInt, div);

                impl Div<i32> for BigInt
                {
                    type Output = BigInt;

                    #[inline] fn div(self, other: i32) -> BigInt {
                        match other.checked_uabs() {
                            Positive(u) => self / u,
                            Negative(u) => -self / u,
                        }
                    }
                }
                impl DivAssign<i32> for BigInt
                {
                    #[inline] fn div_assign(&mut self, other: i32) {
                        match other.checked_uabs() {
                            Positive(u) => *self /= u,
                            Negative(u) => {
                                self.sign = -self.sign;
                                *self /= u;
                            }
                        }
                    }
                }
                impl Div<BigInt> for i32 {
                    type Output = BigInt;

                    #[inline] fn div(self, other: BigInt) -> BigInt {
                        match self.checked_uabs() {
                            Positive(u) => u / other,
                            Negative(u) => u / -other,
                        }
                    }
                }
                impl Div<i64> for BigInt
                {
                    type Output = BigInt;

                    #[inline] fn div(self, other: i64) -> BigInt {
                        match other.checked_uabs() {
                            Positive(u) => self / u,
                            Negative(u) => -self / u,
                        }
                    }
                }
                impl DivAssign<i64> for BigInt
                {
                    #[inline] fn div_assign(&mut self, other: i64) {
                        match other.checked_uabs() {
                            Positive(u) => *self /= u,
                            Negative(u) => {
                                self.sign = -self.sign;
                                *self /= u;
                            }
                        }
                    }
                }
                impl Div<BigInt> for i64 {
                    type Output = BigInt;

                    #[inline] fn div(self, other: BigInt) -> BigInt {
                        match self.checked_uabs() {
                            Positive(u) => u / other,
                            Negative(u) => u / -other,
                        }
                    }
                }
                impl Div<i128> for BigInt
                {
                    type Output = BigInt;

                    #[inline] fn div(self, other: i128) -> BigInt {
                        match other.checked_uabs() {
                            Positive(u) => self / u,
                            Negative(u) => -self / u,
                        }
                    }
                }
                impl DivAssign<i128> for BigInt
                {
                    #[inline] fn div_assign(&mut self, other: i128) {
                        match other.checked_uabs() {
                            Positive(u) => *self /= u,
                            Negative(u) => {
                                self.sign = -self.sign;
                                *self /= u;
                            }
                        }
                    }
                }
                impl Div<BigInt> for i128 {
                    type Output = BigInt;

                    #[inline] fn div(self, other: BigInt) -> BigInt {
                        match self.checked_uabs() {
                            Positive(u) => u / other,
                            Negative(u) => u / -other,
                        }
                    }
                }
                forward_all_binop_to_ref_ref!(impl Rem for BigInt, rem);

                impl Rem<&BigInt> for &BigInt
                {
                    type Output = BigInt;

                    #[inline] fn rem(self, other: &BigInt) -> BigInt {
                        if let Some(other) = other.to_u32() {
                            self % other
                        } else if let Some(other) = other.to_i32() {
                            self % other
                        } else {
                            let (_, r) = self.div_rem(other);
                            r
                        }
                    }
                }
                impl RemAssign<&BigInt> for BigInt
                {
                    #[inline] fn rem_assign(&mut self, other: &BigInt) {
                        *self = &*self % other;
                    }
                }
                forward_val_assign!(impl RemAssign for BigInt, rem_assign);

                promote_all_scalars!(impl Rem for BigInt, rem);
                promote_all_scalars_assign!(impl RemAssign for BigInt, rem_assign);
                forward_all_scalar_binop_to_val_val!(impl Rem<u32> for BigInt, rem);
                forward_all_scalar_binop_to_val_val!(impl Rem<u64> for BigInt, rem);
                forward_all_scalar_binop_to_val_val!(impl Rem<u128> for BigInt, rem);

                impl Rem<u32> for BigInt
                {
                    type Output = BigInt;

                    #[inline] fn rem(self, other: u32) -> BigInt {
                        BigInt::from_biguint(self.sign, self.data % other)
                    }
                }
                impl RemAssign<u32> for BigInt
                {
                    #[inline] fn rem_assign(&mut self, other: u32) {
                        self.data %= other;
                        if self.data.is_zero() {
                            self.sign = NoSign;
                        }
                    }
                }
                impl Rem<BigInt> for u32 {
                    type Output = BigInt;

                    #[inline] fn rem(self, other: BigInt) -> BigInt {
                        BigInt::from(self % other.data)
                    }
                }
                impl Rem<u64> for BigInt
                {
                    type Output = BigInt;

                    #[inline] fn rem(self, other: u64) -> BigInt {
                        BigInt::from_biguint(self.sign, self.data % other)
                    }
                }
                impl RemAssign<u64> for BigInt
                {
                    #[inline] fn rem_assign(&mut self, other: u64) {
                        self.data %= other;
                        if self.data.is_zero() {
                            self.sign = NoSign;
                        }
                    }
                }
                impl Rem<BigInt> for u64 {
                    type Output = BigInt;

                    #[inline] fn rem(self, other: BigInt) -> BigInt {
                        BigInt::from(self % other.data)
                    }
                }
                impl Rem<u128> for BigInt
                {
                    type Output = BigInt;

                    #[inline] fn rem(self, other: u128) -> BigInt {
                        BigInt::from_biguint(self.sign, self.data % other)
                    }
                }
                impl RemAssign<u128> for BigInt
                {
                    #[inline] fn rem_assign(&mut self, other: u128) {
                        self.data %= other;
                        if self.data.is_zero() {
                            self.sign = NoSign;
                        }
                    }
                }
                impl Rem<BigInt> for u128 {
                    type Output = BigInt;

                    #[inline] fn rem(self, other: BigInt) -> BigInt {
                        BigInt::from(self % other.data)
                    }
                }
                forward_all_scalar_binop_to_val_val!(impl Rem<i32> for BigInt, rem);
                forward_all_scalar_binop_to_val_val!(impl Rem<i64> for BigInt, rem);
                forward_all_scalar_binop_to_val_val!(impl Rem<i128> for BigInt, rem);

                impl Rem<i32> for BigInt
                {
                    type Output = BigInt;

                    #[inline] fn rem(self, other: i32) -> BigInt {
                        self % other.unsigned_abs()
                    }
                }
                impl RemAssign<i32> for BigInt
                {
                    #[inline] fn rem_assign(&mut self, other: i32) {
                        *self %= other.unsigned_abs();
                    }
                }
                impl Rem<BigInt> for i32 {
                    type Output = BigInt;

                    #[inline] fn rem(self, other: BigInt) -> BigInt {
                        match self.checked_uabs() {
                            Positive(u) => u % other,
                            Negative(u) => -(u % other),
                        }
                    }
                }
                impl Rem<i64> for BigInt
                {
                    type Output = BigInt;

                    #[inline] fn rem(self, other: i64) -> BigInt {
                        self % other.unsigned_abs()
                    }
                }
                impl RemAssign<i64> for BigInt
                {
                    #[inline] fn rem_assign(&mut self, other: i64) {
                        *self %= other.unsigned_abs();
                    }
                }
                impl Rem<BigInt> for i64 {
                    type Output = BigInt;

                    #[inline] fn rem(self, other: BigInt) -> BigInt {
                        match self.checked_uabs() {
                            Positive(u) => u % other,
                            Negative(u) => -(u % other),
                        }
                    }
                }
                impl Rem<i128> for BigInt
                {
                    type Output = BigInt;

                    #[inline] fn rem(self, other: i128) -> BigInt {
                        self % other.unsigned_abs()
                    }
                }
                impl RemAssign<i128> for BigInt
                {
                    #[inline] fn rem_assign(&mut self, other: i128) {
                        *self %= other.unsigned_abs();
                    }
                }
                impl Rem<BigInt> for i128 {
                    type Output = BigInt;

                    #[inline] fn rem(self, other: BigInt) -> BigInt {
                        match self.checked_uabs() {
                            Positive(u) => u % other,
                            Negative(u) => -(u % other),
                        }
                    }
                }
                impl CheckedDiv for BigInt
                {
                    #[inline] fn checked_div(&self, v: &BigInt) -> Option<BigInt> {
                        if v.is_zero() {
                            return None;
                        }
                        Some(self.div(v))
                    }
                }
                impl CheckedEuclid for BigInt
                {
                    #[inline] fn checked_div_euclid(&self, v: &BigInt) -> Option<BigInt> {
                        if v.is_zero() {
                            return None;
                        }
                        Some(self.div_euclid(v))
                    }
                    #[inline] fn checked_rem_euclid(&self, v: &BigInt) -> Option<BigInt> {
                        if v.is_zero() {
                            return None;
                        }
                        Some(self.rem_euclid(v))
                    }
                    fn checked_div_rem_euclid(&self, v: &Self) -> Option<(Self, Self)> {
                        Some(self.div_rem_euclid(v))
                    }
                }
                impl Euclid for BigInt
                {
                    #[inline] fn div_euclid(&self, v: &BigInt) -> BigInt {
                        let (q, r) = self.div_rem(v);
                        if r.is_negative() {
                            if v.is_positive() {
                                q - 1
                            } else {
                                q + 1
                            }
                        } else {
                            q
                        }
                    }
                    #[inline] fn rem_euclid(&self, v: &BigInt) -> BigInt {
                        let r = self % v;
                        if r.is_negative() {
                            if v.is_positive() {
                                r + v
                            } else {
                                r - v
                            }
                        } else {
                            r
                        }
                    }
                    fn div_rem_euclid(&self, v: &Self) -> (Self, Self) {
                        let (q, r) = self.div_rem(v);
                        if r.is_negative() {
                            if v.is_positive() {
                                (q - 1, r + v)
                            } else {
                                (q + 1, r - v)
                            }
                        } else {
                            (q, r)
                        }
                    }
                }
            }
            
            pub mod multiplication
            {
                use ::
                {
                    iter::{ Product },
                    num::
                    {
                        big::{IsizePromotion, UsizePromotion},
                        traits::{CheckedMul, One, Zero},
                    },
                    ops::{ Mul, MulAssign },
                    *,
                };
                use super::CheckedUnsignedAbs::{Negative, Positive};
                use super::Sign::{self, Minus, NoSign, Plus};
                use super::{BigInt, UnsignedAbs};
                /*
                */
                impl Mul<Sign> for Sign {
                    type Output = Sign;

                    #[inline] fn mul(self, other: Sign) -> Sign {
                        match (self, other) {
                            (NoSign, _) | (_, NoSign) => NoSign,
                            (Plus, Plus) | (Minus, Minus) => Plus,
                            (Plus, Minus) | (Minus, Plus) => Minus,
                        }
                    }
                }
                macro_rules! impl_mul {
                    ($(impl Mul<$Other:ty> for $Self:ty;)*) => {$(
                        impl Mul<$Other> for $Self {
                            type Output = BigInt;

                            #[inline]
                            fn mul(self, other: $Other) -> BigInt {
                               
                                let BigInt { data: x, .. } = self;
                                let BigInt { data: y, .. } = other;
                                BigInt::from_biguint(self.sign * other.sign, x * y)
                            }
                        }
                    )*}
                }
                impl_mul! {
                    impl Mul<BigInt> for BigInt;
                    impl Mul<BigInt> for &BigInt;
                    impl Mul<&BigInt> for BigInt;
                    impl Mul<&BigInt> for &BigInt;
                }
                macro_rules! impl_mul_assign {
                    ($(impl MulAssign<$Other:ty> for BigInt;)*) => {$(
                        impl MulAssign<$Other> for BigInt {
                            #[inline]
                            fn mul_assign(&mut self, other: $Other) {
                               
                                let BigInt { data: y, .. } = other;
                                self.data *= y;
                                if self.data.is_zero() {
                                    self.sign = NoSign;
                                } else {
                                    self.sign = self.sign * other.sign;
                                }
                            }
                        }
                    )*}
                }
                impl_mul_assign! {
                    impl MulAssign<BigInt> for BigInt;
                    impl MulAssign<&BigInt> for BigInt;
                }
                promote_all_scalars!(impl Mul for BigInt, mul);
                promote_all_scalars_assign!(impl MulAssign for BigInt, mul_assign);
                forward_all_scalar_binop_to_val_val_commutative!(impl Mul<u32> for BigInt, mul);
                forward_all_scalar_binop_to_val_val_commutative!(impl Mul<u64> for BigInt, mul);
                forward_all_scalar_binop_to_val_val_commutative!(impl Mul<u128> for BigInt, mul);

                impl Mul<u32> for BigInt
                {
                    type Output = BigInt;

                    #[inline] fn mul(self, other: u32) -> BigInt {
                        BigInt::from_biguint(self.sign, self.data * other)
                    }
                }
                impl MulAssign<u32> for BigInt
                {
                    #[inline] fn mul_assign(&mut self, other: u32) {
                        self.data *= other;
                        if self.data.is_zero() {
                            self.sign = NoSign;
                        }
                    }
                }
                impl Mul<u64> for BigInt
                {
                    type Output = BigInt;

                    #[inline] fn mul(self, other: u64) -> BigInt {
                        BigInt::from_biguint(self.sign, self.data * other)
                    }
                }
                impl MulAssign<u64> for BigInt
                {
                    #[inline] fn mul_assign(&mut self, other: u64) {
                        self.data *= other;
                        if self.data.is_zero() {
                            self.sign = NoSign;
                        }
                    }
                }
                impl Mul<u128> for BigInt
                {
                    type Output = BigInt;

                    #[inline] fn mul(self, other: u128) -> BigInt {
                        BigInt::from_biguint(self.sign, self.data * other)
                    }
                }
                impl MulAssign<u128> for BigInt
                {
                    #[inline] fn mul_assign(&mut self, other: u128) {
                        self.data *= other;
                        if self.data.is_zero() {
                            self.sign = NoSign;
                        }
                    }
                }
                forward_all_scalar_binop_to_val_val_commutative!(impl Mul<i32> for BigInt, mul);
                forward_all_scalar_binop_to_val_val_commutative!(impl Mul<i64> for BigInt, mul);
                forward_all_scalar_binop_to_val_val_commutative!(impl Mul<i128> for BigInt, mul);

                impl Mul<i32> for BigInt
                {
                    type Output = BigInt;

                    #[inline] fn mul(self, other: i32) -> BigInt {
                        match other.checked_uabs() {
                            Positive(u) => self * u,
                            Negative(u) => -self * u,
                        }
                    }
                }
                impl MulAssign<i32> for BigInt
                {
                    #[inline] fn mul_assign(&mut self, other: i32) {
                        match other.checked_uabs() {
                            Positive(u) => *self *= u,
                            Negative(u) => {
                                self.sign = -self.sign;
                                self.data *= u;
                            }
                        }
                    }
                }
                impl Mul<i64> for BigInt
                {
                    type Output = BigInt;

                    #[inline] fn mul(self, other: i64) -> BigInt {
                        match other.checked_uabs() {
                            Positive(u) => self * u,
                            Negative(u) => -self * u,
                        }
                    }
                }
                impl MulAssign<i64> for BigInt
                {
                    #[inline] fn mul_assign(&mut self, other: i64) {
                        match other.checked_uabs() {
                            Positive(u) => *self *= u,
                            Negative(u) => {
                                self.sign = -self.sign;
                                self.data *= u;
                            }
                        }
                    }
                }
                impl Mul<i128> for BigInt
                {
                    type Output = BigInt;

                    #[inline] fn mul(self, other: i128) -> BigInt {
                        match other.checked_uabs() {
                            Positive(u) => self * u,
                            Negative(u) => -self * u,
                        }
                    }
                }
                impl MulAssign<i128> for BigInt
                {
                    #[inline] fn mul_assign(&mut self, other: i128) {
                        match other.checked_uabs() {
                            Positive(u) => *self *= u,
                            Negative(u) => {
                                self.sign = -self.sign;
                                self.data *= u;
                            }
                        }
                    }
                }
                impl CheckedMul for BigInt
                {
                    #[inline] fn checked_mul(&self, v: &BigInt) -> Option<BigInt> {
                        Some(self.mul(v))
                    }
                }
                impl_product_iter_type!(BigInt);

            }
            pub mod subtraction
            {
                use ::
                {
                    cmp::{ Ordering::{ Equal, Greater, Less } },
                    num::{ traits::CheckedSub },
                    ops::{ Sub, SubAssign },
                    *,
                };
                use super::CheckedUnsignedAbs::{Negative, Positive};
                use super::Sign::{Minus, NoSign, Plus};
                use super::{BigInt, UnsignedAbs};
                /*
                */
                macro_rules! bigint_sub
                {
                    ($a:expr, $a_owned:expr, $a_data:expr, $b:expr, $b_owned:expr, $b_data:expr) => {
                        match ($a.sign, $b.sign) {
                            (_, NoSign) => $a_owned,
                            (NoSign, _) => -$b_owned,
                           
                            (Plus, Minus) | (Minus, Plus) => BigInt::from_biguint($a.sign, $a_data + $b_data),
                           
                            (Plus, Plus) | (Minus, Minus) => match $a.data.cmp(&$b.data) {
                                Less => BigInt::from_biguint(-$a.sign, $b_data - $a_data),
                                Greater => BigInt::from_biguint($a.sign, $a_data - $b_data),
                                Equal => BigInt::ZERO,
                            },
                        }
                    };
                }
                impl Sub<&BigInt> for &BigInt
                {
                    type Output = BigInt;

                    #[inline] fn sub(self, other: &BigInt) -> BigInt {
                        bigint_sub!(
                            self,
                            self.clone(),
                            &self.data,
                            other,
                            other.clone(),
                            &other.data
                        )
                    }
                }
                impl Sub<BigInt> for &BigInt
                {
                    type Output = BigInt;

                    #[inline] fn sub(self, other: BigInt) -> BigInt {
                        bigint_sub!(self, self.clone(), &self.data, other, other, other.data)
                    }
                }
                impl Sub<&BigInt> for BigInt
                {
                    type Output = BigInt;

                    #[inline] fn sub(self, other: &BigInt) -> BigInt {
                        bigint_sub!(self, self, self.data, other, other.clone(), &other.data)
                    }
                }
                impl Sub<BigInt> for BigInt
                {
                    type Output = BigInt;

                    #[inline] fn sub(self, other: BigInt) -> BigInt {
                        bigint_sub!(self, self, self.data, other, other, other.data)
                    }
                }
                impl SubAssign<&BigInt> for BigInt
                {
                    #[inline] fn sub_assign(&mut self, other: &BigInt) {
                        let n = mem::replace(self, Self::ZERO);
                        *self = n - other;
                    }
                }
                forward_val_assign!(impl SubAssign for BigInt, sub_assign);

                promote_all_scalars!(impl Sub for BigInt, sub);
                promote_all_scalars_assign!(impl SubAssign for BigInt, sub_assign);
                forward_all_scalar_binop_to_val_val!(impl Sub<u32> for BigInt, sub);
                forward_all_scalar_binop_to_val_val!(impl Sub<u64> for BigInt, sub);
                forward_all_scalar_binop_to_val_val!(impl Sub<u128> for BigInt, sub);

                impl Sub<u32> for BigInt
                {
                    type Output = BigInt;

                    #[inline] fn sub(self, other: u32) -> BigInt {
                        match self.sign {
                            NoSign => -BigInt::from(other),
                            Minus => -BigInt::from(self.data + other),
                            Plus => match self.data.cmp(&From::from(other)) {
                                Equal => Self::ZERO,
                                Greater => BigInt::from(self.data - other),
                                Less => -BigInt::from(other - self.data),
                            },
                        }
                    }
                }
                impl SubAssign<u32> for BigInt
                {
                    #[inline] fn sub_assign(&mut self, other: u32) {
                        let n = mem::replace(self, Self::ZERO);
                        *self = n - other;
                    }
                }
                impl Sub<BigInt> for u32 {
                    type Output = BigInt;

                    #[inline] fn sub(self, other: BigInt) -> BigInt {
                        -(other - self)
                    }
                }
                impl Sub<BigInt> for u64 {
                    type Output = BigInt;

                    #[inline] fn sub(self, other: BigInt) -> BigInt {
                        -(other - self)
                    }
                }
                impl Sub<BigInt> for u128 {
                    type Output = BigInt;

                    #[inline] fn sub(self, other: BigInt) -> BigInt {
                        -(other - self)
                    }
                }
                impl Sub<u64> for BigInt
                {
                    type Output = BigInt;

                    #[inline] fn sub(self, other: u64) -> BigInt {
                        match self.sign {
                            NoSign => -BigInt::from(other),
                            Minus => -BigInt::from(self.data + other),
                            Plus => match self.data.cmp(&From::from(other)) {
                                Equal => Self::ZERO,
                                Greater => BigInt::from(self.data - other),
                                Less => -BigInt::from(other - self.data),
                            },
                        }
                    }
                }
                impl SubAssign<u64> for BigInt
                {
                    #[inline] fn sub_assign(&mut self, other: u64) {
                        let n = mem::replace(self, Self::ZERO);
                        *self = n - other;
                    }
                }
                impl Sub<u128> for BigInt
                {
                    type Output = BigInt;

                    #[inline] fn sub(self, other: u128) -> BigInt {
                        match self.sign {
                            NoSign => -BigInt::from(other),
                            Minus => -BigInt::from(self.data + other),
                            Plus => match self.data.cmp(&From::from(other)) {
                                Equal => Self::ZERO,
                                Greater => BigInt::from(self.data - other),
                                Less => -BigInt::from(other - self.data),
                            },
                        }
                    }
                }
                impl SubAssign<u128> for BigInt
                {
                    #[inline] fn sub_assign(&mut self, other: u128) {
                        let n = mem::replace(self, Self::ZERO);
                        *self = n - other;
                    }
                }
                forward_all_scalar_binop_to_val_val!(impl Sub<i32> for BigInt, sub);
                forward_all_scalar_binop_to_val_val!(impl Sub<i64> for BigInt, sub);
                forward_all_scalar_binop_to_val_val!(impl Sub<i128> for BigInt, sub);

                impl Sub<i32> for BigInt
                {
                    type Output = BigInt;

                    #[inline] fn sub(self, other: i32) -> BigInt {
                        match other.checked_uabs() {
                            Positive(u) => self - u,
                            Negative(u) => self + u,
                        }
                    }
                }
                impl SubAssign<i32> for BigInt
                {
                    #[inline] fn sub_assign(&mut self, other: i32) {
                        match other.checked_uabs() {
                            Positive(u) => *self -= u,
                            Negative(u) => *self += u,
                        }
                    }
                }
                impl Sub<BigInt> for i32 {
                    type Output = BigInt;

                    #[inline] fn sub(self, other: BigInt) -> BigInt {
                        match self.checked_uabs() {
                            Positive(u) => u - other,
                            Negative(u) => -other - u,
                        }
                    }
                }
                impl Sub<i64> for BigInt
                {
                    type Output = BigInt;

                    #[inline] fn sub(self, other: i64) -> BigInt {
                        match other.checked_uabs() {
                            Positive(u) => self - u,
                            Negative(u) => self + u,
                        }
                    }
                }
                impl SubAssign<i64> for BigInt
                {
                    #[inline] fn sub_assign(&mut self, other: i64) {
                        match other.checked_uabs() {
                            Positive(u) => *self -= u,
                            Negative(u) => *self += u,
                        }
                    }
                }
                impl Sub<BigInt> for i64 {
                    type Output = BigInt;

                    #[inline] fn sub(self, other: BigInt) -> BigInt {
                        match self.checked_uabs() {
                            Positive(u) => u - other,
                            Negative(u) => -other - u,
                        }
                    }
                }
                impl Sub<i128> for BigInt
                {
                    type Output = BigInt;

                    #[inline] fn sub(self, other: i128) -> BigInt {
                        match other.checked_uabs() {
                            Positive(u) => self - u,
                            Negative(u) => self + u,
                        }
                    }
                }
                impl SubAssign<i128> for BigInt
                {
                    #[inline] fn sub_assign(&mut self, other: i128) {
                        match other.checked_uabs() {
                            Positive(u) => *self -= u,
                            Negative(u) => *self += u,
                        }
                    }
                }
                impl Sub<BigInt> for i128 {
                    type Output = BigInt;

                    #[inline] fn sub(self, other: BigInt) -> BigInt {
                        match self.checked_uabs() {
                            Positive(u) => u - other,
                            Negative(u) => -other - u,
                        }
                    }
                }
                impl CheckedSub for BigInt
                {
                    #[inline] fn checked_sub(&self, v: &BigInt) -> Option<BigInt> {
                        Some(self.sub(v))
                    }
                }
            }
            pub mod bits
            {
                use ::
                {
                    cmp::{ Ordering::{ Equal, Greater, Less } },
                    num::
                    {
                        big::
                        {
                            uint::{ IntDigits },
                            digit::{ BigDigit, DoubleBigDigit },
                        },
                        traits::{ToPrimitive, Zero},
                    },
                    ops::{ BitAnd, BitAndAssign, BitOr, BitOrAssign, BitXor, BitXorAssign },
                    vec::{ Vec },
                    *,
                };
                use super::BigInt;
                use super::Sign::{Minus, NoSign, Plus};
                /*
                */
                #[inline] fn negate_carry(a: BigDigit, acc: &mut DoubleBigDigit) -> BigDigit
                {
                    *acc += DoubleBigDigit::from(!a);
                    let lo = *acc as BigDigit;
                    *acc >>= ::num::big::digit::BITS;
                    lo
                }
                
                fn bitand_pos_neg(a: &mut [BigDigit], b: &[BigDigit]) 
                {
                    let mut carry_b = 1;
                    for (ai, &bi) in a.iter_mut().zip(b.iter()) {
                        let twos_b = negate_carry(bi, &mut carry_b);
                        *ai &= twos_b;
                    }
                    debug_assert!(b.len() > a.len() || carry_b == 0);
                }
                fn bitand_neg_pos(a: &mut Vec<BigDigit>, b: &[BigDigit]) 
                {
                    let mut carry_a = 1;
                    for (ai, &bi) in a.iter_mut().zip(b.iter()) {
                        let twos_a = negate_carry(*ai, &mut carry_a);
                        *ai = twos_a & bi;
                    }
                    debug_assert!(a.len() > b.len() || carry_a == 0);
                    match Ord::cmp(&a.len(), &b.len()) {
                        Greater => a.truncate(b.len()),
                        Equal => {}
                        Less => {
                            let extra = &b[a.len()..];
                            a.extend(extra.iter().cloned());
                        }
                    }
                }
                fn bitand_neg_neg(a: &mut Vec<BigDigit>, b: &[BigDigit]) 
                {
                    let mut carry_a = 1;
                    let mut carry_b = 1;
                    let mut carry_and = 1;
                    for (ai, &bi) in a.iter_mut().zip(b.iter()) {
                        let twos_a = negate_carry(*ai, &mut carry_a);
                        let twos_b = negate_carry(bi, &mut carry_b);
                        *ai = negate_carry(twos_a & twos_b, &mut carry_and);
                    }
                    debug_assert!(a.len() > b.len() || carry_a == 0);
                    debug_assert!(b.len() > a.len() || carry_b == 0);
                    match Ord::cmp(&a.len(), &b.len()) {
                        Greater => {
                            for ai in a[b.len()..].iter_mut() {
                                let twos_a = negate_carry(*ai, &mut carry_a);
                                *ai = negate_carry(twos_a, &mut carry_and);
                            }
                            debug_assert!(carry_a == 0);
                        }
                        Equal => {}
                        Less => {
                            let extra = &b[a.len()..];
                            a.extend(extra.iter().map(|&bi| {
                                let twos_b = negate_carry(bi, &mut carry_b);
                                negate_carry(twos_b, &mut carry_and)
                            }));
                            debug_assert!(carry_b == 0);
                        }
                    }
                    if carry_and != 0 {
                        a.push(1);
                    }
                }
                forward_val_val_binop!(impl BitAnd for BigInt, bitand);
                forward_ref_val_binop_big!(impl BitAnd for BigInt, bitand);
                
                impl BitAnd<&BigInt> for &BigInt
                {
                    type Output = BigInt;

                    #[inline] fn bitand(self, other: &BigInt) -> BigInt {
                        match (self.sign, other.sign) {
                            (NoSign, _) | (_, NoSign) => BigInt::ZERO,
                            (Plus, Plus) => BigInt::from(&self.data & &other.data),
                            (Plus, Minus) => self.clone() & other,
                            (Minus, Plus) => other.clone() & self,
                            (Minus, Minus) => {
                               
                                if self.len() >= other.len() {
                                    self.clone() & other
                                } else {
                                    other.clone() & self
                                }
                            }
                        }
                    }
                }
                impl BitAnd<&BigInt> for BigInt
                {
                    type Output = BigInt;

                    #[inline] fn bitand(mut self, other: &BigInt) -> BigInt {
                        self &= other;
                        self
                    }
                }
                forward_val_assign!(impl BitAndAssign for BigInt, bitand_assign);

                impl BitAndAssign<&BigInt> for BigInt {
                    fn bitand_assign(&mut self, other: &BigInt) {
                        match (self.sign, other.sign) {
                            (NoSign, _) => {}
                            (_, NoSign) => self.set_zero(),
                            (Plus, Plus) => {
                                self.data &= &other.data;
                                if self.data.is_zero() {
                                    self.sign = NoSign;
                                }
                            }
                            (Plus, Minus) => {
                                bitand_pos_neg(self.digits_mut(), other.digits());
                                self.normalize();
                            }
                            (Minus, Plus) => {
                                bitand_neg_pos(self.digits_mut(), other.digits());
                                self.sign = Plus;
                                self.normalize();
                            }
                            (Minus, Minus) => {
                                bitand_neg_neg(self.digits_mut(), other.digits());
                                self.normalize();
                            }
                        }
                    }
                }
                fn bitor_pos_neg(a: &mut Vec<BigDigit>, b: &[BigDigit]) 
                {
                    let mut carry_b = 1;
                    let mut carry_or = 1;
                    for (ai, &bi) in a.iter_mut().zip(b.iter()) {
                        let twos_b = negate_carry(bi, &mut carry_b);
                        *ai = negate_carry(*ai | twos_b, &mut carry_or);
                    }
                    debug_assert!(b.len() > a.len() || carry_b == 0);
                    match Ord::cmp(&a.len(), &b.len()) {
                        Greater => {
                            a.truncate(b.len());
                        }
                        Equal => {}
                        Less => {
                            let extra = &b[a.len()..];
                            a.extend(extra.iter().map(|&bi| {
                                let twos_b = negate_carry(bi, &mut carry_b);
                                negate_carry(twos_b, &mut carry_or)
                            }));
                            debug_assert!(carry_b == 0);
                        }
                    }
                   
                    debug_assert!(carry_or == 0);
                }
                fn bitor_neg_pos(a: &mut [BigDigit], b: &[BigDigit]) 
                {
                    let mut carry_a = 1;
                    let mut carry_or = 1;
                    for (ai, &bi) in a.iter_mut().zip(b.iter()) {
                        let twos_a = negate_carry(*ai, &mut carry_a);
                        *ai = negate_carry(twos_a | bi, &mut carry_or);
                    }
                    debug_assert!(a.len() > b.len() || carry_a == 0);
                    if a.len() > b.len() {
                        for ai in a[b.len()..].iter_mut() {
                            let twos_a = negate_carry(*ai, &mut carry_a);
                            *ai = negate_carry(twos_a, &mut carry_or);
                        }
                        debug_assert!(carry_a == 0);
                    }
                   
                    debug_assert!(carry_or == 0);
                }
                fn bitor_neg_neg(a: &mut Vec<BigDigit>, b: &[BigDigit]) 
                {
                    let mut carry_a = 1;
                    let mut carry_b = 1;
                    let mut carry_or = 1;
                    for (ai, &bi) in a.iter_mut().zip(b.iter()) {
                        let twos_a = negate_carry(*ai, &mut carry_a);
                        let twos_b = negate_carry(bi, &mut carry_b);
                        *ai = negate_carry(twos_a | twos_b, &mut carry_or);
                    }
                    debug_assert!(a.len() > b.len() || carry_a == 0);
                    debug_assert!(b.len() > a.len() || carry_b == 0);
                    if a.len() > b.len() {
                        a.truncate(b.len());
                    }
                   
                    debug_assert!(carry_or == 0);
                }
                forward_val_val_binop!(impl BitOr for BigInt, bitor);
                forward_ref_val_binop_big!(impl BitOr for BigInt, bitor);               
               
                impl BitOr<&BigInt> for &BigInt
                {
                    type Output = BigInt;

                    #[inline] fn bitor(self, other: &BigInt) -> BigInt {
                        match (self.sign, other.sign) {
                            (NoSign, _) => other.clone(),
                            (_, NoSign) => self.clone(),
                            (Plus, Plus) => BigInt::from(&self.data | &other.data),
                            (Plus, Minus) => other.clone() | self,
                            (Minus, Plus) => self.clone() | other,
                            (Minus, Minus) => {
                               
                                if self.len() <= other.len() {
                                    self.clone() | other
                                } else {
                                    other.clone() | self
                                }
                            }
                        }
                    }
                }
                impl BitOr<&BigInt> for BigInt
                {
                    type Output = BigInt;

                    #[inline] fn bitor(mut self, other: &BigInt) -> BigInt {
                        self |= other;
                        self
                    }
                }
                forward_val_assign!(impl BitOrAssign for BigInt, bitor_assign);

                impl BitOrAssign<&BigInt> for BigInt {
                    fn bitor_assign(&mut self, other: &BigInt) {
                        match (self.sign, other.sign) {
                            (_, NoSign) => {}
                            (NoSign, _) => self.clone_from(other),
                            (Plus, Plus) => self.data |= &other.data,
                            (Plus, Minus) => {
                                bitor_pos_neg(self.digits_mut(), other.digits());
                                self.sign = Minus;
                                self.normalize();
                            }
                            (Minus, Plus) => {
                                bitor_neg_pos(self.digits_mut(), other.digits());
                                self.normalize();
                            }
                            (Minus, Minus) => {
                                bitor_neg_neg(self.digits_mut(), other.digits());
                                self.normalize();
                            }
                        }
                    }
                }
                fn bitxor_pos_neg(a: &mut Vec<BigDigit>, b: &[BigDigit]) 
                {
                    let mut carry_b = 1;
                    let mut carry_xor = 1;
                    for (ai, &bi) in a.iter_mut().zip(b.iter()) {
                        let twos_b = negate_carry(bi, &mut carry_b);
                        *ai = negate_carry(*ai ^ twos_b, &mut carry_xor);
                    }
                    debug_assert!(b.len() > a.len() || carry_b == 0);
                    match Ord::cmp(&a.len(), &b.len()) {
                        Greater => {
                            for ai in a[b.len()..].iter_mut() {
                                let twos_b = !0;
                                *ai = negate_carry(*ai ^ twos_b, &mut carry_xor);
                            }
                        }
                        Equal => {}
                        Less => {
                            let extra = &b[a.len()..];
                            a.extend(extra.iter().map(|&bi| {
                                let twos_b = negate_carry(bi, &mut carry_b);
                                negate_carry(twos_b, &mut carry_xor)
                            }));
                            debug_assert!(carry_b == 0);
                        }
                    }
                    if carry_xor != 0 {
                        a.push(1);
                    }
                }
                fn bitxor_neg_pos(a: &mut Vec<BigDigit>, b: &[BigDigit]) 
                {
                    let mut carry_a = 1;
                    let mut carry_xor = 1;
                    for (ai, &bi) in a.iter_mut().zip(b.iter()) {
                        let twos_a = negate_carry(*ai, &mut carry_a);
                        *ai = negate_carry(twos_a ^ bi, &mut carry_xor);
                    }
                    debug_assert!(a.len() > b.len() || carry_a == 0);
                    match Ord::cmp(&a.len(), &b.len()) {
                        Greater => {
                            for ai in a[b.len()..].iter_mut() {
                                let twos_a = negate_carry(*ai, &mut carry_a);
                                *ai = negate_carry(twos_a, &mut carry_xor);
                            }
                            debug_assert!(carry_a == 0);
                        }
                        Equal => {}
                        Less => {
                            let extra = &b[a.len()..];
                            a.extend(extra.iter().map(|&bi| {
                                let twos_a = !0;
                                negate_carry(twos_a ^ bi, &mut carry_xor)
                            }));
                        }
                    }
                    if carry_xor != 0 {
                        a.push(1);
                    }
                }
                fn bitxor_neg_neg(a: &mut Vec<BigDigit>, b: &[BigDigit]) 
                {
                    let mut carry_a = 1;
                    let mut carry_b = 1;
                    for (ai, &bi) in a.iter_mut().zip(b.iter()) {
                        let twos_a = negate_carry(*ai, &mut carry_a);
                        let twos_b = negate_carry(bi, &mut carry_b);
                        *ai = twos_a ^ twos_b;
                    }
                    debug_assert!(a.len() > b.len() || carry_a == 0);
                    debug_assert!(b.len() > a.len() || carry_b == 0);
                    match Ord::cmp(&a.len(), &b.len()) {
                        Greater => {
                            for ai in a[b.len()..].iter_mut() {
                                let twos_a = negate_carry(*ai, &mut carry_a);
                                let twos_b = !0;
                                *ai = twos_a ^ twos_b;
                            }
                            debug_assert!(carry_a == 0);
                        }
                        Equal => {}
                        Less => {
                            let extra = &b[a.len()..];
                            a.extend(extra.iter().map(|&bi| {
                                let twos_a = !0;
                                let twos_b = negate_carry(bi, &mut carry_b);
                                twos_a ^ twos_b
                            }));
                            debug_assert!(carry_b == 0);
                        }
                    }
                }
                forward_all_binop_to_val_ref_commutative!(impl BitXor for BigInt, bitxor);

                impl BitXor<&BigInt> for BigInt
                {
                    type Output = BigInt;

                    #[inline] fn bitxor(mut self, other: &BigInt) -> BigInt {
                        self ^= other;
                        self
                    }
                }
                forward_val_assign!(impl BitXorAssign for BigInt, bitxor_assign);

                impl BitXorAssign<&BigInt> for BigInt
                {
                    fn bitxor_assign(&mut self, other: &BigInt) {
                        match (self.sign, other.sign) {
                            (_, NoSign) => {}
                            (NoSign, _) => self.clone_from(other),
                            (Plus, Plus) => {
                                self.data ^= &other.data;
                                if self.data.is_zero() {
                                    self.sign = NoSign;
                                }
                            }
                            (Plus, Minus) => {
                                bitxor_pos_neg(self.digits_mut(), other.digits());
                                self.sign = Minus;
                                self.normalize();
                            }
                            (Minus, Plus) => {
                                bitxor_neg_pos(self.digits_mut(), other.digits());
                                self.normalize();
                            }
                            (Minus, Minus) => {
                                bitxor_neg_neg(self.digits_mut(), other.digits());
                                self.sign = Plus;
                                self.normalize();
                            }
                        }
                    }
                }
                pub fn set_negative_bit(x: &mut BigInt, bit: u64, value: bool)
                {
                    debug_assert_eq!(x.sign, Minus);
                    let data = &mut x.data;

                    let bits_per_digit = u64::from(::num::big::digit::BITS);
                    if bit >= bits_per_digit * data.len() as u64 {
                        if !value {
                            data.set_bit(bit, true);
                        }
                    } else {
                       
                       
                       
                       
                       
                       
                        let trailing_zeros = data.trailing_zeros().unwrap();
                        if bit > trailing_zeros {
                            data.set_bit(bit, !value);
                        } else if bit == trailing_zeros && !value {
                           
                           
                           
                           
                           
                            let bit_index = (bit / bits_per_digit).to_usize().unwrap();
                            let bit_mask = (1 as BigDigit) << (bit % bits_per_digit);
                            let mut digit_iter = data.digits_mut().iter_mut().skip(bit_index);
                            let mut carry_in = 1;
                            let mut carry_out = 1;

                            let digit = digit_iter.next().unwrap();
                            let twos_in = negate_carry(*digit, &mut carry_in);
                            let twos_out = twos_in & !bit_mask;
                            *digit = negate_carry(twos_out, &mut carry_out);

                            for digit in digit_iter {
                                if carry_in == 0 && carry_out == 0 {
                                   
                                    break;
                                }
                                let twos = negate_carry(*digit, &mut carry_in);
                                *digit = negate_carry(twos, &mut carry_out);
                            }
                            if carry_out != 0 {
                               
                                debug_assert_eq!(carry_in, 0);
                                data.digits_mut().push(1);
                            }
                        } else if bit < trailing_zeros && value {
                           
                           
                           
                           
                           
                           
                            let index_lo = (bit / bits_per_digit).to_usize().unwrap();
                            let index_hi = (trailing_zeros / bits_per_digit).to_usize().unwrap();
                            let bit_mask_lo = ::num::big::digit::MAX << (bit % bits_per_digit);
                            let bit_mask_hi =
                                ::num::big::digit::MAX >> (bits_per_digit - 1 - (trailing_zeros % bits_per_digit));
                            let digits = data.digits_mut();

                            if index_lo == index_hi {
                                digits[index_lo] ^= bit_mask_lo & bit_mask_hi;
                            } else {
                                digits[index_lo] = bit_mask_lo;
                                for digit in &mut digits[index_lo + 1..index_hi] {
                                    *digit = ::num::big::digit::MAX;
                                }
                                digits[index_hi] ^= bit_mask_hi;
                            }
                        } else {
                           
                           
                           
                        }
                    }
                }
            }
            pub mod convert
            {
                use ::
                {
                    cmp::{ Ordering::{ Equal, Greater, Less } },
                    convert::{ TryFrom },
                    num::
                    {
                        big::{ BigUint, ParseBigIntError, ToBigUint, TryFromBigIntError },
                        traits::{ FromPrimitive, Num, One, ToPrimitive, Zero },
                    },
                    str::{ self, FromStr },
                    vec::{ Vec },
                    *,
                };
                use super::Sign::{self, Minus, NoSign, Plus};
                use super::{BigInt, ToBigInt};
                /*
                */
                impl FromStr for BigInt
                {
                    type Err = ParseBigIntError;

                    #[inline] fn from_str(s: &str) -> Result<BigInt, ParseBigIntError> {
                        BigInt::from_str_radix(s, 10)
                    }
                }
                impl Num for BigInt
                {
                    type FromStrRadixErr = ParseBigIntError;

                    /// Creates and initializes a [`BigInt`].
                    #[inline] fn from_str_radix(mut s: &str, radix: u32) -> Result<BigInt, ParseBigIntError> {
                        let sign = if let Some(tail) = s.strip_prefix('-') {
                            if !tail.starts_with('+') {
                                s = tail
                            }
                            Minus
                        } else {
                            Plus
                        };
                        let bu = BigUint::from_str_radix(s, radix)?;
                        Ok(BigInt::from_biguint(sign, bu))
                    }
                }
                impl ToPrimitive for BigInt
                {
                    #[inline] fn to_i64(&self) -> Option<i64> {
                        match self.sign {
                            Plus => self.data.to_i64(),
                            NoSign => Some(0),
                            Minus => {
                                let n = self.data.to_u64()?;
                                let m: u64 = 1 << 63;
                                match n.cmp(&m) {
                                    Less => Some(-(n as i64)),
                                    Equal => Some(i64::MIN),
                                    Greater => None,
                                }
                            }
                        }
                    }
                    #[inline] fn to_i128(&self) -> Option<i128> {
                        match self.sign {
                            Plus => self.data.to_i128(),
                            NoSign => Some(0),
                            Minus => {
                                let n = self.data.to_u128()?;
                                let m: u128 = 1 << 127;
                                match n.cmp(&m) {
                                    Less => Some(-(n as i128)),
                                    Equal => Some(i128::MIN),
                                    Greater => None,
                                }
                            }
                        }
                    }
                    #[inline] fn to_u64(&self) -> Option<u64> {
                        match self.sign {
                            Plus => self.data.to_u64(),
                            NoSign => Some(0),
                            Minus => None,
                        }
                    }
                    #[inline] fn to_u128(&self) -> Option<u128> {
                        match self.sign {
                            Plus => self.data.to_u128(),
                            NoSign => Some(0),
                            Minus => None,
                        }
                    }
                    #[inline] fn to_f32(&self) -> Option<f32> {
                        let n = self.data.to_f32()?;
                        Some(if self.sign == Minus { -n } else { n })
                    }
                    #[inline] fn to_f64(&self) -> Option<f64> {
                        let n = self.data.to_f64()?;
                        Some(if self.sign == Minus { -n } else { n })
                    }
                }
                macro_rules! impl_try_from_bigint 
                {
                    ($T:ty, $to_ty:path) => {
                        impl TryFrom<&BigInt> for $T {
                            type Error = TryFromBigIntError<()>;

                            #[inline]
                            fn try_from(value: &BigInt) -> Result<$T, TryFromBigIntError<()>> {
                                $to_ty(value).ok_or(TryFromBigIntError::new(()))
                            }
                        }
                        impl TryFrom<BigInt> for $T {
                            type Error = TryFromBigIntError<BigInt>;

                            #[inline]
                            fn try_from(value: BigInt) -> Result<$T, TryFromBigIntError<BigInt>> {
                                <$T>::try_from(&value).map_err(|_| TryFromBigIntError::new(value))
                            }
                        }
                    };
                }
                impl_try_from_bigint!(u8, ToPrimitive::to_u8);
                impl_try_from_bigint!(u16, ToPrimitive::to_u16);
                impl_try_from_bigint!(u32, ToPrimitive::to_u32);
                impl_try_from_bigint!(u64, ToPrimitive::to_u64);
                impl_try_from_bigint!(usize, ToPrimitive::to_usize);
                impl_try_from_bigint!(u128, ToPrimitive::to_u128);

                impl_try_from_bigint!(i8, ToPrimitive::to_i8);
                impl_try_from_bigint!(i16, ToPrimitive::to_i16);
                impl_try_from_bigint!(i32, ToPrimitive::to_i32);
                impl_try_from_bigint!(i64, ToPrimitive::to_i64);
                impl_try_from_bigint!(isize, ToPrimitive::to_isize);
                impl_try_from_bigint!(i128, ToPrimitive::to_i128);

                impl FromPrimitive for BigInt
                {
                    #[inline] fn from_i64(n: i64) -> Option<BigInt> {
                        Some(BigInt::from(n))
                    }
                    #[inline] fn from_i128(n: i128) -> Option<BigInt> {
                        Some(BigInt::from(n))
                    }
                    #[inline] fn from_u64(n: u64) -> Option<BigInt> {
                        Some(BigInt::from(n))
                    }
                    #[inline] fn from_u128(n: u128) -> Option<BigInt> {
                        Some(BigInt::from(n))
                    }
                    #[inline] fn from_f64(n: f64) -> Option<BigInt> {
                        if n >= 0.0 {
                            BigUint::from_f64(n).map(BigInt::from)
                        } else {
                            let x = BigUint::from_f64(-n)?;
                            Some(-BigInt::from(x))
                        }
                    }
                }
                impl From<i64> for BigInt
                {
                    #[inline] fn from(n: i64) -> Self {
                        if n >= 0 {
                            BigInt::from(n as u64)
                        } else {
                            let u = u64::MAX - (n as u64) + 1;
                            BigInt {
                                sign: Minus,
                                data: BigUint::from(u),
                            }
                        }
                    }
                }
                impl From<i128> for BigInt
                {
                    #[inline] fn from(n: i128) -> Self {
                        if n >= 0 {
                            BigInt::from(n as u128)
                        } else {
                            let u = u128::MAX - (n as u128) + 1;
                            BigInt {
                                sign: Minus,
                                data: BigUint::from(u),
                            }
                        }
                    }
                }
                macro_rules! impl_bigint_from_int 
                {
                    ($T:ty) => {
                        impl From<$T> for BigInt {
                            #[inline]
                            fn from(n: $T) -> Self {
                                BigInt::from(n as i64)
                            }
                        }
                    };
                }
                impl_bigint_from_int!(i8);
                impl_bigint_from_int!(i16);
                impl_bigint_from_int!(i32);
                impl_bigint_from_int!(isize);

                impl From<u64> for BigInt
                {
                    #[inline] fn from(n: u64) -> Self {
                        if n > 0 {
                            BigInt {
                                sign: Plus,
                                data: BigUint::from(n),
                            }
                        } else {
                            Self::ZERO
                        }
                    }
                }
                impl From<u128> for BigInt
                {
                    #[inline] fn from(n: u128) -> Self {
                        if n > 0 {
                            BigInt {
                                sign: Plus,
                                data: BigUint::from(n),
                            }
                        } else {
                            Self::ZERO
                        }
                    }
                }
                macro_rules! impl_bigint_from_uint 
                {
                    ($T:ty) => {
                        impl From<$T> for BigInt {
                            #[inline]
                            fn from(n: $T) -> Self {
                                BigInt::from(n as u64)
                            }
                        }
                    };
                }
                impl_bigint_from_uint!(u8);
                impl_bigint_from_uint!(u16);
                impl_bigint_from_uint!(u32);
                impl_bigint_from_uint!(usize);

                impl From<BigUint> for BigInt
                {
                    #[inline] fn from(n: BigUint) -> Self {
                        if n.is_zero() {
                            Self::ZERO
                        } else {
                            BigInt {
                                sign: Plus,
                                data: n,
                            }
                        }
                    }
                }
                impl ToBigInt for BigInt
                {
                    #[inline] fn to_bigint(&self) -> Option<BigInt> {
                        Some(self.clone())
                    }
                }
                impl ToBigInt for BigUint
                {
                    #[inline] fn to_bigint(&self) -> Option<BigInt> {
                        if self.is_zero() {
                            Some(BigInt::ZERO)
                        } else {
                            Some(BigInt {
                                sign: Plus,
                                data: self.clone(),
                            })
                        }
                    }
                }
                impl ToBigUint for BigInt
                {
                    #[inline] fn to_biguint(&self) -> Option<BigUint> {
                        match self.sign() {
                            Plus => Some(self.data.clone()),
                            NoSign => Some(BigUint::ZERO),
                            Minus => None,
                        }
                    }
                }
                impl TryFrom<&BigInt> for BigUint
                {
                    type Error = TryFromBigIntError<()>;

                    #[inline] fn try_from(value: &BigInt) -> Result<BigUint, TryFromBigIntError<()>> {
                        value
                            .to_biguint()
                            .ok_or_else(|| TryFromBigIntError::new(()))
                    }
                }
                impl TryFrom<BigInt> for BigUint
                {
                    type Error = TryFromBigIntError<BigInt>;

                    #[inline] fn try_from(value: BigInt) -> Result<BigUint, TryFromBigIntError<BigInt>> {
                        if value.sign() == Sign::Minus {
                            Err(TryFromBigIntError::new(value))
                        } else {
                            Ok(value.data)
                        }
                    }
                }
                macro_rules! impl_to_bigint
                {
                    ($T:ty, $from_ty:path) => {
                        impl ToBigInt for $T {
                            #[inline]
                            fn to_bigint(&self) -> Option<BigInt> {
                                $from_ty(*self)
                            }
                        }
                    };
                }
                impl_to_bigint!(isize, FromPrimitive::from_isize);
                impl_to_bigint!(i8, FromPrimitive::from_i8);
                impl_to_bigint!(i16, FromPrimitive::from_i16);
                impl_to_bigint!(i32, FromPrimitive::from_i32);
                impl_to_bigint!(i64, FromPrimitive::from_i64);
                impl_to_bigint!(i128, FromPrimitive::from_i128);

                impl_to_bigint!(usize, FromPrimitive::from_usize);
                impl_to_bigint!(u8, FromPrimitive::from_u8);
                impl_to_bigint!(u16, FromPrimitive::from_u16);
                impl_to_bigint!(u32, FromPrimitive::from_u32);
                impl_to_bigint!(u64, FromPrimitive::from_u64);
                impl_to_bigint!(u128, FromPrimitive::from_u128);

                impl_to_bigint!(f32, FromPrimitive::from_f32);
                impl_to_bigint!(f64, FromPrimitive::from_f64);

                impl From<bool> for BigInt 
                {
                    fn from(x: bool) -> Self {
                        if x {
                            One::one()
                        } else {
                            Self::ZERO
                        }
                    }
                }
                #[inline] pub fn from_signed_bytes_be(digits: &[u8]) -> BigInt 
                {
                    let sign = match digits.first() {
                        Some(v) if *v > 0x7f => Sign::Minus,
                        Some(_) => Sign::Plus,
                        None => return BigInt::ZERO,
                    };

                    if sign == Sign::Minus {
                       
                        let mut digits = Vec::from(digits);
                        twos_complement_be(&mut digits);
                        BigInt::from_biguint(sign, BigUint::from_bytes_be(&digits))
                    } else {
                        BigInt::from_biguint(sign, BigUint::from_bytes_be(digits))
                    }
                }
                #[inline] pub fn from_signed_bytes_le(digits: &[u8]) -> BigInt 
                {
                    let sign = match digits.last() {
                        Some(v) if *v > 0x7f => Sign::Minus,
                        Some(_) => Sign::Plus,
                        None => return BigInt::ZERO,
                    };

                    if sign == Sign::Minus {
                       
                        let mut digits = Vec::from(digits);
                        twos_complement_le(&mut digits);
                        BigInt::from_biguint(sign, BigUint::from_bytes_le(&digits))
                    } else {
                        BigInt::from_biguint(sign, BigUint::from_bytes_le(digits))
                    }
                }
                #[inline] pub fn to_signed_bytes_be(x: &BigInt) -> Vec<u8> 
                {
                    let mut bytes = x.data.to_bytes_be();
                    let first_byte = bytes.first().cloned().unwrap_or(0);
                    if first_byte > 0x7f
                        && !(first_byte == 0x80 && bytes.iter().skip(1).all(Zero::is_zero) && x.sign == Sign::Minus)
                    {
                       
                        bytes.insert(0, 0);
                    }
                    if x.sign == Sign::Minus {
                        twos_complement_be(&mut bytes);
                    }
                    bytes
                }
                #[inline] pub fn to_signed_bytes_le(x: &BigInt) -> Vec<u8> 
                {
                    let mut bytes = x.data.to_bytes_le();
                    let last_byte = bytes.last().cloned().unwrap_or(0);
                    if last_byte > 0x7f
                        && !(last_byte == 0x80
                            && bytes.iter().rev().skip(1).all(Zero::is_zero)
                            && x.sign == Sign::Minus)
                    {
                       
                        bytes.push(0);
                    }
                    if x.sign == Sign::Minus {
                        twos_complement_le(&mut bytes);
                    }
                    bytes
                }
                /// Perform in-place two's complement of the given binary representation, in little-endian byte order.
                #[inline] fn twos_complement_le(digits: &mut [u8])
                {
                    twos_complement(digits)
                }
                /// Perform in-place two's complement of the given binary representation in big-endian byte order.
                #[inline] fn twos_complement_be(digits: &mut [u8])
                {
                    twos_complement(digits.iter_mut().rev())
                }
                /// Perform in-place two's complement of the given digit iterator starting from the least significant byte.
                #[inline] fn twos_complement<'a, I>(digits: I) where
                I: IntoIterator<Item = &'a mut u8>
                {
                    let mut carry = true;
                    for d in digits {
                        *d = !*d;
                        if carry {
                            *d = d.wrapping_add(1);
                            carry = d.is_zero();
                        }
                    }
                }
            }
            pub mod power
            {
                use ::
                {
                    num::
                    {
                        big::{ BigUint }, 
                        integers::Integer,
                        traits::{Pow, Signed, Zero},
                    },
                    *,
                };
                use super::BigInt;
                use super::Sign::{self, Minus, Plus};
                /*
                */
                /// Help function for pow
                ///
                /// Computes the effect of the exponent on the sign.
                #[inline] fn powsign<T: Integer>(sign: Sign, other: &T) -> Sign {
                    if other.is_zero() {
                        Plus
                    } else if sign != Minus || other.is_odd() {
                        sign
                    } else {
                        -sign
                    }
                }
                macro_rules! pow_impl {
                    ($T:ty) => {
                        impl Pow<$T> for BigInt {
                            type Output = BigInt;

                            #[inline]
                            fn pow(self, rhs: $T) -> BigInt {
                                BigInt::from_biguint(powsign(self.sign, &rhs), self.data.pow(rhs))
                            }
                        }
                        impl Pow<&$T> for BigInt {
                            type Output = BigInt;

                            #[inline]
                            fn pow(self, rhs: &$T) -> BigInt {
                                BigInt::from_biguint(powsign(self.sign, rhs), self.data.pow(rhs))
                            }
                        }
                        impl Pow<$T> for &BigInt {
                            type Output = BigInt;

                            #[inline]
                            fn pow(self, rhs: $T) -> BigInt {
                                BigInt::from_biguint(powsign(self.sign, &rhs), Pow::pow(&self.data, rhs))
                            }
                        }
                        impl Pow<&$T> for &BigInt {
                            type Output = BigInt;

                            #[inline]
                            fn pow(self, rhs: &$T) -> BigInt {
                                BigInt::from_biguint(powsign(self.sign, rhs), Pow::pow(&self.data, rhs))
                            }
                        }
                    };
                }
                pow_impl!(u8);
                pow_impl!(u16);
                pow_impl!(u32);
                pow_impl!(u64);
                pow_impl!(usize);
                pow_impl!(u128);
                pow_impl!(BigUint);

                pub(super) fn modpow(x: &BigInt, exponent: &BigInt, modulus: &BigInt) -> BigInt {
                    assert!(
                        !exponent.is_negative(),
                        "negative exponentiation is not supported!"
                    );
                    assert!(
                        !modulus.is_zero(),
                        "attempt to calculate with zero modulus!"
                    );

                    let result = x.data.modpow(&exponent.data, &modulus.data);
                    if result.is_zero() {
                        return BigInt::ZERO;
                    }
                   
                    let (sign, mag) = match (x.is_negative() && exponent.is_odd(), modulus.is_negative()) {
                        (false, false) => (Plus, result),
                        (true, false) => (Plus, &modulus.data - result),
                        (false, true) => (Minus, &modulus.data - result),
                        (true, true) => (Minus, result),
                    };
                    BigInt::from_biguint(sign, mag)
                }
            }
            pub mod shift
            {
                use ::
                {
                    num::traits::{ PrimInt, Signed, Zero },
                    ops::{ Shl, ShlAssign, Shr, ShrAssign },
                    *,
                };
                use super::BigInt;
                use super::Sign::NoSign;
                /*
                */
                macro_rules! impl_shift
                {
                    (@ref $Shx:ident :: $shx:ident, $ShxAssign:ident :: $shx_assign:ident, $rhs:ty) => {
                        impl $Shx<&$rhs> for BigInt {
                            type Output = BigInt;

                            #[inline]
                            fn $shx(self, rhs: &$rhs) -> BigInt {
                                $Shx::$shx(self, *rhs)
                            }
                        }
                        impl $Shx<&$rhs> for &BigInt {
                            type Output = BigInt;

                            #[inline]
                            fn $shx(self, rhs: &$rhs) -> BigInt {
                                $Shx::$shx(self, *rhs)
                            }
                        }
                        impl $ShxAssign<&$rhs> for BigInt {
                            #[inline]
                            fn $shx_assign(&mut self, rhs: &$rhs) {
                                $ShxAssign::$shx_assign(self, *rhs);
                            }
                        }
                    };
                    ($($rhs:ty),+) => {$(
                        impl Shl<$rhs> for BigInt {
                            type Output = BigInt;

                            #[inline]
                            fn shl(self, rhs: $rhs) -> BigInt {
                                BigInt::from_biguint(self.sign, self.data << rhs)
                            }
                        }
                        impl Shl<$rhs> for &BigInt {
                            type Output = BigInt;

                            #[inline]
                            fn shl(self, rhs: $rhs) -> BigInt {
                                BigInt::from_biguint(self.sign, &self.data << rhs)
                            }
                        }
                        impl ShlAssign<$rhs> for BigInt {
                            #[inline]
                            fn shl_assign(&mut self, rhs: $rhs) {
                                self.data <<= rhs
                            }
                        }
                        impl_shift! { @ref Shl::shl, ShlAssign::shl_assign, $rhs }
                        impl Shr<$rhs> for BigInt {
                            type Output = BigInt;

                            #[inline]
                            fn shr(self, rhs: $rhs) -> BigInt {
                                let round_down = shr_round_down(&self, rhs);
                                let data = self.data >> rhs;
                                let data = if round_down { data + 1u8 } else { data };
                                BigInt::from_biguint(self.sign, data)
                            }
                        }
                        impl Shr<$rhs> for &BigInt {
                            type Output = BigInt;

                            #[inline]
                            fn shr(self, rhs: $rhs) -> BigInt {
                                let round_down = shr_round_down(self, rhs);
                                let data = &self.data >> rhs;
                                let data = if round_down { data + 1u8 } else { data };
                                BigInt::from_biguint(self.sign, data)
                            }
                        }
                        impl ShrAssign<$rhs> for BigInt {
                            #[inline]
                            fn shr_assign(&mut self, rhs: $rhs) {
                                let round_down = shr_round_down(self, rhs);
                                self.data >>= rhs;
                                if round_down {
                                    self.data += 1u8;
                                } else if self.data.is_zero() {
                                    self.sign = NoSign;
                                }
                            }
                        }
                        impl_shift! { @ref Shr::shr, ShrAssign::shr_assign, $rhs }
                    )*};
                }
                impl_shift! { u8, u16, u32, u64, u128, usize }
                impl_shift! { i8, i16, i32, i64, i128, isize }
                
                fn shr_round_down<T: PrimInt>(i: &BigInt, shift: T) -> bool
                {
                    if i.is_negative() {
                        let zeros = i.trailing_zeros().expect("negative values are non-zero");
                        shift > T::zero() && shift.to_u64().map(|shift| zeros < shift).unwrap_or(true)
                    } else {
                        false
                    }
                }
            }
            /// A `Sign` is a [`BigInt`]'s composing element.
            #[derive(PartialEq, PartialOrd, Eq, Ord, Copy, Clone, Debug, Hash)]
            pub enum Sign 
            {
                Minus,
                NoSign,
                Plus,
            }
            impl Neg for Sign 
            {
                type Output = Sign;
                /// Negate `Sign` value.
                #[inline] fn neg(self) -> Sign {
                    match self {
                        Minus => Plus,
                        NoSign => NoSign,
                        Plus => Minus,
                    }
                }
            }
            /// A big signed integer type.
            pub struct BigInt 
            {
                sign: Sign,
                data: BigUint,
            }
                       
            impl Clone for BigInt
            {
                #[inline] fn clone(&self) -> Self {
                    BigInt {
                        sign: self.sign,
                        data: self.data.clone(),
                    }
                }
                #[inline] fn clone_from(&mut self, other: &Self) {
                    self.sign = other.sign;
                    self.data.clone_from(&other.data);
                }
            }
            impl hash::Hash for BigInt
            {
                #[inline] fn hash<H: hash::Hasher>(&self, state: &mut H) {
                    debug_assert!((self.sign != NoSign) ^ self.data.is_zero());
                    self.sign.hash(state);
                    if self.sign != NoSign {
                        self.data.hash(state);
                    }
                }
            }
            impl PartialEq for BigInt
            {
                #[inline] fn eq(&self, other: &BigInt) -> bool {
                    debug_assert!((self.sign != NoSign) ^ self.data.is_zero());
                    debug_assert!((other.sign != NoSign) ^ other.data.is_zero());
                    self.sign == other.sign && (self.sign == NoSign || self.data == other.data)
                }
            }
            impl Eq for BigInt {}
            impl PartialOrd for BigInt
            {
                #[inline] fn partial_cmp(&self, other: &BigInt) -> Option<Ordering> {
                    Some(self.cmp(other))
                }
            }
            impl Ord for BigInt
            {
                #[inline] fn cmp(&self, other: &BigInt) -> Ordering {
                    debug_assert!((self.sign != NoSign) ^ self.data.is_zero());
                    debug_assert!((other.sign != NoSign) ^ other.data.is_zero());
                    let scmp = self.sign.cmp(&other.sign);
                    if scmp != Equal {
                        return scmp;
                    }
                    match self.sign {
                        NoSign => Equal,
                        Plus => self.data.cmp(&other.data),
                        Minus => other.data.cmp(&self.data),
                    }
                }
            }
            impl Default for BigInt
            {
                #[inline] fn default() -> BigInt {
                    Self::ZERO
                }
            }
            impl fmt::Debug for BigInt
            {
                fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result
                {    fmt::Display::fmt(self, f)
                }
            }
            impl fmt::Display for BigInt
            {
                fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result
                {    f.pad_integral(!self.is_negative(), "", &self.data.to_str_radix(10))
                }
            }
            impl fmt::Binary for BigInt
            {
                fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result
                {    f.pad_integral(!self.is_negative(), "0b", &self.data.to_str_radix(2))
                }
            }
            impl fmt::Octal for BigInt
            {
                fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result
                {    f.pad_integral(!self.is_negative(), "0o", &self.data.to_str_radix(8))
                }
            }
            impl fmt::LowerHex for BigInt
            {
                fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result
                {    f.pad_integral(!self.is_negative(), "0x", &self.data.to_str_radix(16))
                }
            }
            impl fmt::UpperHex for BigInt
            {
                fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result
                {    let mut s = self.data.to_str_radix(16);
                    s.make_ascii_uppercase();
                    f.pad_integral(!self.is_negative(), "0x", &s)
                }
            }
            
            impl Not for BigInt
            {
                type  Output = BigInt;

                fn not(mut self) -> BigInt {
                    match self.sign {
                        NoSign | Plus => {
                            self.data += 1u32;
                            self.sign = Minus;
                        }
                        Minus => {
                            self.data -= 1u32;
                            self.sign = if self.data.is_zero() { NoSign } else { Plus };
                        }
                    }
                    self
                }
            }
            impl Not for &BigInt
            {
                type  Output = BigInt;

                fn not(self) -> BigInt {
                    match self.sign {
                        NoSign => -BigInt::one(),
                        Plus => -BigInt::from(&self.data + 1u32),
                        Minus => BigInt::from(&self.data - 1u32),
                    }
                }
            }
            impl Zero for BigInt
            {
                #[inline] fn zero() -> BigInt {
                    Self::ZERO
                }
                #[inline] fn set_zero(&mut self) {
                    self.data.set_zero();
                    self.sign = NoSign;
                }
                #[inline] fn is_zero(&self) -> bool {
                    self.sign == NoSign
                }
            }
            impl ConstZero for BigInt 
            {
               
                const ZERO: Self = Self::ZERO;
            }
            impl One for BigInt
            {
                #[inline] fn one() -> BigInt {
                    BigInt {
                        sign: Plus,
                        data: BigUint::one(),
                    }
                }
                #[inline] fn set_one(&mut self) {
                    self.data.set_one();
                    self.sign = Plus;
                }
                #[inline] fn is_one(&self) -> bool {
                    self.sign == Plus && self.data.is_one()
                }
            }
            impl Signed for BigInt
            {
                #[inline] fn abs(&self) -> BigInt {
                    match self.sign {
                        Plus | NoSign => self.clone(),
                        Minus => BigInt::from(self.data.clone()),
                    }
                }
                #[inline] fn abs_sub(&self, other: &BigInt) -> BigInt {
                    if *self <= *other {
                        Self::ZERO
                    } else {
                        self - other
                    }
                }
                #[inline] fn signum(&self) -> BigInt {
                    match self.sign {
                        Plus => BigInt::one(),
                        Minus => -BigInt::one(),
                        NoSign => Self::ZERO,
                    }
                }
                #[inline] fn is_positive(&self) -> bool {
                    self.sign == Plus
                }
                #[inline] fn is_negative(&self) -> bool {
                    self.sign == Minus
                }
            }
            trait UnsignedAbs 
            {
                type Unsigned;

                fn checked_uabs(self) -> CheckedUnsignedAbs<Self::Unsigned>;
            }
            enum CheckedUnsignedAbs<T> 
            {
                Positive(T),
                Negative(T),
            } use self::CheckedUnsignedAbs::{Negative, Positive};

            macro_rules! impl_unsigned_abs
            {
                ($Signed:ty, $Unsigned:ty) => {
                    impl UnsignedAbs for $Signed {
                        type Unsigned = $Unsigned;

                        #[inline]
                        fn checked_uabs(self) -> CheckedUnsignedAbs<Self::Unsigned> {
                            if self >= 0 {
                                Positive(self as $Unsigned)
                            } else {
                                Negative(self.wrapping_neg() as $Unsigned)
                            }
                        }
                    }
                };
            }
            impl_unsigned_abs!(i8, u8);
            impl_unsigned_abs!(i16, u16);
            impl_unsigned_abs!(i32, u32);
            impl_unsigned_abs!(i64, u64);
            impl_unsigned_abs!(i128, u128);
            impl_unsigned_abs!(isize, usize);

            impl Neg for BigInt
            {
                type  Output = BigInt;

                #[inline] fn neg(mut self) -> BigInt {
                    self.sign = -self.sign;
                    self
                }
            }
            impl Neg for &BigInt
            {
                type Output = BigInt;

                #[inline] fn neg(self) -> BigInt 
                {
                    -self.clone()
                }
            }
            impl Integer for BigInt
            {
                #[inline] fn div_rem(&self, other: &BigInt) -> (BigInt, BigInt) {
                   
                    let (d_ui, r_ui) = self.data.div_rem(&other.data);
                    let d = BigInt::from_biguint(self.sign, d_ui);
                    let r = BigInt::from_biguint(self.sign, r_ui);
                    if other.is_negative() {
                        (-d, r)
                    } else {
                        (d, r)
                    }
                }
                #[inline] fn div_floor(&self, other: &BigInt) -> BigInt {
                    let (d_ui, m) = self.data.div_mod_floor(&other.data);
                    let d = BigInt::from(d_ui);
                    match (self.sign, other.sign) {
                        (Plus, Plus) | (NoSign, Plus) | (Minus, Minus) => d,
                        (Plus, Minus) | (NoSign, Minus) | (Minus, Plus) => {
                            if m.is_zero() {
                                -d
                            } else {
                                -d - 1u32
                            }
                        }
                        (_, NoSign) => unreachable!(),
                    }
                }
                #[inline] fn mod_floor(&self, other: &BigInt) -> BigInt {
                   
                    let m_ui = self.data.mod_floor(&other.data);
                    let m = BigInt::from_biguint(other.sign, m_ui);
                    match (self.sign, other.sign) {
                        (Plus, Plus) | (NoSign, Plus) | (Minus, Minus) => m,
                        (Plus, Minus) | (NoSign, Minus) | (Minus, Plus) => {
                            if m.is_zero() {
                                m
                            } else {
                                other - m
                            }
                        }
                        (_, NoSign) => unreachable!(),
                    }
                }
                fn div_mod_floor(&self, other: &BigInt) -> (BigInt, BigInt) {
                   
                    let (d_ui, m_ui) = self.data.div_mod_floor(&other.data);
                    let d = BigInt::from(d_ui);
                    let m = BigInt::from_biguint(other.sign, m_ui);
                    match (self.sign, other.sign) {
                        (Plus, Plus) | (NoSign, Plus) | (Minus, Minus) => (d, m),
                        (Plus, Minus) | (NoSign, Minus) | (Minus, Plus) => {
                            if m.is_zero() {
                                (-d, m)
                            } else {
                                (-d - 1u32, other - m)
                            }
                        }
                        (_, NoSign) => unreachable!(),
                    }
                }
                #[inline] fn div_ceil(&self, other: &Self) -> Self {
                    let (d_ui, m) = self.data.div_mod_floor(&other.data);
                    let d = BigInt::from(d_ui);
                    match (self.sign, other.sign) {
                        (Plus, Minus) | (NoSign, Minus) | (Minus, Plus) => -d,
                        (Plus, Plus) | (NoSign, Plus) | (Minus, Minus) => {
                            if m.is_zero() {
                                d
                            } else {
                                d + 1u32
                            }
                        }
                        (_, NoSign) => unreachable!(),
                    }
                }
                /// Calculates the Greatest Common Divisor (GCD) of the number and `other`.
                #[inline] fn gcd(&self, other: &BigInt) -> BigInt {
                    BigInt::from(self.data.gcd(&other.data))
                }
                /// Calculates the Lowest Common Multiple (LCM) of the number and `other`.
                #[inline] fn lcm(&self, other: &BigInt) -> BigInt {
                    BigInt::from(self.data.lcm(&other.data))
                }
                /// Calculates the Greatest Common Divisor (GCD) and
                /// Lowest Common Multiple (LCM) together.
                #[inline] fn gcd_lcm(&self, other: &BigInt) -> (BigInt, BigInt) {
                    let (gcd, lcm) = self.data.gcd_lcm(&other.data);
                    (BigInt::from(gcd), BigInt::from(lcm))
                }
                /// Greatest common divisor, least common multiple, and Bézout coefficients.
                #[inline] fn extended_gcd_lcm(&self, other: &BigInt) -> (::num::integers::ExtendedGcd<BigInt>, BigInt) {
                    let egcd = self.extended_gcd(other);
                    let lcm = if egcd.gcd.is_zero() {
                        Self::ZERO
                    } else {
                        BigInt::from(&self.data / &egcd.gcd.data * &other.data)
                    };
                    (egcd, lcm)
                }
                /// Deprecated, use `is_multiple_of` instead.
                #[inline] fn divides(&self, other: &BigInt) -> bool {
                    self.is_multiple_of(other)
                }
                /// Returns `true` if the number is a multiple of `other`.
                #[inline] fn is_multiple_of(&self, other: &BigInt) -> bool {
                    self.data.is_multiple_of(&other.data)
                }
                /// Returns `true` if the number is divisible by `2`.
                #[inline] fn is_even(&self) -> bool {
                    self.data.is_even()
                }
                /// Returns `true` if the number is not divisible by `2`.
                #[inline] fn is_odd(&self) -> bool {
                    self.data.is_odd()
                }
                /// Rounds up to nearest multiple of argument.
                #[inline] fn next_multiple_of(&self, other: &Self) -> Self {
                    let m = self.mod_floor(other);
                    if m.is_zero() {
                        self.clone()
                    } else {
                        self + (other - m)
                    }
                }
                /// Rounds down to nearest multiple of argument.
                #[inline] fn prev_multiple_of(&self, other: &Self) -> Self {
                    self - self.mod_floor(other)
                }
                fn dec(&mut self) {
                    *self -= 1u32;
                }
                fn inc(&mut self) {
                    *self += 1u32;
                }
            }
            impl Roots for BigInt
            {
                fn nth_root(&self, n: u32) -> Self
                {
                    assert!(
                        !(self.is_negative() && n.is_even()),
                        "root of degree {} is imaginary",
                        n
                    );

                    BigInt::from_biguint(self.sign, self.data.nth_root(n))
                }
                fn sqrt(&self) -> Self
                {
                    assert!(!self.is_negative(), "square root is imaginary");

                    BigInt::from_biguint(self.sign, self.data.sqrt())
                }
                fn cbrt(&self) -> Self
                {
                    BigInt::from_biguint(self.sign, self.data.cbrt())
                }
            }
            impl IntDigits for BigInt
            {
                #[inline] fn digits(&self) -> &[BigDigit] { self.data.digits() }
                #[inline] fn digits_mut(&mut self) -> &mut Vec<BigDigit> { self.data.digits_mut() }
                #[inline] fn normalize(&mut self)
                {
                    self.data.normalize();
                    if self.data.is_zero() { self.sign = NoSign; }
                }
                #[inline] fn capacity(&self) -> usize { self.data.capacity() }
                #[inline] fn len(&self) -> usize { self.data.len() }
            }
            /// A generic trait for converting a value to a [`BigInt`]. This may return
            /// `None` when converting from `f32` or `f64`, and will always succeed
            /// when converting from any integer or unsigned primitive, or [`BigUint`].
            pub trait ToBigInt
            {
                /// Converts the value of `self` to a [`BigInt`].
                fn to_bigint(&self) -> Option<BigInt>;
            }
            impl BigInt
            {
                /// A constant `BigInt` with value 0, useful for static initialization.
                pub const ZERO: Self = BigInt {
                    sign: NoSign,
                    data: BigUint::ZERO,
                };
                /// Creates and initializes a [`BigInt`].
                #[inline] pub fn new(sign: Sign, digits: Vec<u32>) -> BigInt {
                    BigInt::from_biguint(sign, BigUint::new(digits))
                }
                /// Creates and initializes a [`BigInt`].
                #[inline] pub fn from_biguint(mut sign: Sign, mut data: BigUint) -> BigInt {
                    if sign == NoSign {
                        data.assign_from_slice(&[]);
                    } else if data.is_zero() {
                        sign = NoSign;
                    }
                    BigInt { sign, data }
                }
                /// Creates and initializes a [`BigInt`].
                #[inline] pub fn from_slice(sign: Sign, slice: &[u32]) -> BigInt {
                    BigInt::from_biguint(sign, BigUint::from_slice(slice))
                }
                /// Reinitializes a [`BigInt`].
                #[inline] pub fn assign_from_slice(&mut self, sign: Sign, slice: &[u32]) {
                    if sign == NoSign {
                        self.set_zero();
                    } else {
                        self.data.assign_from_slice(slice);
                        self.sign = if self.data.is_zero() { NoSign } else { sign };
                    }
                }
                /// Creates and initializes a [`BigInt`].
                #[inline] pub fn from_bytes_be(sign: Sign, bytes: &[u8]) -> BigInt {
                    BigInt::from_biguint(sign, BigUint::from_bytes_be(bytes))
                }
                /// Creates and initializes a [`BigInt`].
                #[inline] pub fn from_bytes_le(sign: Sign, bytes: &[u8]) -> BigInt {
                    BigInt::from_biguint(sign, BigUint::from_bytes_le(bytes))
                }
                /// Creates and initializes a [`BigInt`] from an array of bytes in
                /// two's complement binary representation.
                #[inline] pub fn from_signed_bytes_be(digits: &[u8]) -> BigInt {
                    convert::from_signed_bytes_be(digits)
                }
                /// Creates and initializes a [`BigInt`] from an array of bytes in two's complement.
                #[inline] pub fn from_signed_bytes_le(digits: &[u8]) -> BigInt {
                    convert::from_signed_bytes_le(digits)
                }
                /// Creates and initializes a [`BigInt`].
                #[inline] pub fn parse_bytes(buf: &[u8], radix: u32) -> Option<BigInt> {
                    let s = str::from_utf8(buf).ok()?;
                    BigInt::from_str_radix(s, radix).ok()
                }
                /// Creates and initializes a [`BigInt`]. Each `u8` of the input slice is
                /// interpreted as one digit of the number
                /// and must therefore be less than `radix`.
                pub fn from_radix_be(sign: Sign, buf: &[u8], radix: u32) -> Option<BigInt> {
                    let u = BigUint::from_radix_be(buf, radix)?;
                    Some(BigInt::from_biguint(sign, u))
                }
                /// Creates and initializes a [`BigInt`]. Each `u8` of the input slice is
                /// interpreted as one digit of the number
                /// and must therefore be less than `radix`.
                pub fn from_radix_le(sign: Sign, buf: &[u8], radix: u32) -> Option<BigInt> {
                    let u = BigUint::from_radix_le(buf, radix)?;
                    Some(BigInt::from_biguint(sign, u))
                }
                /// Returns the sign and the byte representation of the [`BigInt`] in big-endian byte order.
                #[inline] pub fn to_bytes_be(&self) -> (Sign, Vec<u8>) {
                    (self.sign, self.data.to_bytes_be())
                }
                /// Returns the sign and the byte representation of the [`BigInt`] in little-endian byte order.
                #[inline] pub fn to_bytes_le(&self) -> (Sign, Vec<u8>) {
                    (self.sign, self.data.to_bytes_le())
                }
                /// Returns the sign and the `u32` digits representation of the [`BigInt`] ordered least
                /// significant digit first.
                #[inline] pub fn to_u32_digits(&self) -> (Sign, Vec<u32>) {
                    (self.sign, self.data.to_u32_digits())
                }
                /// Returns the sign and the `u64` digits representation of the [`BigInt`] ordered least
                /// significant digit first.
                #[inline] pub fn to_u64_digits(&self) -> (Sign, Vec<u64>) {
                    (self.sign, self.data.to_u64_digits())
                }
                /// Returns an iterator of `u32` digits representation of the [`BigInt`] ordered least
                /// significant digit first.
                #[inline] pub fn iter_u32_digits(&self) -> U32Digits<'_> {
                    self.data.iter_u32_digits()
                }
                /// Returns an iterator of `u64` digits representation of the [`BigInt`] ordered least
                /// significant digit first.
                #[inline] pub fn iter_u64_digits(&self) -> U64Digits<'_> {
                    self.data.iter_u64_digits()
                }
                /// Returns the two's-complement byte representation of the [`BigInt`] in big-endian byte order.
                #[inline] pub fn to_signed_bytes_be(&self) -> Vec<u8> {
                    convert::to_signed_bytes_be(self)
                }
                /// Returns the two's-complement byte representation of the [`BigInt`] in little-endian byte order.
                #[inline] pub fn to_signed_bytes_le(&self) -> Vec<u8> {
                    convert::to_signed_bytes_le(self)
                }
                /// Returns the integer formatted as a string in the given radix.
                #[inline] pub fn to_str_radix(&self, radix: u32) -> String {
                    let mut v = to_str_radix_reversed(&self.data, radix);

                    if self.is_negative() {
                        v.push(b'-');
                    }
                    v.reverse();
                    unsafe { String::from_utf8_unchecked(v) }
                }
                /// Returns the integer in the requested base in big-endian digit order.
                #[inline] pub fn to_radix_be(&self, radix: u32) -> (Sign, Vec<u8>) {
                    (self.sign, self.data.to_radix_be(radix))
                }
                /// Returns the integer in the requested base in little-endian digit order.
                #[inline] pub fn to_radix_le(&self, radix: u32) -> (Sign, Vec<u8>) {
                    (self.sign, self.data.to_radix_le(radix))
                }
                /// Returns the sign of the [`BigInt`] as a [`Sign`].
                #[inline] pub fn sign(&self) -> Sign {
                    self.sign
                }
                /// Returns the magnitude of the [`BigInt`] as a [`BigUint`].
                #[inline] pub fn magnitude(&self) -> &BigUint {
                    &self.data
                }
                /// Convert this [`BigInt`] into its [`Sign`] and [`BigUint`] magnitude,
                /// the reverse of [`BigInt::from_biguint()`].
                #[inline] pub fn into_parts(self) -> (Sign, BigUint) {
                    (self.sign, self.data)
                }
                /// Determines the fewest bits necessary to express the [`BigInt`],
                /// not including the sign.
                #[inline] pub fn bits(&self) -> u64 {
                    self.data.bits()
                }
                /// Converts this [`BigInt`] into a [`BigUint`], if it's not negative.
                #[inline] pub fn to_biguint(&self) -> Option<BigUint> {
                    match self.sign {
                        Plus => Some(self.data.clone()),
                        NoSign => Some(BigUint::ZERO),
                        Minus => None,
                    }
                }
                #[inline] pub fn checked_add(&self, v: &BigInt) -> Option<BigInt> {
                    Some(self + v)
                }
                #[inline] pub fn checked_sub(&self, v: &BigInt) -> Option<BigInt> {
                    Some(self - v)
                }
                #[inline] pub fn checked_mul(&self, v: &BigInt) -> Option<BigInt> {
                    Some(self * v)
                }
                #[inline] pub fn checked_div(&self, v: &BigInt) -> Option<BigInt> {
                    if v.is_zero() {
                        return None;
                    }
                    Some(self / v)
                }
                /// Returns `self ^ exponent`.
                pub fn pow(&self, exponent: u32) -> Self {
                    Pow::pow(self, exponent)
                }
                /// Returns `(self ^ exponent) mod modulus`
                ///
                /// Note that this rounds like `mod_floor`, not like the `%` operator,
                /// which makes a difference when given a negative `self` or `modulus`.
                pub fn modpow(&self, exponent: &Self, modulus: &Self) -> Self {
                    power::modpow(self, exponent, modulus)
                }
                /// Returns the modular multiplicative inverse if it exists, otherwise `None`.
                /// assert_eq!(BigInt::one().modinv(&m), Some(BigInt::one()));
                /// let neg1 = &m - 1u32;
                /// assert_eq!(neg1.modinv(&m), Some(neg1));
                ///
                ///
                /// let a = BigInt::from(271);
                /// let x = a.modinv(&m).unwrap();
                /// assert_eq!(x, BigInt::from(106));
                /// assert_eq!(x.modinv(&m).unwrap(), a);
                /// assert_eq!((&a * x).mod_floor(&m), BigInt::one());
                ///
                ///
                /// let b = -&a;
                /// let x = b.modinv(&m).unwrap();
                /// assert_eq!(x, BigInt::from(277));
                /// assert_eq!((&b * x).mod_floor(&m), BigInt::one());
                ///
                ///
                /// let n = -&m;
                /// let x = a.modinv(&n).unwrap();
                /// assert_eq!(x, BigInt::from(-277));
                /// assert_eq!((&a * x).mod_floor(&n), &n + 1);
                ///
                ///
                /// let x = b.modinv(&n).unwrap();
                /// assert_eq!(x, BigInt::from(-106));
                /// assert_eq!((&b * x).mod_floor(&n), &n + 1);
                /// ```
                pub fn modinv(&self, modulus: &Self) -> Option<Self> {
                    let result = self.data.modinv(&modulus.data)?;
                   
                    let (sign, mag) = match (self.is_negative(), modulus.is_negative()) {
                        (false, false) => (Plus, result),
                        (true, false) => (Plus, &modulus.data - result),
                        (false, true) => (Minus, &modulus.data - result),
                        (true, true) => (Minus, result),
                    };
                    Some(BigInt::from_biguint(sign, mag))
                }
                /// Returns the truncated principal square root of `self` --
                /// see [`::num::integers::Roots::sqrt()`].
                pub fn sqrt(&self) -> Self {
                    Roots::sqrt(self)
                }
                /// Returns the truncated principal cube root of `self` --
                /// see [`::num::integers::Roots::cbrt()`].
                pub fn cbrt(&self) -> Self {
                    Roots::cbrt(self)
                }
                /// Returns the truncated principal `n`th root of `self` --
                /// See [`::num::integers::Roots::nth_root()`].
                pub fn nth_root(&self, n: u32) -> Self {
                    Roots::nth_root(self, n)
                }
                /// Returns the number of least-significant bits that are zero,
                /// or `None` if the entire number is zero.
                pub fn trailing_zeros(&self) -> Option<u64> {
                    self.data.trailing_zeros()
                }
                /// Returns whether the bit in position `bit` is set,
                /// using the two's complement for negative numbers
                pub fn bit(&self, bit: u64) -> bool
                {
                    if self.is_negative()
                    {
                        if bit >= u64::from(::num::big::digit::BITS) * self.len() as u64
                        {
                            true
                        }
                        
                        else
                        {
                            let trailing_zeros = self.data.trailing_zeros().unwrap();
                            match Ord::cmp(&bit, &trailing_zeros) {
                                Ordering::Less => false,
                                Ordering::Equal => true,
                                Ordering::Greater => !self.data.bit(bit),
                            }
                        }
                    }
                    
                    else
                    {
                        self.data.bit(bit)
                    }
                }
                /// Sets or clears the bit in the given position, using the two's complement for negative numbers.
                pub fn set_bit(&mut self, bit: u64, value: bool)
                {
                    match self.sign {
                        Sign::Plus => self.data.set_bit(bit, value),
                        Sign::Minus => bits::set_negative_bit(self, bit, value),
                        Sign::NoSign => {
                            if value {
                                self.data.set_bit(bit, true);
                                self.sign = Sign::Plus;
                            } else {
                               
                            }
                        }
                    }
                   
                    self.normalize();
                }
            }
            impl ::num::traits::FromBytes for BigInt
            {
                type  Bytes = [u8];

                fn from_be_bytes(bytes: &Self::Bytes) -> Self {
                    Self::from_signed_bytes_be(bytes)
                }
                fn from_le_bytes(bytes: &Self::Bytes) -> Self {
                    Self::from_signed_bytes_le(bytes)
                }
            }
            impl ::num::traits::ToBytes for BigInt
            {
                type  Bytes = Vec<u8>;

                fn to_be_bytes(&self) -> Self::Bytes {
                    self.to_signed_bytes_be()
                }
                fn to_le_bytes(&self) -> Self::Bytes {
                    self.to_signed_bytes_le()
                }
            }
        }

        pub mod rand
        {
            //! Randomization of big integers
            use ::
            {
                num::
                {
                    big::{ uint::biguint_from_vec, BigInt, BigUint, Sign::* },
                    integers::{ Integer },
                    traits::{ ToPrimitive, Zero },
                },
                rand::
                {
                    Rng,
                    distributions::uniform::{SampleBorrow, SampleUniform, UniformSampler},
                    prelude::Distribution,
                },
                *,
            };
            /*
            */
            /// A trait for sampling random big integers.
            pub trait RandBigInt
            {
                /// Generate a random [`BigUint`] of the given bit size.
                fn gen_biguint(&mut self, bit_size: u64) -> BigUint;
                /// Generate a random [ BigInt`] of the given bit size.
                fn gen_bigint(&mut self, bit_size: u64) -> BigInt;
                /// Generate a random [`BigUint`] less than the given bound. Fails
                /// when the bound is zero.
                fn gen_biguint_below(&mut self, bound: &BigUint) -> BigUint;
                /// Generate a random [`BigUint`] within the given range. The lower
                /// bound is inclusive; the upper bound is exclusive. Fails when
                /// the upper bound is not greater than the lower bound.
                fn gen_biguint_range(&mut self, lbound: &BigUint, ubound: &BigUint) -> BigUint;
                /// Generate a random [`BigInt`] within the given range. The lower
                /// bound is inclusive; the upper bound is exclusive. Fails when
                /// the upper bound is not greater than the lower bound.
                fn gen_bigint_range(&mut self, lbound: &BigInt, ubound: &BigInt) -> BigInt;
            }
            fn gen_bits<R: Rng + ?Sized>( rng: &mut R, data: &mut [u32], rem: u64 ) 
            {
               
                rng.fill(data);
                if rem > 0 {
                    let last = data.len() - 1;
                    data[last] >>= 32 - rem;
                }
            }
            
            impl<R: Rng + ?Sized> RandBigInt for R 
            {
                cfg_digit!(
                    fn gen_biguint(&mut self, bit_size: u64) -> BigUint {
                        let (digits, rem) = bit_size.div_rem(&32);
                        let len = (digits + (rem > 0) as u64)
                            .to_usize()
                            .expect("capacity overflow");
                        let mut data = vec![0u32; len];
                        gen_bits(self, &mut data, rem);
                        biguint_from_vec(data)
                    }
                    fn gen_biguint(&mut self, bit_size: u64) -> BigUint {
                        use ::slice;

                        let (digits, rem) = bit_size.div_rem(&32);
                        let len = (digits + (rem > 0) as u64)
                            .to_usize()
                            .expect("capacity overflow");
                        let native_digits = Integer::div_ceil(&bit_size, &64);
                        let native_len = native_digits.to_usize().expect("capacity overflow");
                        let mut data = vec![0u64; native_len];
                        unsafe {
                           
                            let ptr = data.as_mut_ptr() as *mut u32;
                            debug_assert!(native_len * 2 >= len);
                            let data = slice::from_raw_parts_mut(ptr, len);
                            gen_bits(self, data, rem);
                        }
                        #[cfg(target_endian = "big")]
                        for digit in &mut data {
                           
                            *digit = (*digit << 32) | (*digit >> 32);
                        }
                        biguint_from_vec(data)
                    }
                );

                fn gen_bigint(&mut self, bit_size: u64) -> BigInt {
                    loop {
                       
                        let biguint = self.gen_biguint(bit_size);
                       
                        let sign = if biguint.is_zero() {
                           
                           
                           
                           
                            if self.gen() {
                                continue;
                            } else {
                                NoSign
                            }
                        } else if self.gen() {
                            Plus
                        } else {
                            Minus
                        };
                        return BigInt::from_biguint(sign, biguint);
                    }
                }
                fn gen_biguint_below(&mut self, bound: &BigUint) -> BigUint {
                    assert!(!bound.is_zero());
                    let bits = bound.bits();
                    loop {
                        let n = self.gen_biguint(bits);
                        if n < *bound {
                            return n;
                        }
                    }
                }
                fn gen_biguint_range(&mut self, lbound: &BigUint, ubound: &BigUint) -> BigUint {
                    assert!(*lbound < *ubound);
                    if lbound.is_zero() {
                        self.gen_biguint_below(ubound)
                    } else {
                        lbound + self.gen_biguint_below(&(ubound - lbound))
                    }
                }
                fn gen_bigint_range(&mut self, lbound: &BigInt, ubound: &BigInt) -> BigInt {
                    assert!(*lbound < *ubound);
                    if lbound.is_zero() {
                        BigInt::from(self.gen_biguint_below(ubound.magnitude()))
                    } else if ubound.is_zero() {
                        lbound + BigInt::from(self.gen_biguint_below(lbound.magnitude()))
                    } else {
                        let delta = ubound - lbound;
                        lbound + BigInt::from(self.gen_biguint_below(delta.magnitude()))
                    }
                }
            }
            /// The back-end implementing rand's [`UniformSampler`] for [`BigUint`].
            #[derive(Clone, Debug)]
            pub struct UniformBigUint 
            {
                base: BigUint,
                len: BigUint,
            }
            impl UniformSampler for UniformBigUint 
            {
                type X = BigUint;

                #[inline] fn new<B1, B2>(low_b: B1, high_b: B2) -> Self
                where
                    B1: SampleBorrow<Self::X> + Sized,
                    B2: SampleBorrow<Self::X> + Sized,
                {
                    let low = low_b.borrow();
                    let high = high_b.borrow();
                    assert!(low < high);
                    UniformBigUint {
                        len: high - low,
                        base: low.clone(),
                    }
                }
                #[inline] fn new_inclusive<B1, B2>(low_b: B1, high_b: B2) -> Self
                where
                    B1: SampleBorrow<Self::X> + Sized,
                    B2: SampleBorrow<Self::X> + Sized,
                {
                    let low = low_b.borrow();
                    let high = high_b.borrow();
                    assert!(low <= high);
                    Self::new(low, high + 1u32)
                }
                #[inline] fn sample<R: Rng + ?Sized>(&self, rng: &mut R) -> Self::X {
                    &self.base + rng.gen_biguint_below(&self.len)
                }
                #[inline] fn sample_single<R: Rng + ?Sized, B1, B2>(low: B1, high: B2, rng: &mut R) -> Self::X
                where
                    B1: SampleBorrow<Self::X> + Sized,
                    B2: SampleBorrow<Self::X> + Sized,
                {
                    rng.gen_biguint_range(low.borrow(), high.borrow())
                }
            }
            impl SampleUniform for BigUint 
            {
                type Sampler = UniformBigUint;
            }
            /// The back-end implementing rand's [`UniformSampler`] for [`BigInt`].
            #[derive(Clone, Debug)]
            pub struct UniformBigInt 
            {
                base: BigInt,
                len: BigUint,
            }
            impl UniformSampler for UniformBigInt 
            {
                type X = BigInt;

                #[inline] fn new<B1, B2>(low_b: B1, high_b: B2) -> Self
                where
                    B1: SampleBorrow<Self::X> + Sized,
                    B2: SampleBorrow<Self::X> + Sized,
                {
                    let low = low_b.borrow();
                    let high = high_b.borrow();
                    assert!(low < high);
                    UniformBigInt {
                        len: (high - low).into_parts().1,
                        base: low.clone(),
                    }
                }
                #[inline] fn new_inclusive<B1, B2>(low_b: B1, high_b: B2) -> Self
                where
                    B1: SampleBorrow<Self::X> + Sized,
                    B2: SampleBorrow<Self::X> + Sized,
                {
                    let low = low_b.borrow();
                    let high = high_b.borrow();
                    assert!(low <= high);
                    Self::new(low, high + 1u32)
                }
                #[inline] fn sample<R: Rng + ?Sized>(&self, rng: &mut R) -> Self::X {
                    &self.base + BigInt::from(rng.gen_biguint_below(&self.len))
                }
                #[inline] fn sample_single<R: Rng + ?Sized, B1, B2>(low: B1, high: B2, rng: &mut R) -> Self::X
                where
                    B1: SampleBorrow<Self::X> + Sized,
                    B2: SampleBorrow<Self::X> + Sized,
                {
                    rng.gen_bigint_range(low.borrow(), high.borrow())
                }
            }
            impl SampleUniform for BigInt 
            {
                type Sampler = UniformBigInt;
            }
            /// A random distribution for [`BigUint`] and [`BigInt`] values of a particular bit size.
            #[derive(Clone, Copy, Debug)]
            pub struct RandomBits 
            {
                bits: u64,
            }
            impl RandomBits 
            {
                #[inline] pub fn new(bits: u64) -> RandomBits {
                    RandomBits { bits }
                }
            }
            impl Distribution<BigUint> for RandomBits 
            {
                #[inline] fn sample<R: Rng + ?Sized>(&self, rng: &mut R) -> BigUint {
                    rng.gen_biguint(self.bits)
                }
            }
            impl Distribution<BigInt> for RandomBits 
            {
                #[inline] fn sample<R: Rng + ?Sized>(&self, rng: &mut R) -> BigInt {
                    rng.gen_bigint(self.bits)
                }
            }
        }

        pub mod uint
        {
            use ::
            {
                cmp::{ self, Ordering },
                default::{ Default },
                num::
                {
                    big::digit::{ self, BigDigit },
                    integers::{ Integer, Roots },
                    traits::{ ConstZero, Num, One, Pow, ToPrimitive, Unsigned, Zero },
                },
                string::{ String },
                vec::{ Vec },
                *,
            };
            /*
            */            
            pub mod addition
            {
                /*!
                */
                use ::
                {
                    iter::{ Sum },
                    num::
                    {
                        big::
                        {
                            digit::{self, BigDigit}, UsizePromotion
                        },
                        traits::CheckedAdd,
                    },
                    ops::{ Add, AddAssign },
                    *,
                };

                use super::{BigUint, IntDigits};
                /*
                */
                use ::arch::x86_64 as arch;
                
                cfg_64!(
                    #[inline] fn adc(carry: u8, a: u64, b: u64, out: &mut u64) -> u8 {
                       
                       
                        unsafe { arch::_addcarry_u64(carry, a, b, out) }
                    }
                );
                /// Two argument addition of raw slices, `a += b`, returning the carry.
                #[inline] pub fn __add2(a: &mut [BigDigit], b: &[BigDigit]) -> BigDigit {
                    debug_assert!(a.len() >= b.len());

                    let mut carry = 0;
                    let (a_lo, a_hi) = a.split_at_mut(b.len());

                    for (a, b) in a_lo.iter_mut().zip(b) {
                        carry = adc(carry, *a, *b, a);
                    }
                    if carry != 0 {
                        for a in a_hi {
                            carry = adc(carry, *a, 0, a);
                            if carry == 0 {
                                break;
                            }
                        }
                    }
                    carry as BigDigit
                }
                /// Two argument addition of raw slices:
                /// a += b
                ///
                /// The caller _must_ ensure that a is big enough to store the result - typically this means
                /// resizing a to max(a.len(), b.len()) + 1, to fit a possible carry.
                pub(super) fn add2(a: &mut [BigDigit], b: &[BigDigit]) {
                    let carry = __add2(a, b);

                    debug_assert!(carry == 0);
                }
                forward_all_binop_to_val_ref_commutative!(impl Add for BigUint, add);
                forward_val_assign!(impl AddAssign for BigUint, add_assign);

                impl Add<&BigUint> for BigUint
                {
                    type Output = BigUint;

                    fn add(mut self, other: &BigUint) -> BigUint {
                        self += other;
                        self
                    }
                }
                impl AddAssign<&BigUint> for BigUint
                {
                    #[inline] fn add_assign(&mut self, other: &BigUint) {
                        let self_len = self.data.len();
                        let carry = if self_len < other.data.len() {
                            let lo_carry = __add2(&mut self.data[..], &other.data[..self_len]);
                            self.data.extend_from_slice(&other.data[self_len..]);
                            __add2(&mut self.data[self_len..], &[lo_carry])
                        } else {
                            __add2(&mut self.data[..], &other.data[..])
                        };
                        if carry != 0 {
                            self.data.push(carry);
                        }
                    }
                }
                promote_unsigned_scalars!(impl Add for BigUint, add);
                promote_unsigned_scalars_assign!(impl AddAssign for BigUint, add_assign);
                forward_all_scalar_binop_to_val_val_commutative!(impl Add<u32> for BigUint, add);
                forward_all_scalar_binop_to_val_val_commutative!(impl Add<u64> for BigUint, add);
                forward_all_scalar_binop_to_val_val_commutative!(impl Add<u128> for BigUint, add);

                impl Add<u32> for BigUint
                {
                    type Output = BigUint;

                    #[inline] fn add(mut self, other: u32) -> BigUint {
                        self += other;
                        self
                    }
                }
                impl AddAssign<u32> for BigUint
                {
                    #[inline] fn add_assign(&mut self, other: u32) {
                        if other != 0 {
                            if self.data.is_empty() {
                                self.data.push(0);
                            }
                            let carry = __add2(&mut self.data, &[other as BigDigit]);
                            if carry != 0 {
                                self.data.push(carry);
                            }
                        }
                    }
                }
                impl Add<u64> for BigUint
                {
                    type Output = BigUint;

                    #[inline] fn add(mut self, other: u64) -> BigUint {
                        self += other;
                        self
                    }
                }
                impl AddAssign<u64> for BigUint {
                    cfg_digit!(
                        #[inline]
                        fn add_assign(&mut self, other: u64) {
                            let (hi, lo) = ::num::big::digit::from_doublebigdigit(other);
                            if hi == 0 {
                                *self += lo;
                            } else {
                                while self.data.len() < 2 {
                                    self.data.push(0);
                                }
                                let carry = __add2(&mut self.data, &[lo, hi]);
                                if carry != 0 {
                                    self.data.push(carry);
                                }
                            }
                        }
                        #[inline]
                        fn add_assign(&mut self, other: u64) {
                            if other != 0 {
                                if self.data.is_empty() {
                                    self.data.push(0);
                                }
                                let carry = __add2(&mut self.data, &[other as BigDigit]);
                                if carry != 0 {
                                    self.data.push(carry);
                                }
                            }
                        }
                    );
                }
                impl Add<u128> for BigUint
                {
                    type Output = BigUint;

                    #[inline] fn add(mut self, other: u128) -> BigUint {
                        self += other;
                        self
                    }
                }
                impl AddAssign<u128> for BigUint {
                    cfg_digit!(
                        #[inline]
                        fn add_assign(&mut self, other: u128) {
                            if other <= u128::from(u64::MAX) {
                                *self += other as u64
                            } else {
                                let (a, b, c, d) = super::u32_from_u128(other);
                                let carry = if a > 0 {
                                    while self.data.len() < 4 {
                                        self.data.push(0);
                                    }
                                    __add2(&mut self.data, &[d, c, b, a])
                                } else {
                                    debug_assert!(b > 0);
                                    while self.data.len() < 3 {
                                        self.data.push(0);
                                    }
                                    __add2(&mut self.data, &[d, c, b])
                                };

                                if carry != 0 {
                                    self.data.push(carry);
                                }
                            }
                        }
                        #[inline]
                        fn add_assign(&mut self, other: u128) {
                            let (hi, lo) = ::num::big::digit::from_doublebigdigit(other);
                            if hi == 0 {
                                *self += lo;
                            } else {
                                while self.data.len() < 2 {
                                    self.data.push(0);
                                }
                                let carry = __add2(&mut self.data, &[lo, hi]);
                                if carry != 0 {
                                    self.data.push(carry);
                                }
                            }
                        }
                    );
                }
                impl CheckedAdd for BigUint
                {
                    #[inline] fn checked_add(&self, v: &BigUint) -> Option<BigUint> {
                        Some(self.add(v))
                    }
                }
                impl_sum_iter_type!(BigUint);

            }
            pub mod division
            {
                /*!
                */
                use ::
                {
                    cmp::Ordering::{Equal, Greater, Less},
                    num::
                    {
                        big::
                        {
                            digit::{self, BigDigit, DoubleBigDigit}, UsizePromotion
                        },
                        integers::Integer,
                        traits::{CheckedDiv, CheckedEuclid, Euclid, One, ToPrimitive, Zero},
                    },
                    ops::{Div, DivAssign, Rem, RemAssign},
                    *,
                };
                
                use super::addition::__add2;
                use super::{cmp_slice, BigUint};
                /*
                */
                pub const FAST_DIV_WIDE: bool = true;
                /// Divide a two digit numerator by a one digit divisor, returns quotient and remainder.
                #[inline] fn div_wide(hi: BigDigit, lo: BigDigit, divisor: BigDigit) -> (BigDigit, BigDigit)
                {
                   
                   
                   
                    debug_assert!(hi < divisor);

                   
                   
                   
                   
                    unsafe {
                        let (div, rem);

                        cfg_digit!(
                            macro_rules! div {
                                () => {
                                    "div {0:e}"
                                };
                            }
                            macro_rules! div {
                                () => {
                                    "div {0:r}"
                                };
                            }
                        );

                        ::arch::asm!(
                            div!(),
                            in(reg) divisor,
                            inout("dx") hi => rem,
                            inout("ax") lo => div,
                            options(pure, nomem, nostack),
                        );

                        (div, rem)
                    }
                }
                /// For small divisors, we can divide without promoting to `DoubleBigDigit`
                /// by using half-size pieces of digit, like long-division.
                #[inline] fn div_half(rem: BigDigit, digit: BigDigit, divisor: BigDigit) -> (BigDigit, BigDigit)
                {
                    use ::num::big::digit::{HALF, HALF_BITS};
                    debug_assert!(rem < divisor && divisor <= HALF);
                    let (hi, rem) = ((rem << HALF_BITS) | (digit >> HALF_BITS)).div_rem(&divisor);
                    let (lo, rem) = ((rem << HALF_BITS) | (digit & HALF)).div_rem(&divisor);
                    ((hi << HALF_BITS) | lo, rem)
                }
                #[inline] pub fn div_rem_digit(mut a: BigUint, b: BigDigit) -> (BigUint, BigDigit)
                {
                    if b == 0 {
                        panic!("attempt to divide by zero")
                    }
                    let mut rem = 0;

                    if !FAST_DIV_WIDE && b <= ::num::big::digit::HALF {
                        for d in a.data.iter_mut().rev() {
                            let (q, r) = div_half(rem, *d, b);
                            *d = q;
                            rem = r;
                        }
                    } else {
                        for d in a.data.iter_mut().rev() {
                            let (q, r) = div_wide(rem, *d, b);
                            *d = q;
                            rem = r;
                        }
                    }
                    (a.normalized(), rem)
                }
                #[inline] fn rem_digit(a: &BigUint, b: BigDigit) -> BigDigit
                {
                    if b == 0 {
                        panic!("attempt to divide by zero")
                    }
                    let mut rem = 0;

                    if !FAST_DIV_WIDE && b <= ::num::big::digit::HALF {
                        for &digit in a.data.iter().rev() {
                            let (_, r) = div_half(rem, digit, b);
                            rem = r;
                        }
                    } else {
                        for &digit in a.data.iter().rev() {
                            let (_, r) = div_wide(rem, digit, b);
                            rem = r;
                        }
                    }
                    rem
                }
                /// Subtract a multiple.
                fn sub_mul_digit_same_len(a: &mut [BigDigit], b: &[BigDigit], c: BigDigit) -> BigDigit
                {
                    debug_assert!(a.len() == b.len());

                   
                   
                    let mut offset_carry = ::num::big::digit::MAX;

                    for (x, y) in a.iter_mut().zip(b) {
                       
                       
                       
                       
                        let offset_sum = ::num::big::digit::to_doublebigdigit(::num::big::digit::MAX, *x)
                            - ::num::big::digit::MAX as DoubleBigDigit
                            + offset_carry as DoubleBigDigit
                            - *y as DoubleBigDigit * c as DoubleBigDigit;

                        let (new_offset_carry, new_x) = ::num::big::digit::from_doublebigdigit(offset_sum);
                        offset_carry = new_offset_carry;
                        *x = new_x;
                    }
                   
                    ::num::big::digit::MAX - offset_carry
                }
                fn div_rem(mut u: BigUint, mut d: BigUint) -> (BigUint, BigUint)
                {
                    if d.is_zero() {
                        panic!("attempt to divide by zero")
                    }
                    if u.is_zero() {
                        return (BigUint::ZERO, BigUint::ZERO);
                    }
                    if d.data.len() == 1 {
                        if d.data == [1] {
                            return (u, BigUint::ZERO);
                        }
                        let (div, rem) = div_rem_digit(u, d.data[0]);
                       
                        d.data.clear();
                        d += rem;
                        return (div, d);
                    }
                   
                    match u.cmp(&d) {
                        Less => return (BigUint::ZERO, u),
                        Equal => {
                            u.set_one();
                            return (u, BigUint::ZERO);
                        }
                        Greater => {}
                    }
                   
                    //
                   
                   
                   
                    //
                    let shift = d.data.last().unwrap().leading_zeros() as usize;

                    if shift == 0 {
                       
                        div_rem_core(u, &d.data)
                    } else {
                        let (q, r) = div_rem_core(u << shift, &(d << shift).data);
                       
                        (q, r >> shift)
                    }
                }
                pub(super) fn div_rem_ref(u: &BigUint, d: &BigUint) -> (BigUint, BigUint)
                {
                    if d.is_zero() {
                        panic!("attempt to divide by zero")
                    }
                    if u.is_zero() {
                        return (BigUint::ZERO, BigUint::ZERO);
                    }
                    if d.data.len() == 1 {
                        if d.data == [1] {
                            return (u.clone(), BigUint::ZERO);
                        }
                        let (div, rem) = div_rem_digit(u.clone(), d.data[0]);
                        return (div, rem.into());
                    }
                   
                    match u.cmp(d) {
                        Less => return (BigUint::ZERO, u.clone()),
                        Equal => return (One::one(), BigUint::ZERO),
                        Greater => {}
                    }
                   
                    //
                   
                   
                   
                    //
                    let shift = d.data.last().unwrap().leading_zeros() as usize;

                    if shift == 0 {
                       
                        div_rem_core(u.clone(), &d.data)
                    } else {
                        let (q, r) = div_rem_core(u << shift, &(d << shift).data);
                       
                        (q, r >> shift)
                    }
                }
                /// An implementation of the base division algorithm.
                fn div_rem_core(mut a: BigUint, b: &[BigDigit]) -> (BigUint, BigUint)
                {
                    debug_assert!(a.data.len() >= b.len() && b.len() > 1);
                    debug_assert!(b.last().unwrap().leading_zeros() == 0);

                   
                   
                    //
                   
                   
                    //
                   
                    //
                   
                   
                   
                   
                    //
                   
                   
                   

                   
                    let mut a0 = 0;

                   
                    let b0 = b[b.len() - 1];
                    let b1 = b[b.len() - 2];

                    let q_len = a.data.len() - b.len() + 1;
                    let mut q = BigUint {
                        data: vec![0; q_len],
                    };

                    for j in (0..q_len).rev() {
                        debug_assert!(a.data.len() == b.len() + j);

                        let a1 = *a.data.last().unwrap();
                        let a2 = a.data[a.data.len() - 2];

                       
                       
                        let (mut q0, mut r) = if a0 < b0 {
                            let (q0, r) = div_wide(a0, a1, b0);
                            (q0, r as DoubleBigDigit)
                        } else {
                            debug_assert!(a0 == b0);
                           
                           
                            (::num::big::digit::MAX, a0 as DoubleBigDigit + a1 as DoubleBigDigit)
                        };

                       
                        //
                       
                       
                        //
                       
                       
                       
                        while r <= ::num::big::digit::MAX as DoubleBigDigit
                            && ::num::big::digit::to_doublebigdigit(r as BigDigit, a2)
                                < q0 as DoubleBigDigit * b1 as DoubleBigDigit
                        {
                            q0 -= 1;
                            r += b0 as DoubleBigDigit;
                        }
                       
                       

                        let mut borrow = sub_mul_digit_same_len(&mut a.data[j..], b, q0);
                        if borrow > a0 {
                           
                            q0 -= 1;
                            borrow -= __add2(&mut a.data[j..], b);
                        }
                       
                        debug_assert!(borrow == a0);

                        q.data[j] = q0;

                       
                        a0 = a.data.pop().unwrap();
                    }
                    a.data.push(a0);
                    a.normalize();

                    debug_assert_eq!(cmp_slice(&a.data, b), Less);

                    (q.normalized(), a)
                }
                forward_val_ref_binop_big!(impl Div for BigUint, div);
                forward_ref_val_binop_big!(impl Div for BigUint, div);
                forward_val_assign!(impl DivAssign for BigUint, div_assign);

                impl Div<BigUint> for BigUint
                {
                    type Output = BigUint;

                    #[inline] fn div(self, other: BigUint) -> BigUint {
                        let (q, _) = div_rem(self, other);
                        q
                    }
                }
                impl Div<&BigUint> for &BigUint
                {
                    type Output = BigUint;

                    #[inline] fn div(self, other: &BigUint) -> BigUint {
                        let (q, _) = self.div_rem(other);
                        q
                    }
                }
                impl DivAssign<&BigUint> for BigUint
                {
                    #[inline] fn div_assign(&mut self, other: &BigUint) {
                        *self = &*self / other;
                    }
                }
                promote_unsigned_scalars!(impl Div for BigUint, div);
                promote_unsigned_scalars_assign!(impl DivAssign for BigUint, div_assign);
                forward_all_scalar_binop_to_val_val!(impl Div<u32> for BigUint, div);
                forward_all_scalar_binop_to_val_val!(impl Div<u64> for BigUint, div);
                forward_all_scalar_binop_to_val_val!(impl Div<u128> for BigUint, div);

                impl Div<u32> for BigUint
                {
                    type Output = BigUint;

                    #[inline] fn div(self, other: u32) -> BigUint {
                        let (q, _) = div_rem_digit(self, other as BigDigit);
                        q
                    }
                }
                impl DivAssign<u32> for BigUint
                {
                    #[inline] fn div_assign(&mut self, other: u32) {
                        *self = &*self / other;
                    }
                }
                impl Div<BigUint> for u32 {
                    type Output = BigUint;

                    #[inline] fn div(self, other: BigUint) -> BigUint {
                        match other.data.len() {
                            0 => panic!("attempt to divide by zero"),
                            1 => From::from(self as BigDigit / other.data[0]),
                            _ => BigUint::ZERO,
                        }
                    }
                }
                impl Div<u64> for BigUint
                {
                    type Output = BigUint;

                    #[inline] fn div(self, other: u64) -> BigUint {
                        let (q, _) = div_rem(self, From::from(other));
                        q
                    }
                }
                impl DivAssign<u64> for BigUint
                {
                    #[inline] fn div_assign(&mut self, other: u64) {
                       
                        let temp = mem::replace(self, Self::ZERO);
                        *self = temp / other;
                    }
                }
                impl Div<BigUint> for u64 {
                    type Output = BigUint;

                    cfg_digit!(
                        #[inline]
                        fn div(self, other: BigUint) -> BigUint {
                            match other.data.len() {
                                0 => panic!("attempt to divide by zero"),
                                1 => From::from(self / u64::from(other.data[0])),
                                2 => From::from(self / ::num::big::digit::to_doublebigdigit(other.data[1], other.data[0])),
                                _ => BigUint::ZERO,
                            }
                        }
                        #[inline]
                        fn div(self, other: BigUint) -> BigUint {
                            match other.data.len() {
                                0 => panic!("attempt to divide by zero"),
                                1 => From::from(self / other.data[0]),
                                _ => BigUint::ZERO,
                            }
                        }
                    );
                }
                impl Div<u128> for BigUint
                {
                    type Output = BigUint;

                    #[inline] fn div(self, other: u128) -> BigUint {
                        let (q, _) = div_rem(self, From::from(other));
                        q
                    }
                }
                impl DivAssign<u128> for BigUint
                {
                    #[inline] fn div_assign(&mut self, other: u128) {
                        *self = &*self / other;
                    }
                }
                impl Div<BigUint> for u128 {
                    type Output = BigUint;

                    cfg_digit!(
                        #[inline]
                        fn div(self, other: BigUint) -> BigUint {
                            use super::u32_to_u128;
                            match other.data.len() {
                                0 => panic!("attempt to divide by zero"),
                                1 => From::from(self / u128::from(other.data[0])),
                                2 => From::from(
                                    self / u128::from(::num::big::digit::to_doublebigdigit(other.data[1], other.data[0])),
                                ),
                                3 => From::from(self / u32_to_u128(0, other.data[2], other.data[1], other.data[0])),
                                4 => From::from(
                                    self / u32_to_u128(other.data[3], other.data[2], other.data[1], other.data[0]),
                                ),
                                _ => BigUint::ZERO,
                            }
                        }
                        #[inline]
                        fn div(self, other: BigUint) -> BigUint {
                            match other.data.len() {
                                0 => panic!("attempt to divide by zero"),
                                1 => From::from(self / other.data[0] as u128),
                                2 => From::from(self / ::num::big::digit::to_doublebigdigit(other.data[1], other.data[0])),
                                _ => BigUint::ZERO,
                            }
                        }
                    );
                }
                forward_val_ref_binop_big!(impl Rem for BigUint, rem);
                forward_ref_val_binop_big!(impl Rem for BigUint, rem);
                forward_val_assign!(impl RemAssign for BigUint, rem_assign);

                impl Rem<BigUint> for BigUint
                {
                    type Output = BigUint;

                    #[inline] fn rem(self, other: BigUint) -> BigUint {
                        if let Some(other) = other.to_u32() {
                            &self % other
                        } else {
                            let (_, r) = div_rem(self, other);
                            r
                        }
                    }
                }
                impl Rem<&BigUint> for &BigUint
                {
                    type Output = BigUint;

                    #[inline] fn rem(self, other: &BigUint) -> BigUint {
                        if let Some(other) = other.to_u32() {
                            self % other
                        } else {
                            let (_, r) = self.div_rem(other);
                            r
                        }
                    }
                }
                impl RemAssign<&BigUint> for BigUint
                {
                    #[inline] fn rem_assign(&mut self, other: &BigUint) {
                        *self = &*self % other;
                    }
                }
                promote_unsigned_scalars!(impl Rem for BigUint, rem);
                promote_unsigned_scalars_assign!(impl RemAssign for BigUint, rem_assign);
                forward_all_scalar_binop_to_ref_val!(impl Rem<u32> for BigUint, rem);
                forward_all_scalar_binop_to_val_val!(impl Rem<u64> for BigUint, rem);
                forward_all_scalar_binop_to_val_val!(impl Rem<u128> for BigUint, rem);

                impl Rem<u32> for &BigUint
                {
                    type Output = BigUint;

                    #[inline] fn rem(self, other: u32) -> BigUint {
                        rem_digit(self, other as BigDigit).into()
                    }
                }
                impl RemAssign<u32> for BigUint
                {
                    #[inline] fn rem_assign(&mut self, other: u32) {
                        *self = &*self % other;
                    }
                }
                impl Rem<&BigUint> for u32 {
                    type Output = BigUint;

                    #[inline] fn rem(mut self, other: &BigUint) -> BigUint {
                        self %= other;
                        From::from(self)
                    }
                }
                macro_rules! impl_rem_assign_scalar {
                    ($scalar:ty, $to_scalar:ident) => {
                        forward_val_assign_scalar!(impl RemAssign for BigUint, $scalar, rem_assign);
                        impl RemAssign<&BigUint> for $scalar {
                            #[inline]
                            fn rem_assign(&mut self, other: &BigUint) {
                                *self = match other.$to_scalar() {
                                    None => *self,
                                    Some(0) => panic!("attempt to divide by zero"),
                                    Some(v) => *self % v
                                };
                            }
                        }
                    }
                }
               
                impl_rem_assign_scalar!(u128, to_u128);
                impl_rem_assign_scalar!(usize, to_usize);
                impl_rem_assign_scalar!(u64, to_u64);
                impl_rem_assign_scalar!(u32, to_u32);
                impl_rem_assign_scalar!(u16, to_u16);
                impl_rem_assign_scalar!(u8, to_u8);
                impl_rem_assign_scalar!(i128, to_i128);
                impl_rem_assign_scalar!(isize, to_isize);
                impl_rem_assign_scalar!(i64, to_i64);
                impl_rem_assign_scalar!(i32, to_i32);
                impl_rem_assign_scalar!(i16, to_i16);
                impl_rem_assign_scalar!(i8, to_i8);

                impl Rem<u64> for BigUint
                {
                    type Output = BigUint;

                    #[inline] fn rem(self, other: u64) -> BigUint {
                        let (_, r) = div_rem(self, From::from(other));
                        r
                    }
                }
                impl RemAssign<u64> for BigUint
                {
                    #[inline] fn rem_assign(&mut self, other: u64) {
                        *self = &*self % other;
                    }
                }
                impl Rem<BigUint> for u64 {
                    type Output = BigUint;

                    #[inline] fn rem(mut self, other: BigUint) -> BigUint {
                        self %= other;
                        From::from(self)
                    }
                }
                impl Rem<u128> for BigUint
                {
                    type Output = BigUint;

                    #[inline] fn rem(self, other: u128) -> BigUint {
                        let (_, r) = div_rem(self, From::from(other));
                        r
                    }
                }
                impl RemAssign<u128> for BigUint
                {
                    #[inline] fn rem_assign(&mut self, other: u128) {
                        *self = &*self % other;
                    }
                }
                impl Rem<BigUint> for u128 {
                    type Output = BigUint;

                    #[inline] fn rem(mut self, other: BigUint) -> BigUint {
                        self %= other;
                        From::from(self)
                    }
                }
                impl CheckedDiv for BigUint
                {
                    #[inline] fn checked_div(&self, v: &BigUint) -> Option<BigUint> {
                        if v.is_zero() {
                            return None;
                        }
                        Some(self.div(v))
                    }
                }
                impl CheckedEuclid for BigUint
                {
                    #[inline] fn checked_div_euclid(&self, v: &BigUint) -> Option<BigUint> {
                        if v.is_zero() {
                            return None;
                        }
                        Some(self.div_euclid(v))
                    }
                    #[inline] fn checked_rem_euclid(&self, v: &BigUint) -> Option<BigUint> {
                        if v.is_zero() {
                            return None;
                        }
                        Some(self.rem_euclid(v))
                    }
                    fn checked_div_rem_euclid(&self, v: &Self) -> Option<(Self, Self)> {
                        Some(self.div_rem_euclid(v))
                    }
                }
                impl Euclid for BigUint
                {
                    #[inline] fn div_euclid(&self, v: &BigUint) -> BigUint {
                       
                        self / v
                    }
                    #[inline] fn rem_euclid(&self, v: &BigUint) -> BigUint {
                       
                        self % v
                    }
                    fn div_rem_euclid(&self, v: &Self) -> (Self, Self) {
                       
                        self.div_rem(v)
                    }
                }
            }
            pub mod multiplication
            {
                /*!
                */
                use ::
                {
                    cmp::{ Ordering },
                    iter::{ Product },
                    num::
                    {
                        big::
                        {
                            digit::{self, BigDigit, DoubleBigDigit},
                            Sign::{self, Minus, NoSign, Plus},
                            {BigInt, UsizePromotion},
                        },
                        traits::{ CheckedMul, FromPrimitive, One, Zero },
                    },
                    ops::{Mul, MulAssign},
                    *,
                };
                use super::addition::{__add2, add2};
                use super::subtraction::sub2;
                use super::{biguint_from_vec, cmp_slice, BigUint, IntDigits};
                /*
                */
                #[inline] pub fn mac_with_carry(
                    a: BigDigit,
                    b: BigDigit,
                    c: BigDigit,
                    acc: &mut DoubleBigDigit,
                ) -> BigDigit {
                    *acc += DoubleBigDigit::from(a);
                    *acc += DoubleBigDigit::from(b) * DoubleBigDigit::from(c);
                    let lo = *acc as BigDigit;
                    *acc >>= ::num::big::digit::BITS;
                    lo
                }
                #[inline] fn mul_with_carry(a: BigDigit, b: BigDigit, acc: &mut DoubleBigDigit) -> BigDigit {
                    *acc += DoubleBigDigit::from(a) * DoubleBigDigit::from(b);
                    let lo = *acc as BigDigit;
                    *acc >>= ::num::big::digit::BITS;
                    lo
                }
                /// Three argument multiply accumulate:
                /// acc += b * c
                fn mac_digit(acc: &mut [BigDigit], b: &[BigDigit], c: BigDigit) {
                    if c == 0 {
                        return;
                    }
                    let mut carry = 0;
                    let (a_lo, a_hi) = acc.split_at_mut(b.len());

                    for (a, &b) in a_lo.iter_mut().zip(b) {
                        *a = mac_with_carry(*a, b, c, &mut carry);
                    }
                    let (carry_hi, carry_lo) = ::num::big::digit::from_doublebigdigit(carry);

                    let final_carry = if carry_hi == 0 {
                        __add2(a_hi, &[carry_lo])
                    } else {
                        __add2(a_hi, &[carry_hi, carry_lo])
                    };
                    assert_eq!(final_carry, 0, "carry overflow during multiplication!");
                }
                fn bigint_from_slice(slice: &[BigDigit]) -> BigInt {
                    BigInt::from(biguint_from_vec(slice.to_vec()))
                }
                /// Three argument multiply accumulate:
                /// acc += b * c
                #[allow(clippy::many_single_char_names)]
                fn mac3(mut acc: &mut [BigDigit], mut b: &[BigDigit], mut c: &[BigDigit]) {
                   
                    if let Some(&0) = b.first() {
                        if let Some(nz) = b.iter().position(|&d| d != 0) {
                            b = &b[nz..];
                            acc = &mut acc[nz..];
                        } else {
                            return;
                        }
                    }
                    if let Some(&0) = c.first() {
                        if let Some(nz) = c.iter().position(|&d| d != 0) {
                            c = &c[nz..];
                            acc = &mut acc[nz..];
                        } else {
                            return;
                        }
                    }
                    let acc = acc;
                    let (x, y) = if b.len() < c.len() { (b, c) } else { (c, b) };

                   
                    //
                   
                   
                   
                   
                   
                   
                    //
                   
                   

                    if x.len() <= 32 {
                       
                        for (i, xi) in x.iter().enumerate() {
                            mac_digit(&mut acc[i..], y, *xi);
                        }
                    } else if x.len() * 2 <= y.len() {
                       
                        //
                       
                       
                       
                        //
                       
                       
                       
                        //
                       
                        //
                       
                       
                       
                       
                        //
                       
                        //
                       
                       
                       
                        //
                       
                        //
                       
                        //
                       
                        //
                       
                       
                        //
                       
                        //
                       
                       
                        //
                       
                       
                       
                        //
                       
                       
                       
                        //
                       
                        //
                       
                       
                       
                       
                       
                        let m2 = y.len() / 2;
                        let (low2, high2) = y.split_at(m2);

                       
                        mac3(acc, x, low2);
                        mac3(&mut acc[m2..], x, high2);
                    } else if x.len() <= 256 {
                       
                        //
                       
                       
                        //
                       
                       
                        //
                       
                       
                        //
                       
                        //
                       
                       
                       
                       
                        //
                       
                        //
                       
                       
                       
                        //
                       
                        //
                       
                        //
                       
                        //
                       
                        //
                       
                        //
                       
                        //
                       
                        //
                       
                        //
                       
                       
                       
                        //
                       
                        //
                       
                       
                       
                        //
                       
                       
                       
                        //
                       
                       
                       
                        //
                       
                       

                       
                       
                        let b = x.len() / 2;
                        let (x0, x1) = x.split_at(b);
                        let (y0, y1) = y.split_at(b);

                       
                       
                        let len = x1.len() + y1.len() + 1;
                        let mut p = BigUint { data: vec![0; len] };

                       
                        mac3(&mut p.data, x1, y1);

                       
                        p.normalize();

                        add2(&mut acc[b..], &p.data);
                        add2(&mut acc[b * 2..], &p.data);

                       
                        p.data.truncate(0);
                        p.data.resize(len, 0);

                       
                        mac3(&mut p.data, x0, y0);
                        p.normalize();

                        add2(acc, &p.data);
                        add2(&mut acc[b..], &p.data);

                       
                       
                        let (j0_sign, j0) = sub_sign(x1, x0);
                        let (j1_sign, j1) = sub_sign(y1, y0);

                        match j0_sign * j1_sign {
                            Plus => {
                                p.data.truncate(0);
                                p.data.resize(len, 0);

                                mac3(&mut p.data, &j0.data, &j1.data);
                                p.normalize();

                                sub2(&mut acc[b..], &p.data);
                            }
                            Minus => {
                                mac3(&mut acc[b..], &j0.data, &j1.data);
                            }
                            NoSign => (),
                        }
                    } else {
                       
                        //
                       
                       
                        //
                       
                       
                       
                        let i = y.len() / 3 + 1;

                        let x0_len = Ord::min(x.len(), i);
                        let x1_len = Ord::min(x.len() - x0_len, i);

                        let y0_len = i;
                        let y1_len = Ord::min(y.len() - y0_len, i);

                       
                       
                       
                        //
                       
                        let x0 = bigint_from_slice(&x[..x0_len]);
                        let x1 = bigint_from_slice(&x[x0_len..x0_len + x1_len]);
                        let x2 = bigint_from_slice(&x[x0_len + x1_len..]);

                       
                        let y0 = bigint_from_slice(&y[..y0_len]);
                        let y1 = bigint_from_slice(&y[y0_len..y0_len + y1_len]);
                        let y2 = bigint_from_slice(&y[y0_len + y1_len..]);

                       
                        //
                       
                        //
                       
                        //
                       
                       
                       
                       
                        //
                       
                       
                        //
                       
                        //
                       
                        //
                       
                       
                       
                       
                       

                       
                        let p = &x0 + &x2;

                       
                        let q = &y0 + &y2;

                       
                        let p2 = &p - &x1;

                       
                        let q2 = &q - &y1;

                       
                        let r0 = &x0 * &y0;

                       
                        let r4 = &x2 * &y2;

                       
                        let r1 = (p + x1) * (q + y1);

                       
                        let r2 = &p2 * &q2;

                       
                        let r3 = ((p2 + x2) * 2 - x0) * ((q2 + y2) * 2 - y0);

                       
                        //
                       
                       
                       
                       
                       
                        //
                       
                       
                        //
                       
                       
                       
                       
                       
                        //
                       
                       
                        let mut comp3: BigInt = (r3 - &r1) / 3u32;
                        let mut comp1: BigInt = (r1 - &r2) >> 1;
                        let mut comp2: BigInt = r2 - &r0;
                        comp3 = ((&comp2 - comp3) >> 1) + (&r4 << 1);
                        comp2 += &comp1 - &r4;
                        comp1 -= &comp3;

                       
                        //
                       
                        //
                       
                       
                       
                       
                       
                       
                       
                       
                        //
                       
                        for (j, result) in [&r0, &comp1, &comp2, &comp3, &r4].iter().enumerate().rev() {
                            match result.sign() {
                                Plus => add2(&mut acc[i * j..], result.digits()),
                                Minus => sub2(&mut acc[i * j..], result.digits()),
                                NoSign => {}
                            }
                        }
                    }
                }
                fn mul3(x: &[BigDigit], y: &[BigDigit]) -> BigUint {
                    let len = x.len() + y.len() + 1;
                    let mut prod = BigUint { data: vec![0; len] };

                    mac3(&mut prod.data, x, y);
                    prod.normalized()
                }
                fn scalar_mul(a: &mut BigUint, b: BigDigit) {
                    match b {
                        0 => a.set_zero(),
                        1 => {}
                        _ => {
                            if b.is_power_of_two() {
                                *a <<= b.trailing_zeros();
                            } else {
                                let mut carry = 0;
                                for a in a.data.iter_mut() {
                                    *a = mul_with_carry(*a, b, &mut carry);
                                }
                                if carry != 0 {
                                    a.data.push(carry as BigDigit);
                                }
                            }
                        }
                    }
                }
                fn sub_sign(mut a: &[BigDigit], mut b: &[BigDigit]) -> (Sign, BigUint) {
                   
                    if let Some(&0) = a.last() {
                        a = &a[..a.iter().rposition(|&x| x != 0).map_or(0, |i| i + 1)];
                    }
                    if let Some(&0) = b.last() {
                        b = &b[..b.iter().rposition(|&x| x != 0).map_or(0, |i| i + 1)];
                    }
                    match cmp_slice(a, b) {
                        Ordering::Greater => {
                            let mut a = a.to_vec();
                            sub2(&mut a, b);
                            (Plus, biguint_from_vec(a))
                        }
                        Ordering::Less => {
                            let mut b = b.to_vec();
                            sub2(&mut b, a);
                            (Minus, biguint_from_vec(b))
                        }
                        Ordering::Equal => (NoSign, BigUint::ZERO),
                    }
                }
                macro_rules! impl_mul {
                    ($(impl Mul<$Other:ty> for $Self:ty;)*) => {$(
                        impl Mul<$Other> for $Self {
                            type Output = BigUint;

                            #[inline]
                            fn mul(self, other: $Other) -> BigUint {
                                match (&*self.data, &*other.data) {
                                   
                                    (&[], _) | (_, &[]) => BigUint::ZERO,
                                   
                                    (_, &[digit]) => self * digit,
                                    (&[digit], _) => other * digit,
                                   
                                    (x, y) => mul3(x, y),
                                }
                            }
                        }
                    )*}
                }
                impl_mul! {
                    impl Mul<BigUint> for BigUint;
                    impl Mul<BigUint> for &BigUint;
                    impl Mul<&BigUint> for BigUint;
                    impl Mul<&BigUint> for &BigUint;
                }
                macro_rules! impl_mul_assign {
                    ($(impl MulAssign<$Other:ty> for BigUint;)*) => {$(
                        impl MulAssign<$Other> for BigUint {
                            #[inline]
                            fn mul_assign(&mut self, other: $Other) {
                                match (&*self.data, &*other.data) {
                                   
                                    (&[], _) => {},
                                    (_, &[]) => self.set_zero(),
                                   
                                    (_, &[digit]) => *self *= digit,
                                    (&[digit], _) => *self = other * digit,
                                   
                                    (x, y) => *self = mul3(x, y),
                                }
                            }
                        }
                    )*}
                }
                impl_mul_assign! {
                    impl MulAssign<BigUint> for BigUint;
                    impl MulAssign<&BigUint> for BigUint;
                }
                promote_unsigned_scalars!(impl Mul for BigUint, mul);
                promote_unsigned_scalars_assign!(impl MulAssign for BigUint, mul_assign);
                forward_all_scalar_binop_to_val_val_commutative!(impl Mul<u32> for BigUint, mul);
                forward_all_scalar_binop_to_val_val_commutative!(impl Mul<u64> for BigUint, mul);
                forward_all_scalar_binop_to_val_val_commutative!(impl Mul<u128> for BigUint, mul);

                impl Mul<u32> for BigUint
                {
                    type Output = BigUint;

                    #[inline] fn mul(mut self, other: u32) -> BigUint {
                        self *= other;
                        self
                    }
                }
                impl MulAssign<u32> for BigUint
                {
                    #[inline] fn mul_assign(&mut self, other: u32) {
                        scalar_mul(self, other as BigDigit);
                    }
                }
                impl Mul<u64> for BigUint
                {
                    type Output = BigUint;

                    #[inline] fn mul(mut self, other: u64) -> BigUint {
                        self *= other;
                        self
                    }
                }
                impl MulAssign<u64> for BigUint {
                    cfg_digit!(
                        #[inline]
                        fn mul_assign(&mut self, other: u64) {
                            if let Some(other) = BigDigit::from_u64(other) {
                                scalar_mul(self, other);
                            } else {
                                let (hi, lo) = ::num::big::digit::from_doublebigdigit(other);
                                *self = mul3(&self.data, &[lo, hi]);
                            }
                        }
                        #[inline]
                        fn mul_assign(&mut self, other: u64) {
                            scalar_mul(self, other);
                        }
                    );
                }
                impl Mul<u128> for BigUint
                {
                    type Output = BigUint;

                    #[inline] fn mul(mut self, other: u128) -> BigUint {
                        self *= other;
                        self
                    }
                }
                impl MulAssign<u128> for BigUint {
                    cfg_digit!(
                        #[inline]
                        fn mul_assign(&mut self, other: u128) {
                            if let Some(other) = BigDigit::from_u128(other) {
                                scalar_mul(self, other);
                            } else {
                                *self = match super::u32_from_u128(other) {
                                    (0, 0, c, d) => mul3(&self.data, &[d, c]),
                                    (0, b, c, d) => mul3(&self.data, &[d, c, b]),
                                    (a, b, c, d) => mul3(&self.data, &[d, c, b, a]),
                                };
                            }
                        }
                        #[inline]
                        fn mul_assign(&mut self, other: u128) {
                            if let Some(other) = BigDigit::from_u128(other) {
                                scalar_mul(self, other);
                            } else {
                                let (hi, lo) = ::num::big::digit::from_doublebigdigit(other);
                                *self = mul3(&self.data, &[lo, hi]);
                            }
                        }
                    );
                }
                impl CheckedMul for BigUint
                {
                    #[inline] fn checked_mul(&self, v: &BigUint) -> Option<BigUint> {
                        Some(self.mul(v))
                    }
                }
                impl_product_iter_type!(BigUint);
            }
            pub mod subtraction
            {
                /*!
                */
                use ::
                {
                    cmp::Ordering::{ Equal, Greater, Less },
                    num::
                    {
                        big::
                        {
                            digit::{self, BigDigit}, UsizePromotion
                        },
                        traits::{ CheckedSub },
                    },
                    ops::{ Sub, SubAssign },
                    *,
                };
                
                use super::BigUint;
                /*
                */
                use ::arch::x86_64 as arch;
                
                cfg_64!(
                    #[inline] fn sbb(borrow: u8, a: u64, b: u64, out: &mut u64) -> u8 {
                       
                       
                        unsafe { arch::_subborrow_u64(borrow, a, b, out) }
                    }
                );
                
                cfg_32!(
                    #[inline] fn sbb(borrow: u8, a: u32, b: u32, out: &mut u32) -> u8 {
                       
                       
                        unsafe { arch::_subborrow_u32(borrow, a, b, out) }
                    }
                );
                
                pub(super) fn sub2(a: &mut [BigDigit], b: &[BigDigit]) {
                    let mut borrow = 0;

                    let len = Ord::min(a.len(), b.len());
                    let (a_lo, a_hi) = a.split_at_mut(len);
                    let (b_lo, b_hi) = b.split_at(len);

                    for (a, b) in a_lo.iter_mut().zip(b_lo) {
                        borrow = sbb(borrow, *a, *b, a);
                    }
                    if borrow != 0 {
                        for a in a_hi {
                            borrow = sbb(borrow, *a, 0, a);
                            if borrow == 0 {
                                break;
                            }
                        }
                    }
                   
                    assert!(
                        borrow == 0 && b_hi.iter().all(|x| *x == 0),
                        "Cannot subtract b from a because b is larger than a."
                    );
                }
               
                #[inline] fn __sub2rev(a: &[BigDigit], b: &mut [BigDigit]) -> u8 {
                    debug_assert!(b.len() == a.len());

                    let mut borrow = 0;

                    for (ai, bi) in a.iter().zip(b) {
                        borrow = sbb(borrow, *ai, *bi, bi);
                    }
                    borrow
                }
                fn sub2rev(a: &[BigDigit], b: &mut [BigDigit]) {
                    debug_assert!(b.len() >= a.len());

                    let len = Ord::min(a.len(), b.len());
                    let (a_lo, a_hi) = a.split_at(len);
                    let (b_lo, b_hi) = b.split_at_mut(len);

                    let borrow = __sub2rev(a_lo, b_lo);

                    assert!(a_hi.is_empty());

                   
                    assert!(
                        borrow == 0 && b_hi.iter().all(|x| *x == 0),
                        "Cannot subtract b from a because b is larger than a."
                    );
                }
                forward_val_val_binop!(impl Sub for BigUint, sub);
                forward_ref_ref_binop_big!(impl Sub for BigUint, sub);
                forward_val_assign!(impl SubAssign for BigUint, sub_assign);

                impl Sub<&BigUint> for BigUint
                {
                    type Output = BigUint;

                    fn sub(mut self, other: &BigUint) -> BigUint {
                        self -= other;
                        self
                    }
                }
                impl SubAssign<&BigUint> for BigUint
                {
                    fn sub_assign(&mut self, other: &BigUint) {
                        sub2(&mut self.data[..], &other.data[..]);
                        self.normalize();
                    }
                }
                impl Sub<BigUint> for &BigUint
                {
                    type Output = BigUint;

                    fn sub(self, mut other: BigUint) -> BigUint {
                        let other_len = other.data.len();
                        if other_len < self.data.len() {
                            let lo_borrow = __sub2rev(&self.data[..other_len], &mut other.data);
                            other.data.extend_from_slice(&self.data[other_len..]);
                            if lo_borrow != 0 {
                                sub2(&mut other.data[other_len..], &[1])
                            }
                        } else {
                            sub2rev(&self.data[..], &mut other.data[..]);
                        }
                        other.normalized()
                    }
                }
                promote_unsigned_scalars!(impl Sub for BigUint, sub);
                promote_unsigned_scalars_assign!(impl SubAssign for BigUint, sub_assign);
                forward_all_scalar_binop_to_val_val!(impl Sub<u32> for BigUint, sub);
                forward_all_scalar_binop_to_val_val!(impl Sub<u64> for BigUint, sub);
                forward_all_scalar_binop_to_val_val!(impl Sub<u128> for BigUint, sub);

                impl Sub<u32> for BigUint
                {
                    type Output = BigUint;

                    #[inline] fn sub(mut self, other: u32) -> BigUint {
                        self -= other;
                        self
                    }
                }
                impl SubAssign<u32> for BigUint 
                {
                    fn sub_assign(&mut self, other: u32) {
                        sub2(&mut self.data[..], &[other as BigDigit]);
                        self.normalize();
                    }
                }
                impl Sub<BigUint> for u32 
                {
                    type Output = BigUint;

                    cfg_digit!(
                        #[inline]
                        fn sub(self, mut other: BigUint) -> BigUint {
                            if other.data.len() == 0 {
                                other.data.push(self);
                            } else {
                                sub2rev(&[self], &mut other.data[..]);
                            }
                            other.normalized()
                        }
                        #[inline]
                        fn sub(self, mut other: BigUint) -> BigUint {
                            if other.data.is_empty() {
                                other.data.push(self as BigDigit);
                            } else {
                                sub2rev(&[self as BigDigit], &mut other.data[..]);
                            }
                            other.normalized()
                        }
                    );
                }
                impl Sub<u64> for BigUint
                {
                    type Output = BigUint;

                    #[inline] fn sub(mut self, other: u64) -> BigUint {
                        self -= other;
                        self
                    }
                }
                impl SubAssign<u64> for BigUint 
                {
                    cfg_digit!(
                        #[inline]
                        fn sub_assign(&mut self, other: u64) {
                            let (hi, lo) = ::num::big::digit::from_doublebigdigit(other);
                            sub2(&mut self.data[..], &[lo, hi]);
                            self.normalize();
                        }
                        #[inline]
                        fn sub_assign(&mut self, other: u64) {
                            sub2(&mut self.data[..], &[other as BigDigit]);
                            self.normalize();
                        }
                    );
                }
                impl Sub<BigUint> for u64 
                {
                    type Output = BigUint;

                    cfg_digit!(
                        #[inline]
                        fn sub(self, mut other: BigUint) -> BigUint {
                            while other.data.len() < 2 {
                                other.data.push(0);
                            }
                            let (hi, lo) = ::num::big::digit::from_doublebigdigit(self);
                            sub2rev(&[lo, hi], &mut other.data[..]);
                            other.normalized()
                        }
                        #[inline]
                        fn sub(self, mut other: BigUint) -> BigUint {
                            if other.data.is_empty() {
                                other.data.push(self);
                            } else {
                                sub2rev(&[self], &mut other.data[..]);
                            }
                            other.normalized()
                        }
                    );
                }
                impl Sub<u128> for BigUint
                {
                    type Output = BigUint;

                    #[inline] fn sub(mut self, other: u128) -> BigUint {
                        self -= other;
                        self
                    }
                }
                impl SubAssign<u128> for BigUint 
                {
                    cfg_digit!(
                        #[inline]
                        fn sub_assign(&mut self, other: u128) {
                            let (a, b, c, d) = super::u32_from_u128(other);
                            sub2(&mut self.data[..], &[d, c, b, a]);
                            self.normalize();
                        }
                        #[inline]
                        fn sub_assign(&mut self, other: u128) {
                            let (hi, lo) = ::num::big::digit::from_doublebigdigit(other);
                            sub2(&mut self.data[..], &[lo, hi]);
                            self.normalize();
                        }
                    );
                }
                impl Sub<BigUint> for u128 
                {
                    type Output = BigUint;

                    cfg_digit!(
                        #[inline]
                        fn sub(self, mut other: BigUint) -> BigUint {
                            while other.data.len() < 4 {
                                other.data.push(0);
                            }
                            let (a, b, c, d) = super::u32_from_u128(self);
                            sub2rev(&[d, c, b, a], &mut other.data[..]);
                            other.normalized()
                        }
                        #[inline]
                        fn sub(self, mut other: BigUint) -> BigUint {
                            while other.data.len() < 2 {
                                other.data.push(0);
                            }
                            let (hi, lo) = ::num::big::digit::from_doublebigdigit(self);
                            sub2rev(&[lo, hi], &mut other.data[..]);
                            other.normalized()
                        }
                    );
                }
                impl CheckedSub for BigUint
                {
                    #[inline] fn checked_sub(&self, v: &BigUint) -> Option<BigUint> {
                        match self.cmp(v) {
                            Less => None,
                            Equal => Some(Self::ZERO),
                            Greater => Some(self.sub(v)),
                        }
                    }
                }
            }
            pub mod bits
            {
                /*!
                */
                use ::
                {
                    ops::{BitAnd, BitAndAssign, BitOr, BitOrAssign, BitXor, BitXorAssign},
                    *,
                };
                use super::{BigUint, IntDigits};
                /*
                */
                forward_val_val_binop!(impl BitAnd for BigUint, bitand);
                forward_ref_val_binop_big!(impl BitAnd for BigUint, bitand);
               
                impl BitAnd<&BigUint> for &BigUint
                {
                    type Output = BigUint;

                    #[inline] fn bitand(self, other: &BigUint) -> BigUint {
                       
                        if self.data.len() <= other.data.len() {
                            self.clone() & other
                        } else {
                            other.clone() & self
                        }
                    }
                }
                forward_val_assign!(impl BitAndAssign for BigUint, bitand_assign);

                impl BitAnd<&BigUint> for BigUint
                {
                    type Output = BigUint;

                    #[inline] fn bitand(mut self, other: &BigUint) -> BigUint {
                        self &= other;
                        self
                    }
                }
                impl BitAndAssign<&BigUint> for BigUint
                {
                    #[inline] fn bitand_assign(&mut self, other: &BigUint) {
                        for (ai, &bi) in self.data.iter_mut().zip(other.data.iter()) {
                            *ai &= bi;
                        }
                        self.data.truncate(other.data.len());
                        self.normalize();
                    }
                }
                forward_all_binop_to_val_ref_commutative!(impl BitOr for BigUint, bitor);
                forward_val_assign!(impl BitOrAssign for BigUint, bitor_assign);

                impl BitOr<&BigUint> for BigUint
                {
                    type Output = BigUint;

                    fn bitor(mut self, other: &BigUint) -> BigUint {
                        self |= other;
                        self
                    }
                }
                impl BitOrAssign<&BigUint> for BigUint
                {
                    #[inline] fn bitor_assign(&mut self, other: &BigUint) {
                        for (ai, &bi) in self.data.iter_mut().zip(other.data.iter()) {
                            *ai |= bi;
                        }
                        if other.data.len() > self.data.len() {
                            let extra = &other.data[self.data.len()..];
                            self.data.extend(extra.iter().cloned());
                        }
                    }
                }
                forward_all_binop_to_val_ref_commutative!(impl BitXor for BigUint, bitxor);
                forward_val_assign!(impl BitXorAssign for BigUint, bitxor_assign);

                impl BitXor<&BigUint> for BigUint
                {
                    type Output = BigUint;

                    fn bitxor(mut self, other: &BigUint) -> BigUint {
                        self ^= other;
                        self
                    }
                }
                impl BitXorAssign<&BigUint> for BigUint
                {
                    #[inline] fn bitxor_assign(&mut self, other: &BigUint) {
                        for (ai, &bi) in self.data.iter_mut().zip(other.data.iter()) {
                            *ai ^= bi;
                        }
                        if other.data.len() > self.data.len() {
                            let extra = &other.data[self.data.len()..];
                            self.data.extend(extra.iter().cloned());
                        }
                        self.normalize();
                    }
                }
            }
            pub mod convert
            {
                /*!
                */
                use ::
                {
                    vec::{ Vec },
                    cmp::Ordering::{ Equal, Greater, Less },
                    convert::{ TryFrom },
                    num::
                    {
                        big::
                        {
                            digit::{self, BigDigit},
                            ParseBigIntError, TryFromBigIntError,
                        },
                        integers::{ Integer, Roots },
                        traits::
                        {
                            float::{ Float, FloatCore }, FromPrimitive, Num, One, PrimInt, ToPrimitive, Zero,
                        },
                    },
                    str::{ FromStr },
                    *,
                };
                use super::{biguint_from_vec, BigUint, ToBigUint};
                use super::addition::add2;
                use super::division::{div_rem_digit, FAST_DIV_WIDE};
                use super::multiplication::mac_with_carry;
                /*
                */
                /// Find last set bit
                /// fls(0) == 0, fls(u32::MAX) == 32
                fn fls<T: PrimInt>(v: T) -> u8 {
                    mem::size_of::<T>() as u8 * 8 - v.leading_zeros() as u8
                }
                fn ilog2<T: PrimInt>(v: T) -> u8 {
                    fls(v) - 1
                }
                impl FromStr for BigUint
                {
                    type Err = ParseBigIntError;

                    #[inline] fn from_str(s: &str) -> Result<BigUint, ParseBigIntError> {
                        BigUint::from_str_radix(s, 10)
                    }
                }
                
                pub(super) fn from_bitwise_digits_le(v: &[u8], bits: u8) -> BigUint {
                    debug_assert!(!v.is_empty() && bits <= 8 && ::num::big::digit::BITS % bits == 0);
                    debug_assert!(v.iter().all(|&c| BigDigit::from(c) < (1 << bits)));

                    let digits_per_big_digit = ::num::big::digit::BITS / bits;

                    let data = v
                        .chunks(digits_per_big_digit.into())
                        .map(|chunk| {
                            chunk
                                .iter()
                                .rev()
                                .fold(0, |acc, &c| (acc << bits) | BigDigit::from(c))
                        })
                        .collect();

                    biguint_from_vec(data)
                }
               
               
                fn from_inexact_bitwise_digits_le(v: &[u8], bits: u8) -> BigUint {
                    debug_assert!(!v.is_empty() && bits <= 8 && ::num::big::digit::BITS % bits != 0);
                    debug_assert!(v.iter().all(|&c| BigDigit::from(c) < (1 << bits)));

                    let total_bits = (v.len() as u64).saturating_mul(bits.into());
                    let big_digits = Integer::div_ceil(&total_bits, &::num::big::digit::BITS.into())
                        .to_usize()
                        .unwrap_or(usize::MAX);
                    let mut data = Vec::with_capacity(big_digits);

                    let mut d = 0;
                    let mut dbits = 0;

                   
                   
                    for &c in v {
                        d |= BigDigit::from(c) << dbits;
                        dbits += bits;

                        if dbits >= ::num::big::digit::BITS {
                            data.push(d);
                            dbits -= ::num::big::digit::BITS;
                           
                           
                            d = BigDigit::from(c) >> (bits - dbits);
                        }
                    }
                    if dbits > 0 {
                        debug_assert!(dbits < ::num::big::digit::BITS);
                        data.push(d as BigDigit);
                    }
                    biguint_from_vec(data)
                }
               
                fn from_radix_digits_be(v: &[u8], radix: u32) -> BigUint {
                    debug_assert!(!v.is_empty() && !radix.is_power_of_two());
                    debug_assert!(v.iter().all(|&c| u32::from(c) < radix));

                   
                            let big_digits = {
                        let radix_log2 = f64::from(radix).log2();
                        let bits = radix_log2 * v.len() as f64;
                        (bits / ::num::big::digit::BITS as f64).ceil()
                    };
                    
                    let mut data = Vec::with_capacity(big_digits.to_usize().unwrap_or(0));

                    let (base, power) = get_radix_base(radix);
                    let radix = radix as BigDigit;

                    let r = v.len() % power;
                    let i = if r == 0 { power } else { r };
                    let (head, tail) = v.split_at(i);

                    let first = head
                        .iter()
                        .fold(0, |acc, &d| acc * radix + BigDigit::from(d));
                    data.push(first);

                    debug_assert!(tail.len() % power == 0);
                    for chunk in tail.chunks(power) {
                        if data.last() != Some(&0) {
                            data.push(0);
                        }
                        let mut carry = 0;
                        for d in data.iter_mut() {
                            *d = mac_with_carry(0, *d, base, &mut carry);
                        }
                        debug_assert!(carry == 0);

                        let n = chunk
                            .iter()
                            .fold(0, |acc, &d| acc * radix + BigDigit::from(d));
                        add2(&mut data, &[n]);
                    }
                    biguint_from_vec(data)
                }
                pub(super) fn from_radix_be(buf: &[u8], radix: u32) -> Option<BigUint> {
                    assert!(
                        2 <= radix && radix <= 256,
                        "The radix must be within 2...256"
                    );

                    if buf.is_empty() {
                        return Some(BigUint::ZERO);
                    }
                    if radix != 256 && buf.iter().any(|&b| b >= radix as u8) {
                        return None;
                    }
                    let res = if radix.is_power_of_two() {
                       
                        let bits = ilog2(radix);
                        let mut v = Vec::from(buf);
                        v.reverse();
                        if ::num::big::digit::BITS % bits == 0 {
                            from_bitwise_digits_le(&v, bits)
                        } else {
                            from_inexact_bitwise_digits_le(&v, bits)
                        }
                    } else {
                        from_radix_digits_be(buf, radix)
                    };

                    Some(res)
                }
                pub(super) fn from_radix_le(buf: &[u8], radix: u32) -> Option<BigUint> {
                    assert!(
                        2 <= radix && radix <= 256,
                        "The radix must be within 2...256"
                    );

                    if buf.is_empty() {
                        return Some(BigUint::ZERO);
                    }
                    if radix != 256 && buf.iter().any(|&b| b >= radix as u8) {
                        return None;
                    }
                    let res = if radix.is_power_of_two() {
                       
                        let bits = ilog2(radix);
                        if ::num::big::digit::BITS % bits == 0 {
                            from_bitwise_digits_le(buf, bits)
                        } else {
                            from_inexact_bitwise_digits_le(buf, bits)
                        }
                    } else {
                        let mut v = Vec::from(buf);
                        v.reverse();
                        from_radix_digits_be(&v, radix)
                    };

                    Some(res)
                }
                impl Num for BigUint
                {
                    type FromStrRadixErr = ParseBigIntError;

                    /// Creates and initializes a `BigUint`.
                    fn from_str_radix(s: &str, radix: u32) -> Result<BigUint, ParseBigIntError> {
                        assert!(2 <= radix && radix <= 36, "The radix must be within 2...36");
                        let mut s = s;
                        if let Some(tail) = s.strip_prefix('+') {
                            if !tail.starts_with('+') {
                                s = tail
                            }
                        }
                        if s.is_empty() {
                            return Err(ParseBigIntError::empty());
                        }
                        if s.starts_with('_') {
                           
                            return Err(ParseBigIntError::invalid());
                        }
                       
                        let mut v = Vec::with_capacity(s.len());
                        for b in s.bytes() {
                            let d = match b {
                                b'0'..=b'9' => b - b'0',
                                b'a'..=b'z' => b - b'a' + 10,
                                b'A'..=b'Z' => b - b'A' + 10,
                                b'_' => continue,
                                _ => u8::MAX,
                            };
                            if d < radix as u8 {
                                v.push(d);
                            } else {
                                return Err(ParseBigIntError::invalid());
                            }
                        }
                        let res = if radix.is_power_of_two() {
                           
                            let bits = ilog2(radix);
                            v.reverse();
                            if ::num::big::digit::BITS % bits == 0 {
                                from_bitwise_digits_le(&v, bits)
                            } else {
                                from_inexact_bitwise_digits_le(&v, bits)
                            }
                        } else {
                            from_radix_digits_be(&v, radix)
                        };
                        Ok(res)
                    }
                }
                fn high_bits_to_u64(v: &BigUint) -> u64 {
                    match v.data.len() {
                        0 => 0,
                        1 => {
                           
                            #[allow(clippy::useless_conversion)]
                            let v0 = u64::from(v.data[0]);
                            v0
                        }
                        _ => {
                            let mut bits = v.bits();
                            let mut ret = 0u64;
                            let mut ret_bits = 0;

                            for d in v.data.iter().rev() {
                                let digit_bits = (bits - 1) % u64::from(::num::big::digit::BITS) + 1;
                                let bits_want = Ord::min(64 - ret_bits, digit_bits);

                                if bits_want != 0 {
                                    if bits_want != 64 {
                                        ret <<= bits_want;
                                    }
                                   
                                    #[allow(clippy::useless_conversion)]
                                    let d0 = u64::from(*d) >> (digit_bits - bits_want);
                                    ret |= d0;
                                }
                               
                               
                               
                                //
                               

                                if digit_bits - bits_want != 0 {
                                   
                                    #[allow(clippy::useless_conversion)]
                                    let masked = u64::from(*d) << (64 - (digit_bits - bits_want) as u32);
                                    ret |= (masked != 0) as u64;
                                }
                                ret_bits += bits_want;
                                bits -= bits_want;
                            }
                            ret
                        }
                    }
                }
                impl ToPrimitive for BigUint
                {
                    #[inline] fn to_i64(&self) -> Option<i64> {
                        self.to_u64().as_ref().and_then(u64::to_i64)
                    }
                    #[inline] fn to_i128(&self) -> Option<i128> {
                        self.to_u128().as_ref().and_then(u128::to_i128)
                    }
                    #[allow(clippy::useless_conversion)]
                    #[inline] fn to_u64(&self) -> Option<u64> {
                        let mut ret: u64 = 0;
                        let mut bits = 0;

                        for i in self.data.iter() {
                            if bits >= 64 {
                                return None;
                            }
                           
                            ret += u64::from(*i) << bits;
                            bits += ::num::big::digit::BITS;
                        }
                        Some(ret)
                    }
                    #[inline] fn to_u128(&self) -> Option<u128> {
                        let mut ret: u128 = 0;
                        let mut bits = 0;

                        for i in self.data.iter() {
                            if bits >= 128 {
                                return None;
                            }
                            ret |= u128::from(*i) << bits;
                            bits += ::num::big::digit::BITS;
                        }
                        Some(ret)
                    }
                    #[inline] fn to_f32(&self) -> Option<f32> {
                        let mantissa = high_bits_to_u64(self);
                        let exponent = self.bits() - u64::from(fls(mantissa));

                        if exponent > f32::MAX_EXP as u64 {
                            Some(f32::INFINITY)
                        } else {
                            Some((mantissa as f32) * 2.0f32.powi(exponent as i32))
                        }
                    }
                    #[inline] fn to_f64(&self) -> Option<f64> {
                        let mantissa = high_bits_to_u64(self);
                        let exponent = self.bits() - u64::from(fls(mantissa));

                        if exponent > f64::MAX_EXP as u64 {
                            Some(f64::INFINITY)
                        } else {
                            Some((mantissa as f64) * 2.0f64.powi(exponent as i32))
                        }
                    }
                }
                macro_rules! impl_try_from_biguint {
                    ($T:ty, $to_ty:path) => {
                        impl TryFrom<&BigUint> for $T {
                            type Error = TryFromBigIntError<()>;

                            #[inline]
                            fn try_from(value: &BigUint) -> Result<$T, TryFromBigIntError<()>> {
                                $to_ty(value).ok_or(TryFromBigIntError::new(()))
                            }
                        }
                        impl TryFrom<BigUint> for $T {
                            type Error = TryFromBigIntError<BigUint>;

                            #[inline]
                            fn try_from(value: BigUint) -> Result<$T, TryFromBigIntError<BigUint>> {
                                <$T>::try_from(&value).map_err(|_| TryFromBigIntError::new(value))
                            }
                        }
                    };
                }
                impl_try_from_biguint!(u8, ToPrimitive::to_u8);
                impl_try_from_biguint!(u16, ToPrimitive::to_u16);
                impl_try_from_biguint!(u32, ToPrimitive::to_u32);
                impl_try_from_biguint!(u64, ToPrimitive::to_u64);
                impl_try_from_biguint!(usize, ToPrimitive::to_usize);
                impl_try_from_biguint!(u128, ToPrimitive::to_u128);

                impl_try_from_biguint!(i8, ToPrimitive::to_i8);
                impl_try_from_biguint!(i16, ToPrimitive::to_i16);
                impl_try_from_biguint!(i32, ToPrimitive::to_i32);
                impl_try_from_biguint!(i64, ToPrimitive::to_i64);
                impl_try_from_biguint!(isize, ToPrimitive::to_isize);
                impl_try_from_biguint!(i128, ToPrimitive::to_i128);

                impl FromPrimitive for BigUint
                {
                    #[inline] fn from_i64(n: i64) -> Option<BigUint> {
                        if n >= 0 {
                            Some(BigUint::from(n as u64))
                        } else {
                            None
                        }
                    }
                    #[inline] fn from_i128(n: i128) -> Option<BigUint> {
                        if n >= 0 {
                            Some(BigUint::from(n as u128))
                        } else {
                            None
                        }
                    }
                    #[inline] fn from_u64(n: u64) -> Option<BigUint> {
                        Some(BigUint::from(n))
                    }
                    #[inline] fn from_u128(n: u128) -> Option<BigUint> {
                        Some(BigUint::from(n))
                    }
                    #[inline] fn from_f64(mut n: f64) -> Option<BigUint> {
                       
                        if !n.is_finite() {
                            return None;
                        }
                       
                        n = n.trunc();

                       
                        if n.is_zero() {
                            return Some(Self::ZERO);
                        }
                        let (mantissa, exponent, sign) = Float::integer_decode(n);

                        if sign == -1 {
                            return None;
                        }
                        let mut ret = BigUint::from(mantissa);
                        match exponent.cmp(&0) {
                            Greater => ret <<= exponent as usize,
                            Equal => {}
                            Less => ret >>= (-exponent) as usize,
                        }
                        Some(ret)
                    }
                }
                impl From<u64> for BigUint
                {
                    #[inline] fn from(mut n: u64) -> Self {
                        let mut ret: BigUint = Self::ZERO;

                        while n != 0 {
                            ret.data.push(n as BigDigit);
                           
                            n = (n >> 1) >> (::num::big::digit::BITS - 1);
                        }
                        ret
                    }
                }
                impl From<u128> for BigUint
                {
                    #[inline] fn from(mut n: u128) -> Self {
                        let mut ret: BigUint = Self::ZERO;

                        while n != 0 {
                            ret.data.push(n as BigDigit);
                            n >>= ::num::big::digit::BITS;
                        }
                        ret
                    }
                }
                macro_rules! impl_biguint_from_uint {
                    ($T:ty) => {
                        impl From<$T> for BigUint {
                            #[inline]
                            fn from(n: $T) -> Self {
                                BigUint::from(n as u64)
                            }
                        }
                    };
                }
                impl_biguint_from_uint!(u8);
                impl_biguint_from_uint!(u16);
                impl_biguint_from_uint!(u32);
                impl_biguint_from_uint!(usize);

                macro_rules! impl_biguint_try_from_int {
                    ($T:ty, $from_ty:path) => {
                        impl TryFrom<$T> for BigUint {
                            type Error = TryFromBigIntError<()>;

                            #[inline]
                            fn try_from(value: $T) -> Result<BigUint, TryFromBigIntError<()>> {
                                $from_ty(value).ok_or(TryFromBigIntError::new(()))
                            }
                        }
                    };
                }
                impl_biguint_try_from_int!(i8, FromPrimitive::from_i8);
                impl_biguint_try_from_int!(i16, FromPrimitive::from_i16);
                impl_biguint_try_from_int!(i32, FromPrimitive::from_i32);
                impl_biguint_try_from_int!(i64, FromPrimitive::from_i64);
                impl_biguint_try_from_int!(isize, FromPrimitive::from_isize);
                impl_biguint_try_from_int!(i128, FromPrimitive::from_i128);

                impl ToBigUint for BigUint
                {
                    #[inline] fn to_biguint(&self) -> Option<BigUint> {
                        Some(self.clone())
                    }
                }
                macro_rules! impl_to_biguint {
                    ($T:ty, $from_ty:path) => {
                        impl ToBigUint for $T {
                            #[inline]
                            fn to_biguint(&self) -> Option<BigUint> {
                                $from_ty(*self)
                            }
                        }
                    };
                }
                impl_to_biguint!(isize, FromPrimitive::from_isize);
                impl_to_biguint!(i8, FromPrimitive::from_i8);
                impl_to_biguint!(i16, FromPrimitive::from_i16);
                impl_to_biguint!(i32, FromPrimitive::from_i32);
                impl_to_biguint!(i64, FromPrimitive::from_i64);
                impl_to_biguint!(i128, FromPrimitive::from_i128);

                impl_to_biguint!(usize, FromPrimitive::from_usize);
                impl_to_biguint!(u8, FromPrimitive::from_u8);
                impl_to_biguint!(u16, FromPrimitive::from_u16);
                impl_to_biguint!(u32, FromPrimitive::from_u32);
                impl_to_biguint!(u64, FromPrimitive::from_u64);
                impl_to_biguint!(u128, FromPrimitive::from_u128);

                impl_to_biguint!(f32, FromPrimitive::from_f32);
                impl_to_biguint!(f64, FromPrimitive::from_f64);

                impl From<bool> for BigUint {
                    fn from(x: bool) -> Self {
                        if x {
                            One::one()
                        } else {
                            Self::ZERO
                        }
                    }
                }
               
                pub(super) fn to_bitwise_digits_le(u: &BigUint, bits: u8) -> Vec<u8> {
                    debug_assert!(!u.is_zero() && bits <= 8 && ::num::big::digit::BITS % bits == 0);

                    let last_i = u.data.len() - 1;
                    let mask: BigDigit = (1 << bits) - 1;
                    let digits_per_big_digit = ::num::big::digit::BITS / bits;
                    let digits = Integer::div_ceil(&u.bits(), &u64::from(bits))
                        .to_usize()
                        .unwrap_or(usize::MAX);
                    let mut res = Vec::with_capacity(digits);

                    for mut r in u.data[..last_i].iter().cloned() {
                        for _ in 0..digits_per_big_digit {
                            res.push((r & mask) as u8);
                            r >>= bits;
                        }
                    }
                    let mut r = u.data[last_i];
                    while r != 0 {
                        res.push((r & mask) as u8);
                        r >>= bits;
                    }
                    res
                }
               
                fn to_inexact_bitwise_digits_le(u: &BigUint, bits: u8) -> Vec<u8> {
                    debug_assert!(!u.is_zero() && bits <= 8 && ::num::big::digit::BITS % bits != 0);

                    let mask: BigDigit = (1 << bits) - 1;
                    let digits = Integer::div_ceil(&u.bits(), &u64::from(bits))
                        .to_usize()
                        .unwrap_or(usize::MAX);
                    let mut res = Vec::with_capacity(digits);

                    let mut r = 0;
                    let mut rbits = 0;

                    for c in &u.data {
                        r |= *c << rbits;
                        rbits += ::num::big::digit::BITS;

                        while rbits >= bits {
                            res.push((r & mask) as u8);
                            r >>= bits;

                           
                            if rbits > ::num::big::digit::BITS {
                                r = *c >> (::num::big::digit::BITS - (rbits - bits));
                            }
                            rbits -= bits;
                        }
                    }
                    if rbits != 0 {
                        res.push(r as u8);
                    }
                    while let Some(&0) = res.last() {
                        res.pop();
                    }
                    res
                }
               
                #[inline(always)]
                pub(super) fn to_radix_digits_le(u: &BigUint, radix: u32) -> Vec<u8> {
                    debug_assert!(!u.is_zero() && !radix.is_power_of_two());

                            let radix_digits = {
                        let radix_log2 = f64::from(radix).log2();
                        ((u.bits() as f64) / radix_log2).ceil()
                    };
                    
                    let mut res = Vec::with_capacity(radix_digits.to_usize().unwrap_or(0));

                    let mut digits = u.clone();

                   
                   
                    let (base, power) = if FAST_DIV_WIDE {
                        get_radix_base(radix)
                    } else {
                        get_half_radix_base(radix)
                    };
                    let radix = radix as BigDigit;

                   
                   
                   
                   
                    if digits.data.len() >= 64 {
                        let mut big_base = BigUint::from(base);
                        let mut big_power = 1usize;

                       
                        let target_len = digits.data.len().sqrt();
                        while big_base.data.len() < target_len {
                            big_base = &big_base * &big_base;
                            big_power *= 2;
                        }
                       
                        while digits > big_base {
                           
                            let (q, mut big_r) = digits.div_rem(&big_base);
                            digits = q;

                           
                            for _ in 0..big_power {
                                let (q, mut r) = div_rem_digit(big_r, base);
                                big_r = q;
                                for _ in 0..power {
                                    res.push((r % radix) as u8);
                                    r /= radix;
                                }
                            }
                        }
                    }
                    while digits.data.len() > 1 {
                        let (q, mut r) = div_rem_digit(digits, base);
                        for _ in 0..power {
                            res.push((r % radix) as u8);
                            r /= radix;
                        }
                        digits = q;
                    }
                    let mut r = digits.data[0];
                    while r != 0 {
                        res.push((r % radix) as u8);
                        r /= radix;
                    }
                    res
                }
                pub(super) fn to_radix_le(u: &BigUint, radix: u32) -> Vec<u8> {
                    if u.is_zero() {
                        vec![0]
                    } else if radix.is_power_of_two() {
                       
                        let bits = ilog2(radix);
                        if ::num::big::digit::BITS % bits == 0 {
                            to_bitwise_digits_le(u, bits)
                        } else {
                            to_inexact_bitwise_digits_le(u, bits)
                        }
                    } else if radix == 10 {
                       
                       
                        to_radix_digits_le(u, 10)
                    } else {
                        to_radix_digits_le(u, radix)
                    }
                }
                pub fn to_str_radix_reversed(u: &BigUint, radix: u32) -> Vec<u8> {
                    assert!(2 <= radix && radix <= 36, "The radix must be within 2...36");

                    if u.is_zero() {
                        return vec![b'0'];
                    }
                    let mut res = to_radix_le(u, radix);

                   
                    for r in &mut res {
                        debug_assert!(u32::from(*r) < radix);
                        if *r < 10 {
                            *r += b'0';
                        } else {
                            *r += b'a' - 10;
                        }
                    }
                    res
                }
                /// Returns the greatest power of the radix for the `BigDigit` bit size
                #[inline] fn get_radix_base(radix: u32) -> (BigDigit, usize) {
                    static BASES: [(BigDigit, usize); 257] = generate_radix_bases(::num::big::digit::MAX);
                    debug_assert!(!radix.is_power_of_two());
                    debug_assert!((3..256).contains(&radix));
                    BASES[radix as usize]
                }
                /// Returns the greatest power of the radix for half the `BigDigit` bit size
                #[inline] fn get_half_radix_base(radix: u32) -> (BigDigit, usize) {
                    static BASES: [(BigDigit, usize); 257] = generate_radix_bases(::num::big::digit::HALF);
                    debug_assert!(!radix.is_power_of_two());
                    debug_assert!((3..256).contains(&radix));
                    BASES[radix as usize]
                }
                /// Generate tables of the greatest power of each radix that is less that the given maximum. These
                /// are returned from `get_radix_base` to batch the multiplication/division of radix conversions on
                /// full `BigUint` values, operating on primitive integers as much as possible. Powers of two are not included, just zeroed, as they're implemented with shifts.
                const fn generate_radix_bases(max: BigDigit) -> [(BigDigit, usize); 257] {
                    let mut bases = [(0, 0); 257];

                    let mut radix: BigDigit = 3;
                    while radix < 256 {
                        if !radix.is_power_of_two() {
                            let mut power = 1;
                            let mut base = radix;

                            while let Some(b) = base.checked_mul(radix) {
                                if b > max {
                                    break;
                                }
                                base = b;
                                power += 1;
                            }
                            bases[radix as usize] = (base, power)
                        }
                        radix += 1;
                    }
                    bases
                }
            } pub use self::convert::to_str_radix_reversed;

            pub mod iter
            {
                /*!
                */
                use ::
                {
                    iter::{ FusedIterator },
                    *,
                };
                /*
                    use ::iter::FusedIterator;
                */
                cfg_digit!
                (
                    /// An iterator of `u32` digits representation of a `BigUint` or `BigInt`,
                    /// ordered least significant digit first.
                    pub struct U32Digits<'a> {
                        it: ::slice::Iter<'a, u32>,
                    }
                    /// An iterator of `u32` digits representation of a `BigUint` or `BigInt`,
                    /// ordered least significant digit first.
                    pub struct U32Digits<'a> {
                        data: &'a [u64],
                        next_is_lo: bool,
                        last_hi_is_zero: bool,
                    }
                );

                cfg_digit!
                (
                    const _: () = {
                        impl<'a> U32Digits<'a> {
                            #[inline]
                            pub(super) fn new(data: &'a [u32]) -> Self {
                                Self { it: data.iter() }
                            }
                        }
                        impl Iterator for U32Digits<'_> {
                            type Item = u32;
                            #[inline]
                            fn next(&mut self) -> Option<u32> {
                                self.it.next().cloned()
                            }
                            #[inline]
                            fn size_hint(&self) -> (usize, Option<usize>) {
                                self.it.size_hint()
                            }
                            #[inline]
                            fn nth(&mut self, n: usize) -> Option<u32> {
                                self.it.nth(n).cloned()
                            }
                            #[inline]
                            fn last(self) -> Option<u32> {
                                self.it.last().cloned()
                            }
                            #[inline]
                            fn count(self) -> usize {
                                self.it.count()
                            }
                        }
                        impl DoubleEndedIterator for U32Digits<'_> {
                            fn next_back(&mut self) -> Option<Self::Item> {
                                self.it.next_back().cloned()
                            }
                        }
                        impl ExactSizeIterator for U32Digits<'_> {
                            #[inline]
                            fn len(&self) -> usize {
                                self.it.len()
                            }
                        }
                    };

                    const _: () = {
                        impl<'a> U32Digits<'a> {
                            #[inline]
                            pub(super) fn new(data: &'a [u64]) -> Self {
                                let last_hi_is_zero = data
                                    .last()
                                    .map(|&last| {
                                        let last_hi = (last >> 32) as u32;
                                        last_hi == 0
                                    })
                                    .unwrap_or(false);
                                U32Digits {
                                    data,
                                    next_is_lo: true,
                                    last_hi_is_zero,
                                }
                            }
                        }
                        impl Iterator for U32Digits<'_> {
                            type Item = u32;
                            #[inline]
                            fn next(&mut self) -> Option<u32> {
                                match self.data.split_first() {
                                    Some((&first, data)) => {
                                        let next_is_lo = self.next_is_lo;
                                        self.next_is_lo = !next_is_lo;
                                        if next_is_lo {
                                            Some(first as u32)
                                        } else {
                                            self.data = data;
                                            if data.is_empty() && self.last_hi_is_zero {
                                                self.last_hi_is_zero = false;
                                                None
                                            } else {
                                                Some((first >> 32) as u32)
                                            }
                                        }
                                    }
                                    None => None,
                                }
                            }
                            #[inline]
                            fn size_hint(&self) -> (usize, Option<usize>) {
                                let len = self.len();
                                (len, Some(len))
                            }
                            #[inline]
                            fn last(self) -> Option<u32> {
                                self.data.last().map(|&last| {
                                    if self.last_hi_is_zero {
                                        last as u32
                                    } else {
                                        (last >> 32) as u32
                                    }
                                })
                            }
                            #[inline]
                            fn count(self) -> usize {
                                self.len()
                            }
                        }
                        impl DoubleEndedIterator for U32Digits<'_> {
                            fn next_back(&mut self) -> Option<Self::Item> {
                                match self.data.split_last() {
                                    Some((&last, data)) => {
                                        let last_is_lo = self.last_hi_is_zero;
                                        self.last_hi_is_zero = !last_is_lo;
                                        if last_is_lo {
                                            self.data = data;
                                            if data.is_empty() && !self.next_is_lo {
                                                self.next_is_lo = true;
                                                None
                                            } else {
                                                Some(last as u32)
                                            }
                                        } else {
                                            Some((last >> 32) as u32)
                                        }
                                    }
                                    None => None,
                                }
                            }
                        }
                        impl ExactSizeIterator for U32Digits<'_> {
                            #[inline]
                            fn len(&self) -> usize {
                                self.data.len() * 2
                                    - usize::from(self.last_hi_is_zero)
                                    - usize::from(!self.next_is_lo)
                            }
                        }
                    };
                );

                impl FusedIterator for U32Digits<'_> {}
                cfg_digit!
                (
                    /// An iterator of `u64` digits representation of a `BigUint` or `BigInt`,
                    /// ordered least significant digit first.
                    pub struct U64Digits<'a> {
                        it: ::slice::Chunks<'a, u32>,
                    }
                    /// An iterator of `u64` digits representation of a `BigUint` or `BigInt`,
                    /// ordered least significant digit first.
                    pub struct U64Digits<'a> {
                        it: ::slice::Iter<'a, u64>,
                    }
                );

                cfg_digit!
                (
                    const _: () = {
                        impl<'a> U64Digits<'a> {
                            #[inline]
                            pub(super) fn new(data: &'a [u32]) -> Self {
                                U64Digits { it: data.chunks(2) }
                            }
                        }
                        impl Iterator for U64Digits<'_> {
                            type Item = u64;
                            #[inline]
                            fn next(&mut self) -> Option<u64> {
                                self.it.next().map(super::u32_chunk_to_u64)
                            }
                            #[inline]
                            fn size_hint(&self) -> (usize, Option<usize>) {
                                let len = self.len();
                                (len, Some(len))
                            }
                            #[inline]
                            fn last(self) -> Option<u64> {
                                self.it.last().map(super::u32_chunk_to_u64)
                            }
                            #[inline]
                            fn count(self) -> usize {
                                self.len()
                            }
                        }
                        impl DoubleEndedIterator for U64Digits<'_> {
                            fn next_back(&mut self) -> Option<Self::Item> {
                                self.it.next_back().map(super::u32_chunk_to_u64)
                            }
                        }
                    };

                    const _: () = {
                        impl<'a> U64Digits<'a> {
                            #[inline]
                            pub(super) fn new(data: &'a [u64]) -> Self {
                                Self { it: data.iter() }
                            }
                        }
                        impl Iterator for U64Digits<'_> {
                            type Item = u64;
                            #[inline]
                            fn next(&mut self) -> Option<u64> {
                                self.it.next().cloned()
                            }
                            #[inline]
                            fn size_hint(&self) -> (usize, Option<usize>) {
                                self.it.size_hint()
                            }
                            #[inline]
                            fn nth(&mut self, n: usize) -> Option<u64> {
                                self.it.nth(n).cloned()
                            }
                            #[inline]
                            fn last(self) -> Option<u64> {
                                self.it.last().cloned()
                            }
                            #[inline]
                            fn count(self) -> usize {
                                self.it.count()
                            }
                        }
                        impl DoubleEndedIterator for U64Digits<'_> {
                            fn next_back(&mut self) -> Option<Self::Item> {
                                self.it.next_back().cloned()
                            }
                        }
                    };
                );

                impl ExactSizeIterator for U64Digits<'_>
                {
                    #[inline] fn len(&self) -> usize {
                        self.it.len()
                    }
                }
                impl FusedIterator for U64Digits<'_> {}
            }
            pub mod monty
            {
                /*!
                */
                use ::
                {
                    vec::{ Vec },
                    ops::{ Shl },
                    num::
                    {
                        big::
                        {
                            digit::{self, BigDigit, DoubleBigDigit},
                            uint::BigUint,
                        },
                        traits::One,
                    },
                    *,
                };
                /*
                */
                struct MontyReducer {
                    n0inv: BigDigit,
                }
               
               
                fn inv_mod_alt(b: BigDigit) -> BigDigit {
                    assert_ne!(b & 1, 0);

                    let mut k0 = BigDigit::wrapping_sub(2, b);
                    let mut t = b - 1;
                    let mut i = 1;
                    while i < ::num::big::digit::BITS {
                        t = t.wrapping_mul(t);
                        k0 = k0.wrapping_mul(t + 1);

                        i <<= 1;
                    }
                    debug_assert_eq!(k0.wrapping_mul(b), 1);
                    k0.wrapping_neg()
                }
                impl MontyReducer {
                    fn new(n: &BigUint) -> Self {
                        let n0inv = inv_mod_alt(n.data[0]);
                        MontyReducer { n0inv }
                    }
                }
                /// Computes z mod m = x * y * 2 ** (-n*_W) mod m
                /// assuming k = -1/m mod 2**_W
                /// See Gueron, "Efficient Software Implementations of Modular Exponentiation".
                #[allow(clippy::many_single_char_names)]
                fn montgomery(x: &BigUint, y: &BigUint, m: &BigUint, k: BigDigit, n: usize) -> BigUint {
                   
                   
                   
                   
                    assert!(
                        x.data.len() == n && y.data.len() == n && m.data.len() == n,
                        "{:?} {:?} {:?} {}",
                        x,
                        y,
                        m,
                        n
                    );

                    let mut z = BigUint::ZERO;
                    z.data.resize(n * 2, 0);

                    let mut c: BigDigit = 0;
                    for i in 0..n {
                        let c2 = add_mul_vvw(&mut z.data[i..n + i], &x.data, y.data[i]);
                        let t = z.data[i].wrapping_mul(k);
                        let c3 = add_mul_vvw(&mut z.data[i..n + i], &m.data, t);
                        let cx = c.wrapping_add(c2);
                        let cy = cx.wrapping_add(c3);
                        z.data[n + i] = cy;
                        if cx < c2 || cy < c3 {
                            c = 1;
                        } else {
                            c = 0;
                        }
                    }
                    if c == 0 {
                        z.data = z.data[n..].to_vec();
                    } else {
                        {
                            let (first, second) = z.data.split_at_mut(n);
                            sub_vv(first, second, &m.data);
                        }
                        z.data = z.data[..n].to_vec();
                    }
                    z
                }
                #[inline( always )] fn add_mul_vvw(z: &mut [BigDigit], x: &[BigDigit], y: BigDigit) -> BigDigit {
                    let mut c = 0;
                    for (zi, xi) in z.iter_mut().zip(x.iter()) {
                        let (z1, z0) = mul_add_www(*xi, y, *zi);
                        let (c_, zi_) = add_ww(z0, c, 0);
                        *zi = zi_;
                        c = c_ + z1;
                    }
                    c
                }
                /// The resulting carry c is either 0 or 1.
                #[inline( always )] fn sub_vv(z: &mut [BigDigit], x: &[BigDigit], y: &[BigDigit]) -> BigDigit {
                    let mut c = 0;
                    for (i, (xi, yi)) in x.iter().zip(y.iter()).enumerate().take(z.len()) {
                        let zi = xi.wrapping_sub(*yi).wrapping_sub(c);
                        z[i] = zi;
                       
                        c = ((yi & !xi) | ((yi | !xi) & zi)) >> (::num::big::digit::BITS - 1)
                    }
                    c
                }
                /// z1<<_W + z0 = x+y+c, with c == 0 or 1
                #[inline( always )] fn add_ww(x: BigDigit, y: BigDigit, c: BigDigit) -> (BigDigit, BigDigit) {
                    let yc = y.wrapping_add(c);
                    let z0 = x.wrapping_add(yc);
                    let z1 = if z0 < x || yc < y { 1 } else { 0 };

                    (z1, z0)
                }
                /// z1 << _W + z0 = x * y + c
                #[inline( always )] fn mul_add_www(x: BigDigit, y: BigDigit, c: BigDigit) -> (BigDigit, BigDigit) {
                    let z = x as DoubleBigDigit * y as DoubleBigDigit + c as DoubleBigDigit;
                    ((z >> ::num::big::digit::BITS) as BigDigit, z as BigDigit)
                }
                /// Calculates x ** y mod m using a fixed, 4-bit window.
                #[allow(clippy::many_single_char_names)]
                pub(super) fn monty_modpow(x: &BigUint, y: &BigUint, m: &BigUint) -> BigUint {
                    assert!(m.data[0] & 1 == 1);
                    let mr = MontyReducer::new(m);
                    let num_words = m.data.len();

                    let mut x = x.clone();

                   
                   
                    if x.data.len() > num_words {
                        x %= m;
                       
                    }
                    if x.data.len() < num_words {
                        x.data.resize(num_words, 0);
                    }
                   
                    let mut rr = BigUint::one();
                    rr = (rr.shl(2 * num_words as u64 * u64::from(::num::big::digit::BITS))) % m;
                    if rr.data.len() < num_words {
                        rr.data.resize(num_words, 0);
                    }
                   
                    let mut one = BigUint::one();
                    one.data.resize(num_words, 0);

                    let n = 4;
                   
                    let mut powers = Vec::with_capacity(1 << n);
                    powers.push(montgomery(&one, &rr, m, mr.n0inv, num_words));
                    powers.push(montgomery(&x, &rr, m, mr.n0inv, num_words));
                    for i in 2..1 << n {
                        let r = montgomery(&powers[i - 1], &powers[1], m, mr.n0inv, num_words);
                        powers.push(r);
                    }
                   
                    let mut z = powers[0].clone();
                    z.data.resize(num_words, 0);
                    let mut zz = BigUint::ZERO;
                    zz.data.resize(num_words, 0);

                   
                    for i in (0..y.data.len()).rev() {
                        let mut yi = y.data[i];
                        let mut j = 0;
                        while j < ::num::big::digit::BITS {
                            if i != y.data.len() - 1 || j != 0 {
                                zz = montgomery(&z, &z, m, mr.n0inv, num_words);
                                z = montgomery(&zz, &zz, m, mr.n0inv, num_words);
                                zz = montgomery(&z, &z, m, mr.n0inv, num_words);
                                z = montgomery(&zz, &zz, m, mr.n0inv, num_words);
                            }
                            zz = montgomery(
                                &z,
                                &powers[(yi >> (::num::big::digit::BITS - n)) as usize],
                                m,
                                mr.n0inv,
                                num_words,
                            );
                            mem::swap(&mut z, &mut zz);
                            yi <<= n;
                            j += n;
                        }
                    }
                   
                    zz = montgomery(&z, &one, m, mr.n0inv, num_words);

                    zz.normalize();
                   
                   
                    if zz >= *m {
                       
                       
                       
                       
                       
                       
                       
                        zz -= m;
                        if zz >= *m {
                            zz %= m;
                        }
                    }
                    zz.normalize();
                    zz
                }
            } pub use self::iter::{U32Digits, U64Digits};

            pub mod power
            {
                /*!
                */
                use ::
                {
                    num::
                    {
                        big::digit::{self, BigDigit},
                        integers::Integer,
                        traits::{One, Pow, ToPrimitive, Zero},
                    },
                    *,
                };
                use super::monty::monty_modpow;
                use super::BigUint;
                /*
                */
                impl Pow<&BigUint> for BigUint
                {
                    type Output = BigUint;

                    #[inline] fn pow(self, exp: &BigUint) -> BigUint {
                        if self.is_one() || exp.is_zero() {
                            BigUint::one()
                        } else if self.is_zero() {
                            Self::ZERO
                        } else if let Some(exp) = exp.to_u64() {
                            self.pow(exp)
                        } else if let Some(exp) = exp.to_u128() {
                            self.pow(exp)
                        } else {
                           
                           
                            panic!("memory overflow")
                        }
                    }
                }
                impl Pow<BigUint> for BigUint
                {
                    type Output = BigUint;

                    #[inline] fn pow(self, exp: BigUint) -> BigUint {
                        Pow::pow(self, &exp)
                    }
                }
                impl Pow<&BigUint> for &BigUint
                {
                    type Output = BigUint;

                    #[inline] fn pow(self, exp: &BigUint) -> BigUint {
                        if self.is_one() || exp.is_zero() {
                            BigUint::one()
                        } else if self.is_zero() {
                            BigUint::ZERO
                        } else {
                            self.clone().pow(exp)
                        }
                    }
                }
                impl Pow<BigUint> for &BigUint
                {
                    type Output = BigUint;

                    #[inline] fn pow(self, exp: BigUint) -> BigUint {
                        Pow::pow(self, &exp)
                    }
                }
                macro_rules! pow_impl 
                {
                    ($T:ty) => {
                        impl Pow<$T> for BigUint {
                            type Output = BigUint;

                            fn pow(self, mut exp: $T) -> BigUint {
                                if exp == 0 {
                                    return BigUint::one();
                                }
                                let mut base = self;

                                while exp & 1 == 0 {
                                    base = &base * &base;
                                    exp >>= 1;
                                }
                                if exp == 1 {
                                    return base;
                                }
                                let mut acc = base.clone();
                                while exp > 1 {
                                    exp >>= 1;
                                    base = &base * &base;
                                    if exp & 1 == 1 {
                                        acc *= &base;
                                    }
                                }
                                acc
                            }
                        }
                        impl Pow<&$T> for BigUint {
                            type Output = BigUint;

                            #[inline]
                            fn pow(self, exp: &$T) -> BigUint {
                                Pow::pow(self, *exp)
                            }
                        }
                        impl Pow<$T> for &BigUint {
                            type Output = BigUint;

                            #[inline]
                            fn pow(self, exp: $T) -> BigUint {
                                if exp == 0 {
                                    return BigUint::one();
                                }
                                Pow::pow(self.clone(), exp)
                            }
                        }
                        impl Pow<&$T> for &BigUint {
                            type Output = BigUint;

                            #[inline]
                            fn pow(self, exp: &$T) -> BigUint {
                                Pow::pow(self, *exp)
                            }
                        }
                    };
                }
                pow_impl!(u8);
                pow_impl!(u16);
                pow_impl!(u32);
                pow_impl!(u64);
                pow_impl!(usize);
                pow_impl!(u128);

                pub fn modpow(x: &BigUint, exponent: &BigUint, modulus: &BigUint) -> BigUint 
                {
                    assert!(
                        !modulus.is_zero(),
                        "attempt to calculate with zero modulus!"
                    );

                    if modulus.is_odd() {
                       
                        monty_modpow(x, exponent, modulus)
                    } else {
                       
                        plain_modpow(x, &exponent.data, modulus)
                    }
                }
                pub fn plain_modpow(base: &BigUint, exp_data: &[BigDigit], modulus: &BigUint) -> BigUint 
                {
                    assert!(
                        !modulus.is_zero(),
                        "attempt to calculate with zero modulus!"
                    );

                    let i = match exp_data.iter().position(|&r| r != 0) {
                        None => return BigUint::one(),
                        Some(i) => i,
                    };

                    let mut base = base % modulus;
                    for _ in 0..i {
                        for _ in 0..::num::big::digit::BITS {
                            base = &base * &base % modulus;
                        }
                    }
                    let mut r = exp_data[i];
                    let mut b = 0u8;
                    while r.is_even() {
                        base = &base * &base % modulus;
                        r >>= 1;
                        b += 1;
                    }
                    let mut exp_iter = exp_data[i + 1..].iter();
                    if exp_iter.len() == 0 && r.is_one() {
                        return base;
                    }
                    let mut acc = base.clone();
                    r >>= 1;
                    b += 1;

                    {
                        let mut unit = |exp_is_odd| {
                            base = &base * &base % modulus;
                            if exp_is_odd {
                                acc *= &base;
                                acc %= modulus;
                            }
                        };

                        if let Some(&last) = exp_iter.next_back() {
                           
                            for _ in b..::num::big::digit::BITS {
                                unit(r.is_odd());
                                r >>= 1;
                            }
                           
                            for &r in exp_iter {
                                let mut r = r;
                                for _ in 0..::num::big::digit::BITS {
                                    unit(r.is_odd());
                                    r >>= 1;
                                }
                            }
                            r = last;
                        }
                        debug_assert_ne!(r, 0);
                        while !r.is_zero() {
                            unit(r.is_odd());
                            r >>= 1;
                        }
                    }
                    acc
                }
            }
            pub mod shift
            {
                /*!
                */
                use ::
                {
                    borrow::{ Cow },
                    num::
                    {
                        big::{ digit },
                        traits::{PrimInt, Zero},
                    },
                    ops::{Shl, ShlAssign, Shr, ShrAssign},
                    vec::{ Vec },
                    *,
                };

                use super::{biguint_from_vec, BigUint};
                /*
                */
                #[inline] fn biguint_shl<T: PrimInt>(n: Cow<'_, BigUint>, shift: T) -> BigUint {
                    if shift < T::zero() {
                        panic!("attempt to shift left with negative");
                    }
                    if n.is_zero() {
                        return n.into_owned();
                    }
                    let bits = T::from(::num::big::digit::BITS).unwrap();
                    let digits = (shift / bits).to_usize().expect("capacity overflow");
                    let shift = (shift % bits).to_u8().unwrap();
                    biguint_shl2(n, digits, shift)
                }
                fn biguint_shl2(n: Cow<'_, BigUint>, digits: usize, shift: u8) -> BigUint {
                    let mut data = match digits {
                        0 => n.into_owned().data,
                        _ => {
                            let len = digits.saturating_add(n.data.len() + 1);
                            let mut data = Vec::with_capacity(len);
                            data.resize(digits, 0);
                            data.extend(n.data.iter());
                            data
                        }
                    };

                    if shift > 0 {
                        let mut carry = 0;
                        let carry_shift = ::num::big::digit::BITS - shift;
                        for elem in data[digits..].iter_mut() {
                            let new_carry = *elem >> carry_shift;
                            *elem = (*elem << shift) | carry;
                            carry = new_carry;
                        }
                        if carry != 0 {
                            data.push(carry);
                        }
                    }
                    biguint_from_vec(data)
                }
                #[inline] fn biguint_shr<T: PrimInt>(n: Cow<'_, BigUint>, shift: T) -> BigUint {
                    if shift < T::zero() {
                        panic!("attempt to shift right with negative");
                    }
                    if n.is_zero() {
                        return n.into_owned();
                    }
                    let bits = T::from(::num::big::digit::BITS).unwrap();
                    let digits = (shift / bits).to_usize().unwrap_or(usize::MAX);
                    let shift = (shift % bits).to_u8().unwrap();
                    biguint_shr2(n, digits, shift)
                }
                fn biguint_shr2(n: Cow<'_, BigUint>, digits: usize, shift: u8) -> BigUint {
                    if digits >= n.data.len() {
                        let mut n = n.into_owned();
                        n.set_zero();
                        return n;
                    }
                    let mut data = match n {
                        Cow::Borrowed(n) => n.data[digits..].to_vec(),
                        Cow::Owned(mut n) => {
                            n.data.drain(..digits);
                            n.data
                        }
                    };

                    if shift > 0 {
                        let mut borrow = 0;
                        let borrow_shift = ::num::big::digit::BITS - shift;
                        for elem in data.iter_mut().rev() {
                            let new_borrow = *elem << borrow_shift;
                            *elem = (*elem >> shift) | borrow;
                            borrow = new_borrow;
                        }
                    }
                    biguint_from_vec(data)
                }
                macro_rules! impl_shift {
                    (@ref $Shx:ident :: $shx:ident, $ShxAssign:ident :: $shx_assign:ident, $rhs:ty) => {
                        impl $Shx<&$rhs> for BigUint {
                            type Output = BigUint;

                            #[inline]
                            fn $shx(self, rhs: &$rhs) -> BigUint {
                                $Shx::$shx(self, *rhs)
                            }
                        }
                        impl $Shx<&$rhs> for &BigUint {
                            type Output = BigUint;

                            #[inline]
                            fn $shx(self, rhs: &$rhs) -> BigUint {
                                $Shx::$shx(self, *rhs)
                            }
                        }
                        impl $ShxAssign<&$rhs> for BigUint {
                            #[inline]
                            fn $shx_assign(&mut self, rhs: &$rhs) {
                                $ShxAssign::$shx_assign(self, *rhs);
                            }
                        }
                    };
                    ($($rhs:ty),+) => {$(
                        impl Shl<$rhs> for BigUint {
                            type Output = BigUint;

                            #[inline]
                            fn shl(self, rhs: $rhs) -> BigUint {
                                biguint_shl(Cow::Owned(self), rhs)
                            }
                        }
                        impl Shl<$rhs> for &BigUint {
                            type Output = BigUint;

                            #[inline]
                            fn shl(self, rhs: $rhs) -> BigUint {
                                biguint_shl(Cow::Borrowed(self), rhs)
                            }
                        }
                        impl ShlAssign<$rhs> for BigUint {
                            #[inline]
                            fn shl_assign(&mut self, rhs: $rhs) {
                                let n = mem::replace(self, Self::ZERO);
                                *self = n << rhs;
                            }
                        }
                        impl_shift! { @ref Shl::shl, ShlAssign::shl_assign, $rhs }
                        impl Shr<$rhs> for BigUint {
                            type Output = BigUint;

                            #[inline]
                            fn shr(self, rhs: $rhs) -> BigUint {
                                biguint_shr(Cow::Owned(self), rhs)
                            }
                        }
                        impl Shr<$rhs> for &BigUint {
                            type Output = BigUint;

                            #[inline]
                            fn shr(self, rhs: $rhs) -> BigUint {
                                biguint_shr(Cow::Borrowed(self), rhs)
                            }
                        }
                        impl ShrAssign<$rhs> for BigUint {
                            #[inline]
                            fn shr_assign(&mut self, rhs: $rhs) {
                                let n = mem::replace(self, Self::ZERO);
                                *self = n >> rhs;
                            }
                        }
                        impl_shift! { @ref Shr::shr, ShrAssign::shr_assign, $rhs }
                    )*};
                }
                impl_shift! { u8, u16, u32, u64, u128, usize }
                impl_shift! { i8, i16, i32, i64, i128, isize }
            }
            /// A big unsigned integer type.
            pub struct BigUint
            {
                data: Vec<BigDigit>,
            }
            
            impl Clone for BigUint
            {
                #[inline] fn clone(&self) -> Self {
                    BigUint {
                        data: self.data.clone(),
                    }
                }
                #[inline] fn clone_from(&mut self, other: &Self) {
                    self.data.clone_from(&other.data);
                }
            }
            impl hash::Hash for BigUint
            {
                #[inline] fn hash<H: hash::Hasher>(&self, state: &mut H) {
                    debug_assert!(self.data.last() != Some(&0));
                    self.data.hash(state);
                }
            }
            impl PartialEq for BigUint
            {
                #[inline] fn eq(&self, other: &BigUint) -> bool {
                    debug_assert!(self.data.last() != Some(&0));
                    debug_assert!(other.data.last() != Some(&0));
                    self.data == other.data
                }
            }
            impl Eq for BigUint {}
            impl PartialOrd for BigUint
            {
                #[inline] fn partial_cmp(&self, other: &BigUint) -> Option<Ordering> {
                    Some(self.cmp(other))
                }
            }
            impl Ord for BigUint
            {
                #[inline] fn cmp(&self, other: &BigUint) -> Ordering {
                    cmp_slice(&self.data[..], &other.data[..])
                }
            }
            #[inline] fn cmp_slice(a: &[BigDigit], b: &[BigDigit]) -> Ordering
            {
                debug_assert!(a.last() != Some(&0));
                debug_assert!(b.last() != Some(&0));

                match Ord::cmp(&a.len(), &b.len()) {
                    Ordering::Equal => Iterator::cmp(a.iter().rev(), b.iter().rev()),
                    other => other,
                }
            }
            impl Default for BigUint
            {
                #[inline] fn default() -> BigUint {
                    Self::ZERO
                }
            }
            impl fmt::Debug for BigUint {
                fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
                    fmt::Display::fmt(self, f)
                }
            }
            impl fmt::Display for BigUint {
                fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
                    f.pad_integral(true, "", &self.to_str_radix(10))
                }
            }
            impl fmt::LowerHex for BigUint {
                fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
                    f.pad_integral(true, "0x", &self.to_str_radix(16))
                }
            }
            impl fmt::UpperHex for BigUint {
                fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
                    let mut s = self.to_str_radix(16);
                    s.make_ascii_uppercase();
                    f.pad_integral(true, "0x", &s)
                }
            }
            impl fmt::Binary for BigUint {
                fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
                    f.pad_integral(true, "0b", &self.to_str_radix(2))
                }
            }
            impl fmt::Octal for BigUint {
                fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
                    f.pad_integral(true, "0o", &self.to_str_radix(8))
                }
            }
            impl Zero for BigUint
            {
                #[inline] fn zero() -> BigUint {
                    Self::ZERO
                }
                #[inline] fn set_zero(&mut self) {
                    self.data.clear();
                }
                #[inline] fn is_zero(&self) -> bool {
                    self.data.is_empty()
                }
            }
            impl ConstZero for BigUint {
               
                const ZERO: Self = Self::ZERO;
            }
            impl One for BigUint
            {
                #[inline] fn one() -> BigUint {
                    BigUint { data: vec![1] }
                }
                #[inline] fn set_one(&mut self) {
                    self.data.clear();
                    self.data.push(1);
                }
                #[inline] fn is_one(&self) -> bool {
                    self.data[..] == [1]
                }
            }
            impl Unsigned for BigUint {}
            impl Integer for BigUint
            {
                #[inline] fn div_rem(&self, other: &BigUint) -> (BigUint, BigUint) {
                    division::div_rem_ref(self, other)
                }
                #[inline] fn div_floor(&self, other: &BigUint) -> BigUint {
                    let (d, _) = division::div_rem_ref(self, other);
                    d
                }
                #[inline] fn mod_floor(&self, other: &BigUint) -> BigUint {
                    let (_, m) = division::div_rem_ref(self, other);
                    m
                }
                #[inline] fn div_mod_floor(&self, other: &BigUint) -> (BigUint, BigUint) {
                    division::div_rem_ref(self, other)
                }
                #[inline] fn div_ceil(&self, other: &BigUint) -> BigUint {
                    let (d, m) = division::div_rem_ref(self, other);
                    if m.is_zero() {
                        d
                    } else {
                        d + 1u32
                    }
                }
                /// Calculates the Greatest Common Divisor (GCD) of the number and `other`.
                #[inline] fn gcd(&self, other: &Self) -> Self
                {
                    #[inline] fn twos(x: &BigUint) -> u64 {
                        x.trailing_zeros().unwrap_or(0)
                    }
                   
                    if self.is_zero() {
                        return other.clone();
                    }
                    if other.is_zero() {
                        return self.clone();
                    }
                    let mut m = self.clone();
                    let mut n = other.clone();

                   
                    let shift = cmp::min(twos(&n), twos(&m));

                   
                   
                    n >>= twos(&n);

                    while !m.is_zero() {
                        m >>= twos(&m);
                        if n > m {
                            mem::swap(&mut n, &mut m)
                        }
                        m -= &n;
                    }
                    n << shift
                }
                /// Calculates the Lowest Common Multiple (LCM) of the number and `other`.
                #[inline] fn lcm(&self, other: &BigUint) -> BigUint
                {
                    if self.is_zero() && other.is_zero() {
                        Self::ZERO
                    } else {
                        self / self.gcd(other) * other
                    }
                }
                /// Calculates the Greatest Common Divisor (GCD) and Lowest Common Multiple (LCM) together.
                #[inline] fn gcd_lcm(&self, other: &Self) -> (Self, Self)
                {
                    let gcd = self.gcd(other);
                    let lcm = if gcd.is_zero() {
                        Self::ZERO
                    } else {
                        self / &gcd * other
                    };
                    (gcd, lcm)
                }
                /// Deprecated, use `is_multiple_of` instead.
                #[inline] fn divides(&self, other: &BigUint) -> bool {
                    self.is_multiple_of(other)
                }
                /// Returns `true` if the number is a multiple of `other`.
                #[inline] fn is_multiple_of(&self, other: &BigUint) -> bool {
                    if other.is_zero() {
                        return self.is_zero();
                    }
                    (self % other).is_zero()
                }
                /// Returns `true` if the number is divisible by `2`.
                #[inline] fn is_even(&self) -> bool
                {                   
                    match self.data.first() {
                        Some(x) => x.is_even(),
                        None => true,
                    }
                }
                /// Returns `true` if the number is not divisible by `2`.
                #[inline] fn is_odd(&self) -> bool {
                    !self.is_even()
                }
                /// Rounds up to nearest multiple of argument.
                #[inline] fn next_multiple_of(&self, other: &Self) -> Self {
                    let m = self.mod_floor(other);
                    if m.is_zero() {
                        self.clone()
                    } else {
                        self + (other - m)
                    }
                }
                /// Rounds down to nearest multiple of argument.
                #[inline] fn prev_multiple_of(&self, other: &Self) -> Self {
                    self - self.mod_floor(other)
                }
                fn dec(&mut self) {
                    *self -= 1u32;
                }
                fn inc(&mut self) {
                    *self += 1u32;
                }
            }
            #[inline] fn fixpoint<F>(mut x: BigUint, max_bits: u64, f: F) -> BigUint where
                F: Fn(&BigUint) -> BigUint,
            {
                let mut xn = f(&x);

               
               
                while x < xn {
                   
                   
                   
                    x = if xn.bits() > max_bits {
                        BigUint::one() << max_bits
                    } else {
                        xn
                    };
                    xn = f(&x);
                }
               
                while x > xn {
                    x = xn;
                    xn = f(&x);
                }
                x
            }
            impl Roots for BigUint
            {  
                fn nth_root(&self, n: u32) -> Self {
                    assert!(n > 0, "root degree n must be at least 1");

                    if self.is_zero() || self.is_one() {
                        return self.clone();
                    }
                    match n {
                       
                        1 => return self.clone(),
                        2 => return self.sqrt(),
                        3 => return self.cbrt(),
                        _ => (),
                    }
                   
                    let bits = self.bits();
                    let n64 = u64::from(n);
                    if bits <= n64 {
                        return BigUint::one();
                    }
                   
                    if let Some(x) = self.to_u64() {
                        return x.nth_root(n).into();
                    }
                    let max_bits = bits / n64 + 1;

                    #[cfg(feature = "std")]
                    let guess = match self.to_f64() {
                        Some(f) if f.is_finite() => {
                            use ::num::traits::FromPrimitive;

                           
                            BigUint::from_f64((f.ln() / f64::from(n)).exp()).unwrap()
                        }
                        _ => {
                           
                           
                            let extra_bits = bits - (f64::MAX_EXP as u64 - 1);
                            let root_scale = Integer::div_ceil(&extra_bits, &n64);
                            let scale = root_scale * n64;
                            if scale < bits && bits - scale > n64 {
                                (self >> scale).nth_root(n) << root_scale
                            } else {
                                BigUint::one() << max_bits
                            }
                        }
                    };

                    #[cfg(not(feature = "std"))]
                    let guess = BigUint::one() << max_bits;

                    let n_min_1 = n - 1;
                    fixpoint(guess, max_bits, move |s| {
                        let q = self / s.pow(n_min_1);
                        let t = n_min_1 * s + q;
                        t / n
                    })
                }
               
               
                fn sqrt(&self) -> Self {
                    if self.is_zero() || self.is_one() {
                        return self.clone();
                    }
                   
                    if let Some(x) = self.to_u64() {
                        return x.sqrt().into();
                    }
                    let bits = self.bits();
                    let max_bits = bits / 2 + 1;

                    #[cfg(feature = "std")]
                    let guess = match self.to_f64() {
                        Some(f) if f.is_finite() => {
                            use ::num::traits::FromPrimitive;

                           
                            BigUint::from_f64(f.sqrt()).unwrap()
                        }
                        _ => {
                           
                           
                            let extra_bits = bits - (f64::MAX_EXP as u64 - 1);
                            let root_scale = (extra_bits + 1) / 2;
                            let scale = root_scale * 2;
                            (self >> scale).sqrt() << root_scale
                        }
                    };

                    #[cfg(not(feature = "std"))]
                    let guess = BigUint::one() << max_bits;

                    fixpoint(guess, max_bits, move |s| {
                        let q = self / s;
                        let t = s + q;
                        t >> 1
                    })
                }
                fn cbrt(&self) -> Self {
                    if self.is_zero() || self.is_one() {
                        return self.clone();
                    }
                   
                    if let Some(x) = self.to_u64() {
                        return x.cbrt().into();
                    }
                    let bits = self.bits();
                    let max_bits = bits / 3 + 1;

                    #[cfg(feature = "std")]
                    let guess = match self.to_f64() {
                        Some(f) if f.is_finite() => {
                            use ::num::traits::FromPrimitive;

                           
                            BigUint::from_f64(f.cbrt()).unwrap()
                        }
                        _ => {
                           
                           
                            let extra_bits = bits - (f64::MAX_EXP as u64 - 1);
                            let root_scale = (extra_bits + 2) / 3;
                            let scale = root_scale * 3;
                            (self >> scale).cbrt() << root_scale
                        }
                    };

                    #[cfg(not(feature = "std"))]
                    let guess = BigUint::one() << max_bits;

                    fixpoint(guess, max_bits, move |s| {
                        let q = self / (s * s);
                        let t = (s << 1) + q;
                        t / 3u32
                    })
                }
            }
            /// A generic trait for converting a value to a [`BigUint`].
            pub trait ToBigUint
            {
                /// Converts the value of `self` to a [`BigUint`].
                fn to_biguint(&self) -> Option<BigUint>;
            }
            /// Creates and initializes a [`BigUint`].
            #[inline] pub fn biguint_from_vec(digits: Vec<BigDigit>) -> BigUint
            {
                BigUint { data: digits }.normalized()
            }
            impl BigUint
            {
                /// A constant `BigUint` with value 0, useful for static initialization.
                pub const ZERO: Self = BigUint { data: Vec::new() };
                /// Creates and initializes a [`BigUint`].
                #[inline] pub fn new(digits: Vec<u32>) -> BigUint
                {
                    let mut big = Self::ZERO;

                    cfg_digit_expr!(
                        {
                            big.data = digits;
                            big.normalize();
                        },
                        big.assign_from_slice(&digits)
                    );

                    big
                }
                /// Creates and initializes a [`BigUint`].
                #[inline] pub fn from_slice(slice: &[u32]) -> BigUint
                {
                    let mut big = Self::ZERO;
                    big.assign_from_slice(slice);
                    big
                }
                /// Assign a value to a [`BigUint`].
                #[inline] pub fn assign_from_slice(&mut self, slice: &[u32])
                {
                    self.data.clear();

                    cfg_digit_expr!(
                        self.data.extend_from_slice(slice),
                        self.data.extend(slice.chunks(2).map(u32_chunk_to_u64))
                    );

                    self.normalize();
                }
                /// Creates and initializes a [`BigUint`].
                #[inline] pub fn from_bytes_be(bytes: &[u8]) -> BigUint
                {
                    if bytes.is_empty() {
                        Self::ZERO
                    } else {
                        let mut v = bytes.to_vec();
                        v.reverse();
                        BigUint::from_bytes_le(&v)
                    }
                }
                /// Creates and initializes a [`BigUint`].
                #[inline] pub fn from_bytes_le(bytes: &[u8]) -> BigUint
                {
                    if bytes.is_empty() {
                        Self::ZERO
                    } else {
                        convert::from_bitwise_digits_le(bytes, 8)
                    }
                }
                /// Creates and initializes a [`BigUint`].
                #[inline] pub fn parse_bytes(buf: &[u8], radix: u32) -> Option<BigUint>
                {
                    let s = str::from_utf8(buf).ok()?;
                    BigUint::from_str_radix(s, radix).ok()
                }
                /// Creates and initializes a [`BigUint`].
                pub fn from_radix_be(buf: &[u8], radix: u32) -> Option<BigUint>
                {
                    convert::from_radix_be(buf, radix)
                }
                /// Creates and initializes a [`BigUint`].
                pub fn from_radix_le(buf: &[u8], radix: u32) -> Option<BigUint>
                {
                    convert::from_radix_le(buf, radix)
                }
                /// Returns the byte representation of the [`BigUint`] in big-endian byte order.
                #[inline] pub fn to_bytes_be(&self) -> Vec<u8> {
                    let mut v = self.to_bytes_le();
                    v.reverse();
                    v
                }
                /// Returns the byte representation of the [`BigUint`] in little-endian byte order.
                #[inline] pub fn to_bytes_le(&self) -> Vec<u8> {
                    if self.is_zero() {
                        vec![0]
                    } else {
                        convert::to_bitwise_digits_le(self, 8)
                    }
                }
                /// Returns the `u32` digits representation of the [`BigUint`] ordered least significant digit first.
                #[inline] pub fn to_u32_digits(&self) -> Vec<u32> {
                    self.iter_u32_digits().collect()
                }
                /// Returns the `u64` digits representation of the [`BigUint`] ordered least significant digit first.
                #[inline] pub fn to_u64_digits(&self) -> Vec<u64> {
                    self.iter_u64_digits().collect()
                }
                /// Returns an iterator of `u32` digits representation of the 
                /// [`BigUint`] ordered least significant digit first.
                #[inline] pub fn iter_u32_digits(&self) -> U32Digits<'_> {
                    U32Digits::new(self.data.as_slice())
                }
                /// Returns an iterator of `u64` digits representation of the
                /// [`BigUint`] ordered least significant digit first.
                #[inline] pub fn iter_u64_digits(&self) -> U64Digits<'_> {
                    U64Digits::new(self.data.as_slice())
                }
                /// Returns the integer formatted as a string in the given radix.
                #[inline] pub fn to_str_radix(&self, radix: u32) -> String {
                    let mut v = to_str_radix_reversed(self, radix);
                    v.reverse();
                    unsafe { String::from_utf8_unchecked(v) }
                }
                /// Returns the integer in the requested base in big-endian digit order.
                #[inline] pub fn to_radix_be(&self, radix: u32) -> Vec<u8> {
                    let mut v = convert::to_radix_le(self, radix);
                    v.reverse();
                    v
                }
                /// Returns the integer in the requested base in little-endian digit order.
                #[inline] pub fn to_radix_le(&self, radix: u32) -> Vec<u8> {
                    convert::to_radix_le(self, radix)
                }
                /// Determines the fewest bits necessary to express the [`BigUint`].
                #[inline] pub fn bits(&self) -> u64 {
                    if self.is_zero() {
                        return 0;
                    }
                    let zeros: u64 = self.data.last().unwrap().leading_zeros().into();
                    self.data.len() as u64 * u64::from(::num::big::digit::BITS) - zeros
                }
                /// Strips off trailing zero bigdigits.
                #[inline] fn normalize(&mut self) {
                    if let Some(&0) = self.data.last() {
                        let len = self.data.iter().rposition(|&d| d != 0).map_or(0, |i| i + 1);
                        self.data.truncate(len);
                    }
                    if self.data.len() < self.data.capacity() / 4 {
                        self.data.shrink_to_fit();
                    }
                }
                /// Returns a normalized [`BigUint`].
                #[inline] fn normalized(mut self) -> BigUint {
                    self.normalize();
                    self
                }
                /// Returns `self ^ exponent`.
                pub fn pow(&self, exponent: u32) -> Self {
                    Pow::pow(self, exponent)
                }
                /// Returns `(self ^ exponent) % modulus`.
                pub fn modpow(&self, exponent: &Self, modulus: &Self) -> Self {
                    power::modpow(self, exponent, modulus)
                }
                /// Returns the modular multiplicative inverse if it exists, otherwise `None`.
                pub fn modinv(&self, modulus: &Self) -> Option<Self> {
                   
                   
                   

                    assert!(
                        !modulus.is_zero(),
                        "attempt to calculate with zero modulus!"
                    );
                    if modulus.is_one() {
                        return Some(Self::zero());
                    }
                    let mut r0;
                    let mut r1 = self % modulus;
                    let mut t0;
                    let mut t1;

                   
                    if r1.is_zero() {
                        return None;
                    } else if r1.is_one() {
                        return Some(r1);
                    } else {
                        let (q, r2) = modulus.div_rem(&r1);
                        if r2.is_zero() {
                            return None;
                        }
                        r0 = r1;
                        r1 = r2;
                        t0 = Self::one();
                        t1 = modulus - q;
                    }
                    while !r1.is_zero() {
                        let (q, r2) = r0.div_rem(&r1);
                        r0 = r1;
                        r1 = r2;

                       
                        let qt1 = q * &t1 % modulus;
                        let t2 = if t0 < qt1 {
                            t0 + (modulus - qt1)
                        } else {
                            t0 - qt1
                        };
                        t0 = t1;
                        t1 = t2;
                    }
                    if r0.is_one() {
                        Some(t0)
                    } else {
                        None
                    }
                }
                /// Returns the truncated principal square root of `self`
                pub fn sqrt(&self) -> Self {
                    Roots::sqrt(self)
                }
                /// Returns the truncated principal cube root of `self`
                pub fn cbrt(&self) -> Self {
                    Roots::cbrt(self)
                }
                /// Returns the truncated principal `n`th root of `self`
                pub fn nth_root(&self, n: u32) -> Self {
                    Roots::nth_root(self, n)
                }
                /// Returns the number of least-significant bits that are zero, 
                /// or `None` if the entire number is zero.
                pub fn trailing_zeros(&self) -> Option<u64> {
                    let i = self.data.iter().position(|&digit| digit != 0)?;
                    let zeros: u64 = self.data[i].trailing_zeros().into();
                    Some(i as u64 * u64::from(::num::big::digit::BITS) + zeros)
                }
                /// Returns the number of least-significant bits that are ones.
                pub fn trailing_ones(&self) -> u64 {
                    if let Some(i) = self.data.iter().position(|&digit| !digit != 0) {
                        let ones: u64 = self.data[i].trailing_ones().into();
                        i as u64 * u64::from(::num::big::digit::BITS) + ones
                    } else {
                        self.data.len() as u64 * u64::from(::num::big::digit::BITS)
                    }
                }
                /// Returns the number of one bits.
                pub fn count_ones(&self) -> u64 {
                    self.data.iter().map(|&d| u64::from(d.count_ones())).sum()
                }
                /// Returns whether the bit in the given position is set
                pub fn bit(&self, bit: u64) -> bool
                {
                    let bits_per_digit = u64::from(::num::big::digit::BITS);
                    if let Some(digit_index) = (bit / bits_per_digit).to_usize() {
                        if let Some(digit) = self.data.get(digit_index) {
                            let bit_mask = (1 as BigDigit) << (bit % bits_per_digit);
                            return (digit & bit_mask) != 0;
                        }
                    }
                    false
                }
                /// Sets or clears the bit in the given position.
                pub fn set_bit(&mut self, bit: u64, value: bool)
                {
                    let bits_per_digit = u64::from(::num::big::digit::BITS);
                    let digit_index = (bit / bits_per_digit).to_usize().unwrap_or(usize::MAX);
                    let bit_mask = (1 as BigDigit) << (bit % bits_per_digit);
                    if value {
                        if digit_index >= self.data.len() {
                            let new_len = digit_index.saturating_add(1);
                            self.data.resize(new_len, 0);
                        }
                        self.data[digit_index] |= bit_mask;
                    } else if digit_index < self.data.len() {
                        self.data[digit_index] &= !bit_mask;
                       
                        self.normalize();
                    }
                }
            }
            impl ::num::traits::FromBytes for BigUint {
                type Bytes = [u8];

                fn from_be_bytes(bytes: &Self::Bytes) -> Self {
                    Self::from_bytes_be(bytes)
                }
                fn from_le_bytes(bytes: &Self::Bytes) -> Self {
                    Self::from_bytes_le(bytes)
                }
            }
            impl ::num::traits::ToBytes for BigUint {
                type Bytes = Vec<u8>;

                fn to_be_bytes(&self) -> Self::Bytes {
                    self.to_bytes_be()
                }
                fn to_le_bytes(&self) -> Self::Bytes {
                    self.to_bytes_le()
                }
            }
            pub trait IntDigits {
                fn digits(&self) -> &[BigDigit];
                fn digits_mut(&mut self) -> &mut Vec<BigDigit>;
                fn normalize(&mut self);
                fn capacity(&self) -> usize;
                fn len(&self) -> usize;
            }
            impl IntDigits for BigUint
            {
                #[inline] fn digits(&self) -> &[BigDigit] {
                    &self.data
                }
                #[inline] fn digits_mut(&mut self) -> &mut Vec<BigDigit> {
                    &mut self.data
                }
                #[inline] fn normalize(&mut self) {
                    self.normalize();
                }
                #[inline] fn capacity(&self) -> usize {
                    self.data.capacity()
                }
                #[inline] fn len(&self) -> usize {
                    self.data.len()
                }
            }
            /// Convert a `u32` chunk (len is either 1 or 2) to a single `u64` digit
            #[inline] fn u32_chunk_to_u64(chunk: &[u32]) -> u64 {
               
                let mut digit = chunk[0] as u64;
                if let Some(&hi) = chunk.get(1) {
                    digit |= (hi as u64) << 32;
                }
                digit
            }
            cfg_32_or_test!(
                /// Combine four `u32`s into a single `u128`.
                #[inline] fn u32_to_u128(a: u32, b: u32, c: u32, d: u32) -> u128 {
                    u128::from(d) | (u128::from(c) << 32) | (u128::from(b) << 64) | (u128::from(a) << 96)
                }
            );

            cfg_32_or_test!(
                /// Split a single `u128` into four `u32`.
                #[inline] fn u32_from_u128(n: u128) -> (u32, u32, u32, u32) {
                    (
                        (n >> 96) as u32,
                        (n >> 64) as u32,
                        (n >> 32) as u32,
                        n as u32,
                    )
                }
            );
        }

        #[cfg(target_pointer_width = "32")]
        type UsizePromotion = u32;
        #[cfg(target_pointer_width = "64")]
        type UsizePromotion = u64;

        #[cfg(target_pointer_width = "32")]
        type IsizePromotion = i32;
        #[cfg(target_pointer_width = "64")]
        type IsizePromotion = i64;

        #[derive(Debug, Clone, PartialEq, Eq)]
        pub struct ParseBigIntError
        {
            kind: BigIntErrorKind,
        }

        #[derive(Debug, Clone, PartialEq, Eq)]
        enum BigIntErrorKind
        {
            Empty,
            InvalidDigit,
        }

        impl ParseBigIntError
        {
            fn __description(&self) -> &str {
                use ::num::big::BigIntErrorKind::*;
                match self.kind {
                    Empty => "cannot parse integer from empty string",
                    InvalidDigit => "invalid digit found in string",
                }
            }
            fn empty() -> Self {
                ParseBigIntError {
                    kind: BigIntErrorKind::Empty,
                }
            }
            fn invalid() -> Self {
                ParseBigIntError {
                    kind: BigIntErrorKind::InvalidDigit,
                }
            }
        }

        impl fmt::Display for ParseBigIntError
        {
            fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result
                {self.__description().fmt(f)
            }
        }
        
        impl ::error::Error for ParseBigIntError
        {
            fn description(&self) -> &str {
                self.__description()
            }
        }
        /// The error type returned when a checked conversion regarding big integer fails.
        #[derive(Debug, Copy, Clone, PartialEq, Eq)]
        pub struct TryFromBigIntError<T>
        {
            original: T,
        }

        impl<T> TryFromBigIntError<T>
        {
            fn new(original: T) -> Self {
                TryFromBigIntError { original }
            }
            fn __description(&self) -> &str {
                "out of range conversion regarding big integer attempted"
            }
            /// Extract the original value, if available. The value will be available
            /// if the type before conversion was either [`BigInt`] or [`BigUint`].
            pub fn into_original(self) -> T {
                self.original
            }
        }
        
        impl<T> ::error::Error for TryFromBigIntError<T> where
        T: fmt::Debug,
        {
            fn description(&self) -> &str {
                self.__description()
            }
        }

        impl<T> fmt::Display for TryFromBigIntError<T>
        {
            fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result { self.__description().fmt(f) }
        }

        pub use self::uint::BigUint;
        pub use self::uint::ToBigUint;
        pub use self::uint::U32Digits;
        pub use self::uint::U64Digits;

        pub use self::int::BigInt;
        pub use self::int::Sign;
        pub use self::int::ToBigInt;
        
        pub use self::rand::{ RandBigInt, RandomBits, UniformBigInt, UniformBigUint };

        mod digit 
        {
           
            cfg_digit!
            (
                pub type BigDigit = u32;
                pub type BigDigit = u64;
            );
            
            cfg_digit!
            (
                pub type DoubleBigDigit = u64;
                pub type DoubleBigDigit = u128;
            );

            pub const BITS: u8 = BigDigit::BITS as u8;
            pub const HALF_BITS: u8 = BITS / 2;
            pub const HALF: BigDigit = (1 << HALF_BITS) - 1;
            pub const MAX: BigDigit = BigDigit::MAX;
            const LO_MASK: DoubleBigDigit = MAX as DoubleBigDigit;

            #[inline] fn get_hi(n: DoubleBigDigit) -> BigDigit 
            {
                (n >> BITS) as BigDigit
            }
            #[inline] fn get_lo(n: DoubleBigDigit) -> BigDigit 
            {
                (n & LO_MASK) as BigDigit
            }
            /// Split one [`DoubleBigDigit`] into two [`BigDigit`]s.
            #[inline] pub fn from_doublebigdigit(n: DoubleBigDigit) -> (BigDigit, BigDigit) 
            {
                (get_hi(n), get_lo(n))
            }
            /// Join two [`BigDigit`]s into one [`DoubleBigDigit`].
            #[inline] pub fn to_doublebigdigit(hi: BigDigit, lo: BigDigit) -> DoubleBigDigit 
            {
                DoubleBigDigit::from(lo) | (DoubleBigDigit::from(hi) << BITS)
            }
        }
    }
    /*
    */
    pub mod rational
    {
        //! Rational numbers
        use ::
        {
            error::{ Error },
            fmt::{ Binary, Display, Formatter, LowerExp, LowerHex, Octal, UpperExp, UpperHex },
            hash::{Hash, Hasher},
            num::
            {
                big::{ BigInt, BigUint, Sign, ToBigInt },
                integers::{ Integer },
                traits::
                {
                    float::FloatCore,
                    Bounded, CheckedAdd, CheckedDiv, CheckedMul, CheckedSub, ConstOne, ConstZero, FromPrimitive, Inv,
                    Num, NumCast, One, Pow, Signed, ToPrimitive, Unsigned, Zero
                },
            },
            ops::{Add, Div, Mul, Neg, Rem, ShlAssign, Sub},
            str::{ FromStr },
            *,
        };
        /*
        */
        pub mod pow
        {
            use ::
            {
                num::
                {
                    integers::{ Integer },
                    rational::{ Ratio },
                    traits::{ One, Pow },
                },
                *,
            };
            /*
            */
            macro_rules! pow_unsigned_impl {
                (@ $exp:ty) => {
                    type Output = Ratio<T>;
                    #[inline] fn pow(self, expon: $exp) -> Ratio<T> {
                        Ratio::new_raw(self.numer.pow(expon), self.denom.pow(expon))
                    }
                };
                ($exp:ty) => {
                    impl<T: Clone + Integer + Pow<$exp, Output = T>> Pow<$exp> for Ratio<T> {
                        pow_unsigned_impl!(@ $exp);
                    }
                    impl<'a, T: Clone + Integer> Pow<$exp> for &'a Ratio<T>
                    where
                        &'a T: Pow<$exp, Output = T>,
                    {
                        pow_unsigned_impl!(@ $exp);
                    }
                    impl<'b, T: Clone + Integer + Pow<$exp, Output = T>> Pow<&'b $exp> for Ratio<T> {
                        type Output = Ratio<T>;
                        #[inline]
                        fn pow(self, expon: &'b $exp) -> Ratio<T> {
                            Pow::pow(self, *expon)
                        }
                    }
                    impl<'a, 'b, T: Clone + Integer> Pow<&'b $exp> for &'a Ratio<T>
                    where
                        &'a T: Pow<$exp, Output = T>,
                    {
                        type Output = Ratio<T>;
                        #[inline]
                        fn pow(self, expon: &'b $exp) -> Ratio<T> {
                            Pow::pow(self, *expon)
                        }
                    }
                };
            }
            pow_unsigned_impl!(u8);
            pow_unsigned_impl!(u16);
            pow_unsigned_impl!(u32);
            pow_unsigned_impl!(u64);
            pow_unsigned_impl!(u128);
            pow_unsigned_impl!(usize);

            macro_rules! pow_signed_impl {
                (@ &'b BigInt, BigUint) => {
                    type Output = Ratio<T>;
                    #[inline] fn pow(self, expon: &'b BigInt) -> Ratio<T> {
                        match expon.sign() {
                            Sign::NoSign => One::one(),
                            Sign::Minus => {
                                Pow::pow(self, expon.magnitude()).into_recip()
                            }
                            Sign::Plus => Pow::pow(self, expon.magnitude()),
                        }
                    }
                };
                (@ $exp:ty, $unsigned:ty) => {
                    type Output = Ratio<T>;
                    #[inline] fn pow(self, expon: $exp) -> Ratio<T> {
                        match expon.cmp(&0) {
                            cmp::Ordering::Equal => One::one(),
                            cmp::Ordering::Less => {
                                let expon = expon.wrapping_abs() as $unsigned;
                                Pow::pow(self, expon).into_recip()
                            }
                            cmp::Ordering::Greater => Pow::pow(self, expon as $unsigned),
                        }
                    }
                };
                ($exp:ty, $unsigned:ty) => {
                    impl<T: Clone + Integer + Pow<$unsigned, Output = T>> Pow<$exp> for Ratio<T> {
                        pow_signed_impl!(@ $exp, $unsigned);
                    }
                    impl<'a, T: Clone + Integer> Pow<$exp> for &'a Ratio<T>
                    where
                        &'a T: Pow<$unsigned, Output = T>,
                    {
                        pow_signed_impl!(@ $exp, $unsigned);
                    }
                    impl<'b, T: Clone + Integer + Pow<$unsigned, Output = T>> Pow<&'b $exp> for Ratio<T> {
                        type Output = Ratio<T>;
                        #[inline]
                        fn pow(self, expon: &'b $exp) -> Ratio<T> {
                            Pow::pow(self, *expon)
                        }
                    }
                    impl<'a, 'b, T: Clone + Integer> Pow<&'b $exp> for &'a Ratio<T>
                    where
                        &'a T: Pow<$unsigned, Output = T>,
                    {
                        type Output = Ratio<T>;
                        #[inline]
                        fn pow(self, expon: &'b $exp) -> Ratio<T> {
                            Pow::pow(self, *expon)
                        }
                    }
                };
            }
            pow_signed_impl!(i8, u8);
            pow_signed_impl!(i16, u16);
            pow_signed_impl!(i32, u32);
            pow_signed_impl!(i64, u64);
            pow_signed_impl!(i128, u128);
            pow_signed_impl!(isize, usize);

            #[cfg(feature = "num-bigint")]
            mod bigint {
                use super::*;
                use num_bigint::{BigInt, BigUint, Sign};

                impl<T: Clone + Integer + for<'b> Pow<&'b BigUint, Output = T>> Pow<BigUint> for Ratio<T> {
                    type Output = Ratio<T>;
                    #[inline] fn pow(self, expon: BigUint) -> Ratio<T> {
                        Pow::pow(self, &expon)
                    }
                }
                impl<'a, T: Clone + Integer> Pow<BigUint> for &'a Ratio<T> where
                    &'a T: for<'b> Pow<&'b BigUint, Output = T>,
                {
                    type Output = Ratio<T>;
                    #[inline] fn pow(self, expon: BigUint) -> Ratio<T> {
                        Pow::pow(self, &expon)
                    }
                }
                impl<'b, T: Clone + Integer + Pow<&'b BigUint, Output = T>> Pow<&'b BigUint> for Ratio<T> {
                    pow_unsigned_impl!(@ &'b BigUint);
                }
                impl<'a, 'b, T: Clone + Integer> Pow<&'b BigUint> for &'a Ratio<T> where
                    &'a T: Pow<&'b BigUint, Output = T>,
                {
                    pow_unsigned_impl!(@ &'b BigUint);
                }
                impl<T: Clone + Integer + for<'b> Pow<&'b BigUint, Output = T>> Pow<BigInt> for Ratio<T> {
                    type Output = Ratio<T>;
                    #[inline] fn pow(self, expon: BigInt) -> Ratio<T> {
                        Pow::pow(self, &expon)
                    }
                }
                impl<'a, T: Clone + Integer> Pow<BigInt> for &'a Ratio<T> where
                    &'a T: for<'b> Pow<&'b BigUint, Output = T>,
                {
                    type Output = Ratio<T>;
                    #[inline] fn pow(self, expon: BigInt) -> Ratio<T> {
                        Pow::pow(self, &expon)
                    }
                }
                impl<'b, T: Clone + Integer + Pow<&'b BigUint, Output = T>> Pow<&'b BigInt> for Ratio<T> {
                    pow_signed_impl!(@ &'b BigInt, BigUint);
                }
                impl<'a, 'b, T: Clone + Integer> Pow<&'b BigInt> for &'a Ratio<T> where
                    &'a T: Pow<&'b BigUint, Output = T>,
                {
                    pow_signed_impl!(@ &'b BigInt, BigUint);
                }
            }

        }
        /// Represents the ratio between two numbers.
        #[derive(Copy, Clone, Debug)]
        #[allow(missing_docs)]
        pub struct Ratio<T> {
            /// Numerator.
            numer: T,
            /// Denominator.
            denom: T,
        }
        /// Alias for a `Ratio` of machine-sized integers.
        #[deprecated(
            since = "0.4.0",
            note = "it's better to use a specific size, like `Rational32` or `Rational64`"
        )]
        pub type Rational = Ratio<isize>;
        /// Alias for a `Ratio` of 32-bit-sized integers.
        pub type Rational32 = Ratio<i32>;
        /// Alias for a `Ratio` of 64-bit-sized integers.
        pub type Rational64 = Ratio<i64>;
        /// Alias for arbitrary precision rationals.
        pub type BigRational = Ratio<BigInt>;
        /// These method are `const`.
        impl<T> Ratio<T>
        {
            /// Creates a `Ratio` without checking for `denom == 0` or reducing.
            #[inline] pub const fn new_raw(numer: T, denom: T) -> Ratio<T> {
                Ratio { numer, denom }
            }
            /// Deconstructs a `Ratio` into its numerator and denominator.
            #[inline] pub fn into_raw(self) -> (T, T) {
                (self.numer, self.denom)
            }
            /// Gets an immutable reference to the numerator.
            #[inline] pub const fn numer(&self) -> &T {
                &self.numer
            }
            /// Gets an immutable reference to the denominator.
            #[inline] pub const fn denom(&self) -> &T {
                &self.denom
            }
        }

        impl<T: Clone + Integer> Ratio<T>
        {
            /// Creates a new `Ratio`.
            #[inline] pub fn new(numer: T, denom: T) -> Ratio<T> {
                let mut ret = Ratio::new_raw(numer, denom);
                ret.reduce();
                ret
            }
            /// Creates a `Ratio` representing the integer `t`.
            #[inline] pub fn from_integer(t: T) -> Ratio<T> {
                Ratio::new_raw(t, One::one())
            }
            /// Converts to an integer, rounding towards zero.
            #[inline] pub fn to_integer(&self) -> T {
                self.trunc().numer
            }
            /// Returns true if the rational number is an integer (denominator is 1).
            #[inline] pub fn is_integer(&self) -> bool {
                self.denom.is_one()
            }
            /// Puts self into lowest terms, with `denom` > 0.
            fn reduce(&mut self) {
                if self.denom.is_zero() {
                    panic!("denominator == 0");
                }
                if self.numer.is_zero() {
                    self.denom.set_one();
                    return;
                }
                if self.numer == self.denom {
                    self.set_one();
                    return;
                }
                let g: T = self.numer.gcd(&self.denom);

               
               

                #[inline] fn replace_with<T: Zero>(x: &mut T, f: impl FnOnce(T) -> T) {
                    let y = ::mem::replace(x, T::zero());
                    *x = f(y);
                }
               
                replace_with(&mut self.numer, |x| x / g.clone());

               
                replace_with(&mut self.denom, |x| x / g);

               
                if self.denom < T::zero() {
                    replace_with(&mut self.numer, |x| T::zero() - x);
                    replace_with(&mut self.denom, |x| T::zero() - x);
                }
            }
            /// Returns a reduced copy of self.
            pub fn reduced(&self) -> Ratio<T> {
                let mut ret = self.clone();
                ret.reduce();
                ret
            }
            /// Returns the reciprocal.
            #[inline] pub fn recip(&self) -> Ratio<T> {
                self.clone().into_recip()
            }
            #[inline] fn into_recip(self) -> Ratio<T> {
                match self.numer.cmp(&T::zero()) {
                    cmp::Ordering::Equal => panic!("division by zero"),
                    cmp::Ordering::Greater => Ratio::new_raw(self.denom, self.numer),
                    cmp::Ordering::Less => Ratio::new_raw(T::zero() - self.denom, T::zero() - self.numer),
                }
            }
            /// Rounds towards minus infinity.
            #[inline] pub fn floor(&self) -> Ratio<T> {
                if *self < Zero::zero() {
                    let one: T = One::one();
                    Ratio::from_integer(
                        (self.numer.clone() - self.denom.clone() + one) / self.denom.clone(),
                    )
                } else {
                    Ratio::from_integer(self.numer.clone() / self.denom.clone())
                }
            }
            /// Rounds towards plus infinity.
            #[inline] pub fn ceil(&self) -> Ratio<T> {
                if *self < Zero::zero() {
                    Ratio::from_integer(self.numer.clone() / self.denom.clone())
                } else {
                    let one: T = One::one();
                    Ratio::from_integer(
                        (self.numer.clone() + self.denom.clone() - one) / self.denom.clone(),
                    )
                }
            }
            /// Rounds to the nearest integer. Rounds half-way cases away from zero.
            #[inline] pub fn round(&self) -> Ratio<T> {
                let zero: Ratio<T> = Zero::zero();
                let one: T = One::one();
                let two: T = one.clone() + one.clone();

               
                let mut fractional = self.fract();
                if fractional < zero {
                    fractional = zero - fractional
                };

               
               
               
                let half_or_larger = if fractional.denom.is_even() {
                    fractional.numer >= fractional.denom / two
                } else {
                    fractional.numer >= (fractional.denom / two) + one
                };

                if half_or_larger {
                    let one: Ratio<T> = One::one();
                    if *self >= Zero::zero() {
                        self.trunc() + one
                    } else {
                        self.trunc() - one
                    }
                } else {
                    self.trunc()
                }
            }
            /// Rounds towards zero.
            #[inline] pub fn trunc(&self) -> Ratio<T> {
                Ratio::from_integer(self.numer.clone() / self.denom.clone())
            }
            /// Returns the fractional part of a number, with division rounded towards zero.
            #[inline] pub fn fract(&self) -> Ratio<T> {
                Ratio::new_raw(self.numer.clone() % self.denom.clone(), self.denom.clone())
            }
            /// Raises the `Ratio` to the power of an exponent.
            #[inline] pub fn pow(&self, expon: i32) -> Ratio<T> where
                for<'a> &'a T: Pow<u32, Output = T>,
            {
                Pow::pow(self, expon)
            }
        }
        
        impl Ratio<BigInt>
        {
            /// Converts a float into a rational number.
            pub fn from_float<T: FloatCore>(f: T) -> Option<BigRational> {
                if !f.is_finite() {
                    return None;
                }
                let (mantissa, exponent, sign) = f.integer_decode();
                let bigint_sign = if sign == 1 { Sign::Plus } else { Sign::Minus };
                if exponent < 0 {
                    let one: BigInt = One::one();
                    let denom: BigInt = one << ((-exponent) as usize);
                    let numer: BigUint = FromPrimitive::from_u64(mantissa).unwrap();
                    Some(Ratio::new(BigInt::from_biguint(bigint_sign, numer), denom))
                } else {
                    let mut numer: BigUint = FromPrimitive::from_u64(mantissa).unwrap();
                    numer <<= exponent as usize;
                    Some(Ratio::from_integer(BigInt::from_biguint(
                        bigint_sign,
                        numer,
                    )))
                }
            }
        }

        impl<T: Clone + Integer> Default for Ratio<T>
        {
            /// Returns zero
            fn default() -> Self {
                Ratio::zero()
            }
        }
        
        impl<T> From<T> for Ratio<T> where
            T: Clone + Integer,
        {
            fn from(x: T) -> Ratio<T> {
                Ratio::from_integer(x)
            }
        }
        
        impl<T> From<(T, T)> for Ratio<T> where
            T: Clone + Integer,
        {
            fn from(pair: (T, T)) -> Ratio<T> {
                Ratio::new(pair.0, pair.1)
            }
        }
        
        impl<T: Clone + Integer> Ord for Ratio<T> 
        {
            #[inline] fn cmp(&self, other: &Self) -> cmp::Ordering {
               
                if self.denom == other.denom {
                    let ord = self.numer.cmp(&other.numer);
                    return if self.denom < T::zero() {
                        ord.reverse()
                    } else {
                        ord
                    };
                }
               
                if self.numer == other.numer {
                    if self.numer.is_zero() {
                        return cmp::Ordering::Equal;
                    }
                    let ord = self.denom.cmp(&other.denom);
                    return if self.numer < T::zero() {
                        ord
                    } else {
                        ord.reverse()
                    };
                }
               
               
               

               
                let (self_int, self_rem) = self.numer.div_mod_floor(&self.denom);
                let (other_int, other_rem) = other.numer.div_mod_floor(&other.denom);
                match self_int.cmp(&other_int) {
                    cmp::Ordering::Greater => cmp::Ordering::Greater,
                    cmp::Ordering::Less => cmp::Ordering::Less,
                    cmp::Ordering::Equal => {
                        match (self_rem.is_zero(), other_rem.is_zero()) {
                            (true, true) => cmp::Ordering::Equal,
                            (true, false) => cmp::Ordering::Less,
                            (false, true) => cmp::Ordering::Greater,
                            (false, false) => {
                               
                                let self_recip = Ratio::new_raw(self.denom.clone(), self_rem);
                                let other_recip = Ratio::new_raw(other.denom.clone(), other_rem);
                                self_recip.cmp(&other_recip).reverse()
                            }
                        }
                    }
                }
            }
        }

        impl<T: Clone + Integer> PartialOrd for Ratio<T>
        {
            #[inline] fn partial_cmp(&self, other: &Self) -> Option<cmp::Ordering> {
                Some(self.cmp(other))
            }
        }

        impl<T: Clone + Integer> PartialEq for Ratio<T> 
        {
            #[inline] fn eq(&self, other: &Self) -> bool {
                self.cmp(other) == cmp::Ordering::Equal
            }
        }

        impl<T: Clone + Integer> Eq for Ratio<T> {}       
       
        impl<T: Clone + Integer + Hash> Hash for Ratio<T> 
        {
            fn hash<H: Hasher>(&self, state: &mut H) {
                recurse(&self.numer, &self.denom, state);

                fn recurse<T: Integer + Hash, H: Hasher>(numer: &T, denom: &T, state: &mut H) {
                    if !denom.is_zero() {
                        let (int, rem) = numer.div_mod_floor(denom);
                        int.hash(state);
                        recurse(denom, &rem, state);
                    } else {
                        denom.hash(state);
                    }
                }
            }
        }

        mod iter_sum_product
        {
            use ::
            {
                iter::{Product, Sum},
                num::
                {
                    integers::{ Integer },
                    rational::{ Ratio },
                    traits::{ One, Zero },
                },
                *,
            };

            impl<T: Integer + Clone> Sum for Ratio<T>
            {
                fn sum<I>(iter: I) -> Self
                where
                    I: Iterator<Item = Ratio<T>>,
                {
                    iter.fold(Self::zero(), |sum, num| sum + num)
                }
            }
            
            impl<'a, T: Integer + Clone> Sum<&'a Ratio<T>> for Ratio<T>
            {
                fn sum<I>(iter: I) -> Self
                where
                    I: Iterator<Item = &'a Ratio<T>>,
                {
                    iter.fold(Self::zero(), |sum, num| sum + num)
                }
            }
            
            impl<T: Integer + Clone> Product for Ratio<T>
            {
                fn product<I>(iter: I) -> Self
                where
                    I: Iterator<Item = Ratio<T>>,
                {
                    iter.fold(Self::one(), |prod, num| prod * num)
                }
            }
            
            impl<'a, T: Integer + Clone> Product<&'a Ratio<T>> for Ratio<T>
            {
                fn product<I>(iter: I) -> Self
                where
                    I: Iterator<Item = &'a Ratio<T>>,
                {
                    iter.fold(Self::one(), |prod, num| prod * num)
                }
            }
        }

        mod opassign
        {
            use ::
            {
                ops::{AddAssign, DivAssign, MulAssign, RemAssign, SubAssign},
                num::
                {
                    integers::Integer,
                    rational::{ Ratio },
                    traits::NumAssign,
                },
                *,
            };

            impl<T: Clone + Integer + NumAssign> AddAssign for Ratio<T>
            {
                fn add_assign(&mut self, other: Ratio<T>) {
                    if self.denom == other.denom {
                        self.numer += other.numer
                    } else {
                        let lcm = self.denom.lcm(&other.denom);
                        let lhs_numer = self.numer.clone() * (lcm.clone() / self.denom.clone());
                        let rhs_numer = other.numer * (lcm.clone() / other.denom);
                        self.numer = lhs_numer + rhs_numer;
                        self.denom = lcm;
                    }
                    self.reduce();
                }
            }
           
            impl<T: Clone + Integer + NumAssign> DivAssign for Ratio<T>
            {
                fn div_assign(&mut self, other: Ratio<T>) {
                    let gcd_ac = self.numer.gcd(&other.numer);
                    let gcd_bd = self.denom.gcd(&other.denom);
                    self.numer /= gcd_ac.clone();
                    self.numer *= other.denom / gcd_bd.clone();
                    self.denom /= gcd_bd;
                    self.denom *= other.numer / gcd_ac;
                    self.reduce();
                }
            }
           
            impl<T: Clone + Integer + NumAssign> MulAssign for Ratio<T>
            {
                fn mul_assign(&mut self, other: Ratio<T>) {
                    let gcd_ad = self.numer.gcd(&other.denom);
                    let gcd_bc = self.denom.gcd(&other.numer);
                    self.numer /= gcd_ad.clone();
                    self.numer *= other.numer / gcd_bc.clone();
                    self.denom /= gcd_bc;
                    self.denom *= other.denom / gcd_ad;
                    self.reduce();
                }
            }
            
            impl<T: Clone + Integer + NumAssign> RemAssign for Ratio<T>
            {
                fn rem_assign(&mut self, other: Ratio<T>) {
                    if self.denom == other.denom {
                        self.numer %= other.numer
                    } else {
                        let lcm = self.denom.lcm(&other.denom);
                        let lhs_numer = self.numer.clone() * (lcm.clone() / self.denom.clone());
                        let rhs_numer = other.numer * (lcm.clone() / other.denom);
                        self.numer = lhs_numer % rhs_numer;
                        self.denom = lcm;
                    }
                    self.reduce();
                }
            }
            
            impl<T: Clone + Integer + NumAssign> SubAssign for Ratio<T>
            {
                fn sub_assign(&mut self, other: Ratio<T>) {
                    if self.denom == other.denom {
                        self.numer -= other.numer
                    } else {
                        let lcm = self.denom.lcm(&other.denom);
                        let lhs_numer = self.numer.clone() * (lcm.clone() / self.denom.clone());
                        let rhs_numer = other.numer * (lcm.clone() / other.denom);
                        self.numer = lhs_numer - rhs_numer;
                        self.denom = lcm;
                    }
                    self.reduce();
                }
            }
           
            impl<T: Clone + Integer + NumAssign> AddAssign<T> for Ratio<T>
            {
                fn add_assign(&mut self, other: T) {
                    self.numer += self.denom.clone() * other;
                    self.reduce();
                }
            }
            
            impl<T: Clone + Integer + NumAssign> DivAssign<T> for Ratio<T>
            {
                fn div_assign(&mut self, other: T) {
                    let gcd = self.numer.gcd(&other);
                    self.numer /= gcd.clone();
                    self.denom *= other / gcd;
                    self.reduce();
                }
            }
            
            impl<T: Clone + Integer + NumAssign> MulAssign<T> for Ratio<T>
            {
                fn mul_assign(&mut self, other: T) {
                    let gcd = self.denom.gcd(&other);
                    self.denom /= gcd.clone();
                    self.numer *= other / gcd;
                    self.reduce();
                }
            }
           
            impl<T: Clone + Integer + NumAssign> RemAssign<T> for Ratio<T>
            {
                fn rem_assign(&mut self, other: T) {
                    self.numer %= self.denom.clone() * other;
                    self.reduce();
                }
            }
           
            impl<T: Clone + Integer + NumAssign> SubAssign<T> for Ratio<T>
            {
                fn sub_assign(&mut self, other: T) {
                    self.numer -= self.denom.clone() * other;
                    self.reduce();
                }
            }
            macro_rules! forward_op_assign {
                (impl $imp:ident, $method:ident) => {
                    impl<'a, T: Clone + Integer + NumAssign> $imp<&'a Ratio<T>> for Ratio<T> {
                        #[inline]
                        fn $method(&mut self, other: &Ratio<T>) {
                            self.$method(other.clone())
                        }
                    }
                    impl<'a, T: Clone + Integer + NumAssign> $imp<&'a T> for Ratio<T> {
                        #[inline]
                        fn $method(&mut self, other: &T) {
                            self.$method(other.clone())
                        }
                    }
                };
            }
            forward_op_assign!(impl AddAssign, add_assign);
            forward_op_assign!(impl DivAssign, div_assign);
            forward_op_assign!(impl MulAssign, mul_assign);
            forward_op_assign!(impl RemAssign, rem_assign);
            forward_op_assign!(impl SubAssign, sub_assign);
        }

        forward_all_binop!(impl Mul, mul);
       
        impl<T> Mul<Ratio<T>> for Ratio<T> where
            T: Clone + Integer,
        {
            type Output = Ratio<T>;
            #[inline] fn mul(self, rhs: Ratio<T>) -> Ratio<T> {
                let gcd_ad = self.numer.gcd(&rhs.denom);
                let gcd_bc = self.denom.gcd(&rhs.numer);
                Ratio::new(
                    self.numer / gcd_ad.clone() * (rhs.numer / gcd_bc.clone()),
                    self.denom / gcd_bc * (rhs.denom / gcd_ad),
                )
            }
        }
       
        impl<T> Mul<T> for Ratio<T> where
            T: Clone + Integer,
        {
            type Output = Ratio<T>;
            #[inline] fn mul(self, rhs: T) -> Ratio<T> {
                let gcd = self.denom.gcd(&rhs);
                Ratio::new(self.numer * (rhs / gcd.clone()), self.denom / gcd)
            }
        }

        forward_all_binop!(impl Div, div);
       
        impl<T> Div<Ratio<T>> for Ratio<T> where
            T: Clone + Integer,
        {
            type Output = Ratio<T>;

            #[inline] fn div(self, rhs: Ratio<T>) -> Ratio<T> {
                let gcd_ac = self.numer.gcd(&rhs.numer);
                let gcd_bd = self.denom.gcd(&rhs.denom);
                Ratio::new(
                    self.numer / gcd_ac.clone() * (rhs.denom / gcd_bd.clone()),
                    self.denom / gcd_bd * (rhs.numer / gcd_ac),
                )
            }
        }
       
        impl<T> Div<T> for Ratio<T> where
            T: Clone + Integer,
        {
            type Output = Ratio<T>;

            #[inline] fn div(self, rhs: T) -> Ratio<T> {
                let gcd = self.numer.gcd(&rhs);
                Ratio::new(self.numer / gcd.clone(), self.denom * (rhs / gcd))
            }
        }

        macro_rules! arith_impl
        {
            (impl $imp:ident, $method:ident) => {
                forward_all_binop!(impl $imp, $method);
               
                impl<T: Clone + Integer> $imp<Ratio<T>> for Ratio<T> {
                    type Output = Ratio<T>;
                    #[inline] fn $method(self, rhs: Ratio<T>) -> Ratio<T> {
                        if self.denom == rhs.denom {
                            return Ratio::new(self.numer.$method(rhs.numer), rhs.denom);
                        }
                        let lcm = self.denom.lcm(&rhs.denom);
                        let lhs_numer = self.numer * (lcm.clone() / self.denom);
                        let rhs_numer = rhs.numer * (lcm.clone() / rhs.denom);
                        Ratio::new(lhs_numer.$method(rhs_numer), lcm)
                    }
                }
               
                impl<T: Clone + Integer> $imp<T> for Ratio<T> {
                    type Output = Ratio<T>;
                    #[inline] fn $method(self, rhs: T) -> Ratio<T> {
                        Ratio::new(self.numer.$method(self.denom.clone() * rhs), self.denom)
                    }
                }
            };
        }

        arith_impl!(impl Add, add);
        arith_impl!(impl Sub, sub);
        arith_impl!(impl Rem, rem);
       
        impl<T> CheckedMul for Ratio<T> where
            T: Clone + Integer + CheckedMul,
        {
            #[inline] fn checked_mul(&self, rhs: &Ratio<T>) -> Option<Ratio<T>> {
                let gcd_ad = self.numer.gcd(&rhs.denom);
                let gcd_bc = self.denom.gcd(&rhs.numer);
                Some(Ratio::new(
                    (self.numer.clone() / gcd_ad.clone())
                        .checked_mul(&(rhs.numer.clone() / gcd_bc.clone()))?,
                    (self.denom.clone() / gcd_bc).checked_mul(&(rhs.denom.clone() / gcd_ad))?,
                ))
            }
        }

       
        impl<T> CheckedDiv for Ratio<T> where
            T: Clone + Integer + CheckedMul,
        {
            #[inline] fn checked_div(&self, rhs: &Ratio<T>) -> Option<Ratio<T>> {
                if rhs.is_zero() {
                    return None;
                }
                let (numer, denom) = if self.denom == rhs.denom {
                    (self.numer.clone(), rhs.numer.clone())
                } else if self.numer == rhs.numer {
                    (rhs.denom.clone(), self.denom.clone())
                } else {
                    let gcd_ac = self.numer.gcd(&rhs.numer);
                    let gcd_bd = self.denom.gcd(&rhs.denom);
                    (
                        (self.numer.clone() / gcd_ac.clone())
                            .checked_mul(&(rhs.denom.clone() / gcd_bd.clone()))?,
                        (self.denom.clone() / gcd_bd).checked_mul(&(rhs.numer.clone() / gcd_ac))?,
                    )
                };
               
                if denom.is_zero() {
                    None
                } else if numer.is_zero() {
                    Some(Self::zero())
                } else if numer == denom {
                    Some(Self::one())
                } else {
                    let g = numer.gcd(&denom);
                    let numer = numer / g.clone();
                    let denom = denom / g;
                    let raw = if denom < T::zero() {
                       
                       
                        let n1 = T::zero() - T::one();
                        Ratio::new_raw(numer.checked_mul(&n1)?, denom.checked_mul(&n1)?)
                    } else {
                        Ratio::new_raw(numer, denom)
                    };
                    Some(raw)
                }
            }
        }
        
        macro_rules! checked_arith_impl
        {
            (impl $imp:ident, $method:ident) => {
                impl<T: Clone + Integer + CheckedMul + $imp> $imp for Ratio<T> {
                    #[inline] fn $method(&self, rhs: &Ratio<T>) -> Option<Ratio<T>> {
                        let gcd = self.denom.clone().gcd(&rhs.denom);
                        let lcm = (self.denom.clone() / gcd.clone()).checked_mul(&rhs.denom)?;
                        let lhs_numer = (lcm.clone() / self.denom.clone()).checked_mul(&self.numer)?;
                        let rhs_numer = (lcm.clone() / rhs.denom.clone()).checked_mul(&rhs.numer)?;
                        Some(Ratio::new(lhs_numer.$method(&rhs_numer)?, lcm))
                    }
                }
            };
        }
        
        checked_arith_impl!(impl CheckedAdd, checked_add);
        checked_arith_impl!(impl CheckedSub, checked_sub);

        impl<T> Neg for Ratio<T> where
            T: Clone + Integer + Neg<Output = T>,
        {
            type Output = Ratio<T>;

            #[inline] fn neg(self) -> Ratio<T> {
                Ratio::new_raw(-self.numer, self.denom)
            }
        }

        impl<'a, T> Neg for &'a Ratio<T> where
            T: Clone + Integer + Neg<Output = T>,
        {
            type Output = Ratio<T>;

            #[inline] fn neg(self) -> Ratio<T> {
                -self.clone()
            }
        }

        impl<T> Inv for Ratio<T> where
            T: Clone + Integer,
        {
            type Output = Ratio<T>;

            #[inline] fn inv(self) -> Ratio<T> {
                self.recip()
            }
        }

        impl<'a, T> Inv for &'a Ratio<T> where
            T: Clone + Integer,
        {
            type Output = Ratio<T>;

            #[inline] fn inv(self) -> Ratio<T> {
                self.recip()
            }
        }
        
        impl<T: ConstZero + ConstOne> Ratio<T>
        {
            /// A constant `Ratio` 0/1.
            pub const ZERO: Self = Self::new_raw(T::ZERO, T::ONE);
        }

        impl<T: Clone + Integer + ConstZero + ConstOne> ConstZero for Ratio<T>
        {
            const ZERO: Self = Self::ZERO;
        }

        impl<T: Clone + Integer> Zero for Ratio<T> 
        {
            #[inline] fn zero() -> Ratio<T> {
                Ratio::new_raw(Zero::zero(), One::one())
            }
            #[inline] fn is_zero(&self) -> bool {
                self.numer.is_zero()
            }
            #[inline] fn set_zero(&mut self) {
                self.numer.set_zero();
                self.denom.set_one();
            }
        }

        impl<T: ConstOne> Ratio<T> 
        {
            /// A constant `Ratio` 1/1.
            pub const ONE: Self = Self::new_raw(T::ONE, T::ONE);
        }

        impl<T: Clone + Integer + ConstOne> ConstOne for Ratio<T> 
        {
            const ONE: Self = Self::ONE;
        }

        impl<T: Clone + Integer> One for Ratio<T>
        {
            #[inline] fn one() -> Ratio<T> {
                Ratio::new_raw(One::one(), One::one())
            }
            #[inline] fn is_one(&self) -> bool {
                self.numer == self.denom
            }
            #[inline] fn set_one(&mut self) {
                self.numer.set_one();
                self.denom.set_one();
            }
        }

        impl<T: Clone + Integer> Num for Ratio<T>
        {
            type FromStrRadixErr = ParseRatioError;

            /// Parses `numer/denom` where the numbers are in base `radix`.
            fn from_str_radix(s: &str, radix: u32) -> Result<Ratio<T>, ParseRatioError> {
                if s.splitn(2, '/').count() == 2 {
                    let mut parts = s.splitn(2, '/').map(|ss| {
                        T::from_str_radix(ss, radix).map_err(|_| ParseRatioError {
                            kind: RatioErrorKind::ParseError,
                        })
                    });
                    let numer: T = parts.next().unwrap()?;
                    let denom: T = parts.next().unwrap()?;
                    if denom.is_zero() {
                        Err(ParseRatioError {
                            kind: RatioErrorKind::ZeroDenominator,
                        })
                    } else {
                        Ok(Ratio::new(numer, denom))
                    }
                } else {
                    Err(ParseRatioError {
                        kind: RatioErrorKind::ParseError,
                    })
                }
            }
        }

        impl<T: Clone + Integer + Signed> Signed for Ratio<T>
        {
            #[inline] fn abs(&self) -> Ratio<T> {
                if self.is_negative() {
                    -self.clone()
                } else {
                    self.clone()
                }
            }
            #[inline] fn abs_sub(&self, other: &Ratio<T>) -> Ratio<T> {
                if *self <= *other {
                    Zero::zero()
                } else {
                    self - other
                }
            }
            #[inline] fn signum(&self) -> Ratio<T> {
                if self.is_positive() {
                    Self::one()
                } else if self.is_zero() {
                    Self::zero()
                } else {
                    -Self::one()
                }
            }
            #[inline] fn is_positive(&self) -> bool {
                (self.numer.is_positive() && self.denom.is_positive())
                    || (self.numer.is_negative() && self.denom.is_negative())
            }
            #[inline] fn is_negative(&self) -> bool {
                (self.numer.is_negative() && self.denom.is_positive())
                    || (self.numer.is_positive() && self.denom.is_negative())
            }
        }
        
        macro_rules! impl_formatting
        {
            ($fmt_trait:ident, $prefix:expr, $fmt_str:expr, $fmt_alt:expr) => {
                impl<T: $fmt_trait + Clone + Integer> $fmt_trait for Ratio<T> {
                            fn fmt(&self, f: &mut Formatter<'_>) -> fmt::Result
                {        let pre_pad = if self.denom.is_one() {
                            format!($fmt_str, self.numer)
                        } else {
                            if f.alternate() {
                                format!(concat!($fmt_str, "/", $fmt_alt), self.numer, self.denom)
                            } else {
                                format!(concat!($fmt_str, "/", $fmt_str), self.numer, self.denom)
                            }
                        };
                        if let Some(pre_pad) = pre_pad.strip_prefix("-") {
                            f.pad_integral(false, $prefix, pre_pad)
                        } else {
                            f.pad_integral(true, $prefix, &pre_pad)
                        }
                    }
                }
            };
        }

        impl_formatting!(Display, "", "{}", "{:#}");
        impl_formatting!(Octal, "0o", "{:o}", "{:#o}");
        impl_formatting!(Binary, "0b", "{:b}", "{:#b}");
        impl_formatting!(LowerHex, "0x", "{:x}", "{:#x}");
        impl_formatting!(UpperHex, "0x", "{:X}", "{:#X}");
        impl_formatting!(LowerExp, "", "{:e}", "{:#e}");
        impl_formatting!(UpperExp, "", "{:E}", "{:#E}");

        impl<T: FromStr + Clone + Integer> FromStr for Ratio<T>
        {
            type Err = ParseRatioError;

            /// Parses `numer/denom` or just `numer`.
            fn from_str(s: &str) -> Result<Ratio<T>, ParseRatioError> {
                let mut split = s.splitn(2, '/');

                let n = split.next().ok_or(ParseRatioError {
                    kind: RatioErrorKind::ParseError,
                })?;
                let num = FromStr::from_str(n).map_err(|_| ParseRatioError {
                    kind: RatioErrorKind::ParseError,
                })?;

                let d = split.next().unwrap_or("1");
                let den = FromStr::from_str(d).map_err(|_| ParseRatioError {
                    kind: RatioErrorKind::ParseError,
                })?;

                if Zero::is_zero(&den) {
                    Err(ParseRatioError {
                        kind: RatioErrorKind::ZeroDenominator,
                    })
                } else {
                    Ok(Ratio::new(num, den))
                }
            }
        }

        impl<T> From<Ratio<T>> for (T, T)
        {
            fn from(val: Ratio<T>) -> Self {
                (val.numer, val.denom)
            }
        }
                
        #[derive(Copy, Clone, Debug, PartialEq)]
        pub struct ParseRatioError
        {
            kind: RatioErrorKind,
        }

        #[derive(Copy, Clone, Debug, PartialEq)]
        enum RatioErrorKind
        {
            ParseError,
            ZeroDenominator,
        }

        impl fmt::Display for ParseRatioError
        {
            fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result
                {self.kind.description().fmt(f)
            }
        }
        
        impl Error for ParseRatioError
        {
            #[allow(deprecated)]
            fn description(&self) -> &str {
                self.kind.description()
            }
        }

        impl RatioErrorKind
        {
            fn description(&self) -> &'static str {
                match *self {
                    RatioErrorKind::ParseError => "failed to parse integer",
                    RatioErrorKind::ZeroDenominator => "zero value denominator",
                }
            }
        }
        
        impl FromPrimitive for Ratio<BigInt>
        {
            fn from_i64(n: i64) -> Option<Self> {
                Some(Ratio::from_integer(n.into()))
            }
            fn from_i128(n: i128) -> Option<Self> {
                Some(Ratio::from_integer(n.into()))
            }
            fn from_u64(n: u64) -> Option<Self> {
                Some(Ratio::from_integer(n.into()))
            }
            fn from_u128(n: u128) -> Option<Self> {
                Some(Ratio::from_integer(n.into()))
            }
            fn from_f32(n: f32) -> Option<Self> {
                Ratio::from_float(n)
            }
            fn from_f64(n: f64) -> Option<Self> {
                Ratio::from_float(n)
            }
        }

        macro_rules! from_primitive_integer
        {
            ($typ:ty, $approx:ident) => {
                impl FromPrimitive for Ratio<$typ> {
                    fn from_i64(n: i64) -> Option<Self> {
                        <$typ as FromPrimitive>::from_i64(n).map(Ratio::from_integer)
                    }
                    fn from_i128(n: i128) -> Option<Self> {
                        <$typ as FromPrimitive>::from_i128(n).map(Ratio::from_integer)
                    }
                    fn from_u64(n: u64) -> Option<Self> {
                        <$typ as FromPrimitive>::from_u64(n).map(Ratio::from_integer)
                    }
                    fn from_u128(n: u128) -> Option<Self> {
                        <$typ as FromPrimitive>::from_u128(n).map(Ratio::from_integer)
                    }
                    fn from_f32(n: f32) -> Option<Self> {
                        $approx(n, 10e-20, 30)
                    }
                    fn from_f64(n: f64) -> Option<Self> {
                        $approx(n, 10e-20, 30)
                    }
                }
            };
        }

        from_primitive_integer!(i8, approximate_float);
        from_primitive_integer!(i16, approximate_float);
        from_primitive_integer!(i32, approximate_float);
        from_primitive_integer!(i64, approximate_float);
        from_primitive_integer!(i128, approximate_float);
        from_primitive_integer!(isize, approximate_float);

        from_primitive_integer!(u8, approximate_float_unsigned);
        from_primitive_integer!(u16, approximate_float_unsigned);
        from_primitive_integer!(u32, approximate_float_unsigned);
        from_primitive_integer!(u64, approximate_float_unsigned);
        from_primitive_integer!(u128, approximate_float_unsigned);
        from_primitive_integer!(usize, approximate_float_unsigned);

        impl<T: Integer + Signed + Bounded + NumCast + Clone> Ratio<T>
        {
            pub fn approximate_float<F: FloatCore + NumCast>(f: F) -> Option<Ratio<T>> {
               
               
               
                let epsilon = <F as NumCast>::from(10e-20).expect("Can't convert 10e-20");
                approximate_float(f, epsilon, 30)
            }
        }

        impl<T: Integer + Unsigned + Bounded + NumCast + Clone> Ratio<T>
        {
            pub fn approximate_float_unsigned<F: FloatCore + NumCast>(f: F) -> Option<Ratio<T>> {
               
               
               
                let epsilon = <F as NumCast>::from(10e-20).expect("Can't convert 10e-20");
                approximate_float_unsigned(f, epsilon, 30)
            }
        }

        fn approximate_float<T, F>(val: F, max_error: F, max_iterations: usize) -> Option<Ratio<T>> where
            T: Integer + Signed + Bounded + NumCast + Clone,
            F: FloatCore + NumCast,
        {
            let negative = val.is_sign_negative();
            let abs_val = val.abs();

            let r = approximate_float_unsigned(abs_val, max_error, max_iterations)?;

           
            Some(if negative { r.neg() } else { r })
        }
        
        fn approximate_float_unsigned<T, F>(val: F, max_error: F, max_iterations: usize) -> Option<Ratio<T>> where
            T: Integer + Bounded + NumCast + Clone,
            F: FloatCore + NumCast,
        {
           
           

            if val < F::zero() || val.is_nan() {
                return None;
            }
            let mut q = val;
            let mut n0 = T::zero();
            let mut d0 = T::one();
            let mut n1 = T::one();
            let mut d1 = T::zero();

            let t_max = T::max_value();
            let t_max_f = <F as NumCast>::from(t_max.clone())?;

           
            let epsilon = t_max_f.recip();

           
            if q > t_max_f {
                return None;
            }
            for _ in 0..max_iterations {
                let a = match <T as NumCast>::from(q) {
                    None => break,
                    Some(a) => a,
                };

                let a_f = match <F as NumCast>::from(a.clone()) {
                    None => break,
                    Some(a_f) => a_f,
                };
                let f = q - a_f;

               
                if !a.is_zero()
                    && (n1 > t_max.clone() / a.clone()
                        || d1 > t_max.clone() / a.clone()
                        || a.clone() * n1.clone() > t_max.clone() - n0.clone()
                        || a.clone() * d1.clone() > t_max.clone() - d0.clone())
                {
                    break;
                }
                let n = a.clone() * n1.clone() + n0.clone();
                let d = a.clone() * d1.clone() + d0.clone();

                n0 = n1;
                d0 = d1;
                n1 = n.clone();
                d1 = d.clone();

               
               
                let g = Integer::gcd(&n1, &d1);
                if !g.is_zero() {
                    n1 = n1 / g.clone();
                    d1 = d1 / g.clone();
                }
               
                let (n_f, d_f) = match (<F as NumCast>::from(n), <F as NumCast>::from(d)) {
                    (Some(n_f), Some(d_f)) => (n_f, d_f),
                    _ => break,
                };
                if (n_f / d_f - val).abs() < max_error {
                    break;
                }
               
                if f < epsilon {
                    break;
                }
                q = f.recip();
            }
           
            if d1.is_zero() {
                return None;
            }
            Some(Ratio::new(n1, d1))
        }
        
        impl<T: Clone + Integer + ToPrimitive + ToBigInt> ToPrimitive for Ratio<T>
        {
            fn to_i64(&self) -> Option<i64> {
                self.to_integer().to_i64()
            }
            fn to_i128(&self) -> Option<i128> {
                self.to_integer().to_i128()
            }
            fn to_u64(&self) -> Option<u64> {
                self.to_integer().to_u64()
            }
            fn to_u128(&self) -> Option<u128> {
                self.to_integer().to_u128()
            }
            fn to_f64(&self) -> Option<f64> {
                let float = match (self.numer.to_i64(), self.denom.to_i64()) {
                    (Some(numer), Some(denom)) => ratio_to_f64(
                        <i128 as From<_>>::from(numer),
                        <i128 as From<_>>::from(denom),
                    ),
                    _ => {
                        let numer: BigInt = self.numer.to_bigint()?;
                        let denom: BigInt = self.denom.to_bigint()?;
                        ratio_to_f64(numer, denom)
                    }
                };
                if float.is_nan() {
                    None
                } else {
                    Some(float)
                }
            }
        }

        trait Bits
        {
            fn bits(&self) -> u64;
        }
        
        impl Bits for BigInt
        {
            fn bits(&self) -> u64 {
                self.bits()
            }
        }

        impl Bits for i128
        {
            fn bits(&self) -> u64 {
                (128 - self.wrapping_abs().leading_zeros()).into()
            }
        }
        /// Converts a ratio of `T` to an f64.
        fn ratio_to_f64<T: Bits + Clone + Integer + Signed + ShlAssign<usize> + ToPrimitive>(
            numer: T,
            denom: T,
        ) -> f64 {
            use ::f64::{INFINITY, MANTISSA_DIGITS, MAX_EXP, MIN_EXP, RADIX};

            assert_eq!(
                RADIX, 2,
                "only floating point implementations with radix 2 are supported"
            );

           
            const MAX_EXACT_INT: i64 = 1i64 << MANTISSA_DIGITS;
            const MIN_EXACT_INT: i64 = -MAX_EXACT_INT;

            let flo_sign = numer.signum().to_f64().unwrap() / denom.signum().to_f64().unwrap();
            if !flo_sign.is_normal() {
                return flo_sign;
            }
           
           
           
            if let (Some(n), Some(d)) = (numer.to_i64(), denom.to_i64()) {
                let exact = MIN_EXACT_INT..=MAX_EXACT_INT;
                if exact.contains(&n) && exact.contains(&d) {
                    return n.to_f64().unwrap() / d.to_f64().unwrap();
                }
            }
           
           
           
           
            let mut numer = numer.abs();
            let mut denom = denom.abs();
            let (is_diff_positive, absolute_diff) = match numer.bits().checked_sub(denom.bits()) {
                Some(diff) => (true, diff),
                None => (false, denom.bits() - numer.bits()),
            };

           
           
            if is_diff_positive && absolute_diff > MAX_EXP as u64 {
                return INFINITY * flo_sign;
            }
            if !is_diff_positive && absolute_diff > -MIN_EXP as u64 + MANTISSA_DIGITS as u64 + 1 {
                return 0.0 * flo_sign;
            }
            let diff = if is_diff_positive {
                absolute_diff.to_isize().unwrap()
            } else {
                -absolute_diff.to_isize().unwrap()
            };

           
           
            let shift: isize = diff.max(MIN_EXP as isize) - MANTISSA_DIGITS as isize - 2;
            if shift >= 0 {
                denom <<= shift as usize
            } else {
                numer <<= -shift as usize
            };

            let (quotient, remainder) = numer.div_rem(&denom);

           
            let mut quotient = quotient.to_u64().unwrap();
            let n_rounding_bits = {
                let quotient_bits = 64 - quotient.leading_zeros() as isize;
                let subnormal_bits = MIN_EXP as isize - shift;
                quotient_bits.max(subnormal_bits) - MANTISSA_DIGITS as isize
            } as usize;
            debug_assert!(n_rounding_bits == 2 || n_rounding_bits == 3);
            let rounding_bit_mask = (1u64 << n_rounding_bits) - 1;

           
           
            let ls_bit = quotient & (1u64 << n_rounding_bits) != 0;
            let ms_rounding_bit = quotient & (1u64 << (n_rounding_bits - 1)) != 0;
            let ls_rounding_bits = quotient & (rounding_bit_mask >> 1) != 0;
            if ms_rounding_bit && (ls_bit || ls_rounding_bits || !remainder.is_zero()) {
                quotient += 1u64 << n_rounding_bits;
            }
            quotient &= !rounding_bit_mask;

           
           
            let q_float = quotient as f64 * flo_sign;
            ldexp(q_float, shift as i32)
        }
        /// Multiply `x` by 2 to the power of `exp`. Returns an accurate result even if `2^exp` is not representable.
        fn ldexp(x: f64, exp: i32) -> f64
        {
            use ::f64::{INFINITY, MANTISSA_DIGITS, MAX_EXP, RADIX};

            assert_eq!(
                RADIX, 2,
                "only floating point implementations with radix 2 are supported"
            );

            const EXPONENT_MASK: u64 = 0x7ff << 52;
            const MAX_UNSIGNED_EXPONENT: i32 = 0x7fe;
            const MIN_SUBNORMAL_POWER: i32 = MANTISSA_DIGITS as i32;

            if x.is_zero() || x.is_infinite() || x.is_nan() {
                return x;
            }
           
            if exp > 3 * MAX_EXP {
                return INFINITY * x.signum();
            } else if exp < -3 * MAX_EXP {
                return 0.0 * x.signum();
            }
           
            let (bits, curr_exp) = if !x.is_normal() {
               
               
                let normal_x = x * 2f64.powi(MIN_SUBNORMAL_POWER);
                let bits = normal_x.to_bits();
               
                (
                    bits,
                    ((bits & EXPONENT_MASK) >> 52) as i32 - MIN_SUBNORMAL_POWER,
                )
            } else {
                let bits = x.to_bits();
                let curr_exp = (bits & EXPONENT_MASK) >> 52;
               
                (bits, curr_exp as i32)
            };

           
           
            let new_exp = curr_exp + exp;

            if new_exp > MAX_UNSIGNED_EXPONENT {
                INFINITY * x.signum()
            } else if new_exp > 0 {
               
                let new_bits = (bits & !EXPONENT_MASK) | ((new_exp as u64) << 52);
                f64::from_bits(new_bits)
            } else if new_exp >= -(MANTISSA_DIGITS as i32) {
               
               
               
               
                let new_exp = new_exp + MIN_SUBNORMAL_POWER;
                debug_assert!(new_exp >= 0);
                let new_bits = (bits & !EXPONENT_MASK) | ((new_exp as u64) << 52);
                f64::from_bits(new_bits) * 2f64.powi(-MIN_SUBNORMAL_POWER)
            } else {
               
                return 0.0 * x.signum();
            }
        }
        
        pub fn frac_from_whole_and_dec(whole: BigInt, decimal: BigInt, dec_len: usize) -> BigRational
        {
            let denom = ::num::traits::pow(BigInt::from_u8(10).unwrap(), dec_len);
            BigRational::new(whole, 1.into()) + BigRational::new(decimal, denom)
        }
    }
}

pub mod mem
{
    pub use std::mem::{ * };
}

pub mod objects
{
    /*!
    Object | A hashmap of keys to values, where values can be any type, including other objects. */
    use ::
    {
        arrays::{ Arr },
        collections::{ hash_map::{Iter, Keys, Values}, HashMap },
        error::{ OverError },
        fmt::{ Format },
        num::
        {
            big::{ BigInt },
            rational::{ BigRational },
            traits::{ Zero },
        },
        result::{ OverResult },
        str::{ FromStr },
        sync::{ Arc, atomic::{ AtomicUsize, Ordering } },
        tuples::{ Tup },
        types::{ Type },
        values::{ Value },
        *,
    };
    /*
    */
    lazy_static! 
    {
        static ref CUR_ID: AtomicUsize = AtomicUsize::new(0);
    }

    fn get_id() -> usize 
    {
        CUR_ID.fetch_add(1, Ordering::Relaxed)
    }

    #[derive(Clone, Debug)]
    struct ObjInner 
    {
        map: HashMap<String, Value>,
        parent: Option<Obj>,
        id: usize,
    }
    /// `Obj` struct.
    #[derive(Clone, Debug)]
    pub struct Obj 
    {
        inner: Arc<ObjInner>,
    }

    macro_rules! get_fn 
    {
        ( $doc:expr, $name:tt, $type:ty ) => {
            #[doc=$doc]
            pub fn $name(&self, field: &str) -> OverResult<$type> {
                match self.get(field) {
                    Some(value) => {
                        match value.$name() {
                            Ok(result) => Ok(result),
                            e @ Err(_) => e,
                        }
                    }
                    None => Err(OverError::FieldNotFound(field.into())),
                }
            }
        }
    }

    impl Obj 
    {
        /// Gets the `Value` associated with `field`.
        pub fn read(&self, field: &str) -> Result<Value, ()> 
        {
            match self.inner.map.get(field)
            {
                Some(value) => Ok( value.clone() ),
                None => match self.inner.parent
                {
                    Some( ref parent ) => Ok( parent.get( field ).unwrap_or( Value::Null ) ),
                    None => Err( () ),
                },
            }
        }

        /// Returns a new `Obj` created from the given `HashMap`.
        pub fn from_map(obj_map: HashMap<String, Value>) -> OverResult<Obj> 
        {
            for field in obj_map.keys() {
                if !Self::is_valid_field(field) {
                    return Err(OverError::InvalidFieldName((*field).clone()));
                }
            }
            let id = get_id();

            Ok(Obj {
                inner: Arc::new(ObjInner {
                    map: obj_map,
                    parent: None,
                    id,
                }),
            })
        }
        /// Returns a new `Obj` created from the given `HashMap` with given `parent`.
        pub fn from_map_with_parent(obj_map: HashMap<String, Value>, parent: Obj) -> OverResult<Obj> 
        {
            for field in obj_map.keys() {
                if !Self::is_valid_field(field) {
                    return Err(OverError::InvalidFieldName(field.clone()));
                }
            }
            let id = get_id();

            Ok(Obj {
                inner: Arc::new(ObjInner {
                    map: obj_map,
                    parent: Some(parent),
                    id,
                }),
            })
        }
        /// Returns a new `Obj` created from the given `HashMap`.
        pub fn from_map_unchecked(obj_map: HashMap<String, Value>) -> Obj 
        {
            let id = get_id();

            Obj {
                inner: Arc::new(ObjInner {
                    map: obj_map,
                    parent: None,
                    id,
                }),
            }
        }
        /// Returns a new `Obj` created from the given `HashMap` with given `parent`.
        pub fn from_map_with_parent_unchecked(obj_map: HashMap<String, Value>, parent: Obj) -> Obj 
        {
            let id = get_id();

            Obj {
                inner: Arc::new(ObjInner {
                    map: obj_map,
                    parent: Some(parent),
                    id,
                }),
            }
        }
        /// Returns the ID of this `Obj`.
        pub fn id(&self) -> usize 
        {
            self.inner.id
        }
        /// Returns a reference to the inner map of this `Obj`.
        pub fn map_ref(&self) -> &HashMap<String, Value> 
        {
            &self.inner.map
        }
        /// Returns a new `Obj` loaded from a file.
        pub fn from_file( path:&str ) -> OverResult<Obj> 
        {
            Ok( parses::load_from_file(path)? )
        }
        /// Writes this `Obj` to given file in `.over` representation.
        pub fn write_to_file(&self, path: &str) -> OverResult<()>
        {
            str::write_file_from(path, &self.write_str())?;
            Ok(())
        }
        /// Writes this `Obj` to a `String`.
        pub fn write_str(&self) -> String 
        {
            self.format(false, 0)
        }
        /// Iterates over each `(String, Value)` pair in `self`, applying `f`.
        pub fn with_each<F>(&self, mut f: F) where
        F: FnMut(&String, &Value),
        {
            for (field, value) in &self.inner.map {
                f(field, value)
            }
        }
        /// Returns the number of fields for this `Obj` (parent fields not included).
        pub fn len(&self) -> usize 
        {
            self.inner.map.len()
        }
        /// Returns whether this `Obj` is empty.
        pub fn is_empty(&self) -> bool 
        {
            self.inner.map.is_empty()
        }
        /// Returns whether `self` and `other` point to the same data.
        pub fn ptr_eq(&self, other: &Self) -> bool 
        {
            Arc::ptr_eq(&self.inner, &other.inner)
        }
        /// Returns true if this `Obj` contains `field`.
        pub fn contains(&self, field: &str) -> bool 
        {
            self.inner.map.contains_key(field)
        }
        /// Gets the `Value` associated with `field`.
        pub fn get(&self, field: &str) -> Option<Value> 
        {
            match self.inner.map.get(field) {
                Some(value) => Some(value.clone()),
                None => match self.inner.parent {
                    Some(ref parent) => parent.get(field),
                    None => None,
                },
            }
        }
        /// Gets the `Value` associated with `field` and the `Obj` where it was found.
        pub fn get_with_source(&self, field: &str) -> Option<(Value, Obj)> 
        {
            match self.inner.map.get(field) {
                Some(value) => Some((value.clone(), self.clone())),
                None => match self.inner.parent {
                    Some(ref parent) => parent.get_with_source(field),
                    None => None,
                },
            }
        }

        get_fn!
        (
            "Returns the `bool` found at `field`. \
            Returns an error if the field was not found \
            or if the `Value` at `field` is not `Bool`.",
            get_bool,
            bool
        );

        get_fn!
        (
            "Returns the `BigInt` found at `field`. \
            Returns an error if the field was not found \
            or if the `Value` at `field` is not `Int`.",
            get_int,
            BigInt
        );

        get_fn!
        (
            "Returns the `BigRational` found at `field`. \
            Returns an error if the field was not found \
            or if the `Value` at `field` is not `Frac`.",
            get_frac,
            BigRational
        );

        get_fn!
        (
            "Returns the `char` found at `field`. \
            Returns an error if the field was not found \
            or if the `Value` at `field` is not `Char`.",
            get_char,
            char
        );

        get_fn!
        (
            "Returns the `String` found at `field`. \
            Returns an error if the field was not found \
            or if the `Value` at `field` is not `Str`.",
            get_str,
            String
        );

        get_fn!
        (
            "Returns the `Arr` found at `field`. \
            Returns an error if the field was not found \
            or if the `Value` at `field` is not `Arr`.",
            get_arr,
            Arr
        );

        get_fn!
        (
            "Returns the `Tup` found at `field`. \
            Returns an error if the field was not found \
            or if the `Value` at `field` is not `Tup`.",
            get_tup,
            Tup
        );

        get_fn!
        (
            "Returns the `Obj` found at `field`. \
            Returns an error if the field was not found \
            or if the `Value` at `field` is not `Obj`.",
            get_obj,
            Obj
        );

        /// Returns whether this `Obj` has a parent.
        pub fn has_parent(&self) -> bool 
        {
            self.inner.parent.is_some()
        }
        /// Returns the parent for this `Obj`.
        pub fn get_parent(&self) -> Option<Obj> 
        {
            match self.inner.parent {
                Some(ref parent) => Some(parent.clone()),
                None => None,
            }
        }
        /// Returns true if `field` is a valid field name for an `Obj`.
        pub fn is_valid_field(field: &str) -> bool 
        {
            let mut first = true;

            for ch in field.chars() {
                if first {
                    if !Self::is_valid_field_char(ch, true) {
                        return false;
                    }
                    first = false;
                } else if !Self::is_valid_field_char(ch, false) {
                    return false;
                }
            }
            true
        }
        /// Returns true if the given char is valid for a field, depending on whether it is the first char or not.
        pub fn is_valid_field_char(ch: char, first: bool) -> bool 
        {
            match ch 
            {
                ch if ch.is_alphabetic() => true,
                ch if is::digit(ch) => !first,
                '_' => true,
                '^' => first,
                _ => false,
            }
        }
        /// An iterator visiting all fields (keys) in arbitrary order.
        pub fn keys(&self) -> Keys<String, Value> 
        {
            self.map_ref().keys()
        }
        /// An iterator visiting all values in arbitrary order.
        pub fn values(&self) -> Values<String, Value> 
        {
            self.map_ref().values()
        }
        /// An iterator visiting all field-value pairs in arbitrary order.
        pub fn iter(&self) -> Iter<String, Value> 
        {
            self.map_ref().iter()
        }
    }

    impl Default for Obj 
    {
        fn default() -> Self {
            Self::from_map_unchecked(map! {})
        }
    }

    impl fmt::Display for Obj 
    {
        fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
            write!(f, "{}", self.format(true, INDENT_STEP))
        }
    }

    impl FromStr for Obj 
    {
        type Err = OverError;

        fn from_str(s: &str) -> Result<Self, Self::Err> 
        {
            Ok(parses::load_from_str(s)?)
        }
    }
    /// For two Objs to be equal, the following two checks must pass:
    /// 1. If either Obj has a parent, then both must have parents and the parents must be equal.
    /// 2. The two Objs must have all the same fields pointing to the same values.
    impl PartialEq for Obj 
    {
        fn eq(&self, other: &Self) -> bool {
            let inner = &self.inner;
            let other_inner = &other.inner;

           
            if inner.parent.is_some() && other_inner.parent.is_some() {
                let parent = self.get_parent().unwrap();
                let other_parent = other.get_parent().unwrap();
                if parent != other_parent {
                    return false;
                }
            } else if !(inner.parent.is_none() && other_inner.parent.is_none()) {
                return false;
            }
           
            inner.map == other_inner.map
        }
    }
}

pub mod ops
{
    pub use std::ops::{ * };
}

pub mod option
{
    pub use std::option::{ * };
}

pub mod panic
{
    pub use std::panic::{ * };
}

pub mod parses
{
    /*!
    */
    use ::
    {
        arrays::{ self, Arr },
        char::{ CharStream },
        collections::{ HashMap, HashSet, VecDeque },
        error::{ parse::{ ParseErrorKind::{ * }, ParseError, parse_err } },
        num::
        {
            big::BigInt,
            rational::{ BigRational, frac_from_whole_and_dec },
            traits::{ ToPrimitive, Zero },
        },
        objects::{ Obj },
        ops::{ Deref },
        path::{ Path },
        result::{ ParseResult },
        tuples::{ Tup },
        types::{ Type },
        values::{ Value },
        *,
    };
    /*
    */
    type ObjMap = HashMap<String, Value>;
    type GlobalMap = HashMap<String, Value>;
    type IncludedMap = (HashMap<String, Value>, HashSet<String>);

    lazy_static! 
    {
        static ref OBJ_SENTINEL: Obj = Obj::from_map_unchecked(HashMap::new());
        static ref STR_SENTINEL: Obj = Obj::from_map_unchecked(HashMap::new());
        static ref ARR_SENTINEL: Obj = Obj::from_map_unchecked(HashMap::new());
        static ref TUP_SENTINEL: Obj = Obj::from_map_unchecked(HashMap::new());
    }
    pub const MAX_DEPTH: usize = 64;
    /*
    lineread v0.7.2 */
    pub mod lines
    {
        /*!
        Provides a configurable, concurrent, extensible, interactive input reader for Unix terminals and Windows console.*/
        use ::
        {
            *,
        };
        /*
        pub use crate::command::Command;
        pub use crate::complete::{Completer, Completion, Suffix};
        pub use crate::function::Function;
        pub use crate::interface::Interface;
        pub use crate::prompter::Prompter;
        pub use crate::reader::{Reader, ReadResult};
        pub use crate::terminal::{DefaultTerminal, Signal, Terminal};
        pub use crate::writer::Writer;
        */
        pub mod complete
        {
            /*!
            Provides utilities for implementing word completion. */
            use ::
            {
                *,
            };
            /*
            use std::borrow::Cow::{self, Borrowed, Owned};
            use std::fs::read_dir;
            use std::path::{is_separator, MAIN_SEPARATOR};

            use crate::prompter::Prompter;
            use crate::terminal::Terminal;
            */
            /// Specifies an optional suffix to override the default value
            #[derive(Copy, Clone, Debug, Eq, PartialEq)]
            pub enum Suffix
            {
                /// Use the default suffix
                Default,
                /// Use no suffix
                None,
                /// Use the given suffix
                Some(char),
            }
            /// Represents a single possible completion
            #[derive(Clone, Debug)]
            pub struct Completion
            {
                /// Whole completion text
                pub completion: String,
                /// Listing display string; `None` if matches completion
                pub display: Option<String>,
                /// Completion suffix; replaces append character
                pub suffix: Suffix,
            }
        }

        pub mod chars
        {
            /*!
            Provides utilities for manipulating character values */
            use ::
            {
                *,
            };
            /*
            */
            /// Character value indicating end-of-file
            pub const EOF: char = '\x04';

            /// Character value generated by the Escape key
            pub const ESCAPE: char = '\x1b';

            /// Character value generated by the Backspace key
            ///
            /// On Unix systems, this is equivalent to `RUBOUT`
            #[cfg(unix)]
            pub const DELETE: char = RUBOUT;

            /// Character value generated by the Backspace key
            ///
            /// On Windows systems, this character is Ctrl-H
            #[cfg(windows)]
            pub const DELETE: char = '\x08';

            /// Character value generated by the Backspace key on some systems
            pub const RUBOUT: char = '\x7f';

            /// Returns a character name as a key sequence, e.g. `Control-x` or `Meta-x`.
            ///
            /// Returns `None` if the name is invalid.
            pub fn parse_char_name(name: &str) -> Option<String> {
                let name_lc = name.to_lowercase();

                let is_ctrl = contains_any(&name_lc, &["c-", "ctrl-", "control-"]);
                let is_meta = contains_any(&name_lc, &["m-", "meta-"]);

                let name = match name_lc.rfind('-') {
                    Some(pos) => &name_lc[pos + 1..],
                    None => &name_lc[..]
                };

                let ch = match name {
                    "del" | "rubout"  => DELETE,
                    "esc" | "escape"  => ESCAPE,
                    "lfd" | "newline" => '\n',
                    "ret" | "return"  => '\r',
                    "spc" | "space"   => ' ',
                    "tab"             => '\t',
                    s if !s.is_empty() => s.chars().next().unwrap(),
                    _ => return None
                };

                let ch = match (is_ctrl, is_meta) {
                    (true,  true)  => meta(ctrl(ch)),
                    (true,  false) => ctrl(ch).to_string(),
                    (false, true)  => meta(ch),
                    (false, false) => ch.to_string(),
                };

                Some(ch)
            }

            /// Returns a character sequence escaped for user-facing display.
            ///
            /// Escape is formatted as `\e`.
            /// Control key combinations are prefixed with `\C-`.
            pub fn escape_sequence(s: &str) -> String {
                let mut res = String::with_capacity(s.len());

                for ch in s.chars() {
                    match ch {
                        ESCAPE => res.push_str(r"\e"),
                        RUBOUT => res.push_str(r"\C-?"),
                        '\\' => res.push_str(r"\\"),
                        '\'' => res.push_str(r"\'"),
                        '"' => res.push_str(r#"\""#),
                        ch if is_ctrl(ch) => {
                            res.push_str(r"\C-");
                            res.push(unctrl_lower(ch));
                        }
                        ch => res.push(ch)
                    }
                }

                res
            }

            /// Returns a meta sequence for the given character.
            pub fn meta(ch: char) -> String {
                let mut s = String::with_capacity(ch.len_utf8() + 1);
                s.push(ESCAPE);
                s.push(ch);
                s
            }

            fn contains_any(s: &str, strs: &[&str]) -> bool {
                strs.iter().any(|a| s.contains(a))
            }

            /// Returns whether the character is printable.
            ///
            /// That is, not NUL or a control character (other than Tab or Newline).
            pub fn is_printable(c: char) -> bool {
                c == '\t' || c == '\n' || !(c == '\0' || is_ctrl(c))
            }

            const CTRL_BIT: u8 = 0x40;
            const CTRL_MASK: u8 = 0x1f;

            /// Returns whether the given character is a control character.
            pub fn is_ctrl(c: char) -> bool {
                const CTRL_MAX: u32 = 0x1f;

                c != '\0' && c as u32 <= CTRL_MAX
            }

            /// Returns a control character for the given character.
            pub fn ctrl(c: char) -> char {
                ((c as u8) & CTRL_MASK) as char
            }

            /// Returns the printable character corresponding to the given control character.
            pub fn unctrl(c: char) -> char {
                ((c as u8) | CTRL_BIT) as char
            }

            /// Returns the lowercase character corresponding to the given control character.
            pub fn unctrl_lower(c: char) -> char {
                unctrl(c).to_ascii_lowercase()
            }
        }

        pub mod command
        {
            /*!
            */
            use ::
            {
                *,
            };
            /*
            use std::borrow::Cow::{self, Borrowed, Owned};
            use std::fmt;
            use crate::chars::escape_sequence;
            */
            macro_rules! define_commands
            {
                ( $( #[$meta:meta] $name:ident => $str:expr , )+ ) => {
                    /// Represents a command to modify `Reader` state
                    #[derive(Clone, Debug, Eq, PartialEq)]
                    pub enum Command {
                        $( #[$meta] $name , )+
                        /// Custom application-defined command
                        Custom(Cow<'static, str>),
                        /// Execute a given key sequence
                        Macro(Cow<'static, str>),
                    }

                    /// List of all command names
                    pub static COMMANDS: &[&str] = &[ $( $str ),+ ];

                    impl fmt::Display for Command {
                        fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
                            match *self {
                                $( Command::$name => f.write_str($str) , )+
                                Command::Custom(ref s) => f.write_str(s),
                                Command::Macro(ref s) => write!(f, "\"{}\"",
                                    escape_sequence(s))
                            }
                        }
                    }

                    impl Command {
                        /// Constructs a command from a `'static str` reference.
                        ///
                        /// If the string does not refer to a built-in command, a value
                        /// of `Command::Custom(Borrowed(name))` will be returned.
                        pub fn from_str(name: &'static str) -> Command {
                            Command::opt_from_str(name)
                                .unwrap_or_else(|| Command::Custom(Borrowed(name)))
                        }

                        /// Constructs a command from a non-`'static` string-like type.
                        ///
                        /// If the string does not refer to a built-in command, a value
                        /// of `Command::Custom(Owned(name.into()))` will be returned.
                        pub fn from_string<T>(name: T) -> Command
                                where T: AsRef<str> + Into<String> {
                            Command::opt_from_str(name.as_ref())
                                .unwrap_or_else(|| Command::Custom(Owned(name.into())))
                        }

                        fn opt_from_str(s: &str) -> Option<Command> {
                            match s {
                                $( $str => Some(Command::$name), )+
                                _ => None
                            }
                        }
                    }
                }
            }

            define_commands!
            {
                /// Abort history search
                Abort => "abort",
                /// Accepts the current input line
                AcceptLine => "accept-line",
                /// Perform completion
                Complete => "complete",
                /// Insert all completions into the input buffer
                InsertCompletions => "insert-completions",
                /// Show possible completions
                PossibleCompletions => "possible-completions",
                /// Insert the next possible completion
                MenuComplete => "menu-complete",
                /// Insert the previous possible completion
                MenuCompleteBackward => "menu-complete-backward",
                /// Begin numeric argument input
                DigitArgument => "digit-argument",
                /// Insert character or sequence at the cursor
                SelfInsert => "self-insert",
                /// Inserts a tab character
                TabInsert => "tab-insert",
                /// Toggles insert/overwrite mode
                OverwriteMode => "overwrite-mode",
                /// Insert a comment and accept input
                InsertComment => "insert-comment",
                /// Move the cursor backward one character
                BackwardChar => "backward-char",
                /// Move the cursor forward one character
                ForwardChar => "forward-char",
                /// Search for a given character
                CharacterSearch => "character-search",
                /// Search backward for a given character
                CharacterSearchBackward => "character-search-backward",
                /// Move the cursor backward one word
                BackwardWord => "backward-word",
                /// Move the cursor forward one word
                ForwardWord => "forward-word",
                /// Kill all characters before the cursor
                BackwardKillLine => "backward-kill-line",
                /// Kill all characters after the cursor
                KillLine => "kill-line",
                /// Kill a word before the cursor
                BackwardKillWord => "backward-kill-word",
                /// Kill a word after the cursor
                KillWord => "kill-word",
                /// Kill a word before the cursor, delimited by whitespace
                UnixWordRubout => "unix-word-rubout",
                /// Clear the screen
                ClearScreen => "clear-screen",
                /// Move the cursor to the beginning of the line
                BeginningOfLine => "beginning-of-line",
                /// Move the cursor to the end of the line
                EndOfLine => "end-of-line",
                /// Delete one character before the cursor
                BackwardDeleteChar => "backward-delete-char",
                /// Delete one character after the cursor
                DeleteChar => "delete-char",
                /// Drag the character before the cursor forward
                TransposeChars => "transpose-chars",
                /// Drag the word before the cursor forward
                TransposeWords => "transpose-words",
                /// Move to the first line of history
                BeginningOfHistory => "beginning-of-history",
                /// Move to the last line of history
                EndOfHistory => "end-of-history",
                /// Select next line in history
                NextHistory => "next-history",
                /// Select previous line in history
                PreviousHistory => "previous-history",
                /// Incremental search in history
                ForwardSearchHistory => "forward-search-history",
                /// Incremental reverse search in history
                ReverseSearchHistory => "reverse-search-history",
                /// Non-incremental forward history search using input up to the cursor
                HistorySearchForward => "history-search-forward",
                /// Non-incremental backward history search using input up to the cursor
                HistorySearchBackward => "history-search-backward",
                /// Insert literal character
                QuotedInsert => "quoted-insert",
                /// Insert text into buffer from the kill ring
                Yank => "yank",
                /// Rotate the kill ring and yank the new top
                YankPop => "yank-pop",
            }

            /// Describes the category of a command
            ///
            /// A command's category determines how particular operations behave
            /// in succession.
            #[derive(Copy, Clone, Debug, Eq, PartialEq)]
            pub enum Category 
            {
                /// Completion command
                Complete,
                /// Kill command
                Kill,
                /// Non-incremental search command
                Search,
                /// Incremental search command
                IncrementalSearch,
                /// Yank command
                Yank,
                /// Digit argument command
                Digit,
                /// Other command
                Other,
            }

            impl Command 
            {
                /// Returns the category of the command
                pub fn category(&self) -> Category {
                    use self::Command::*;

                    match *self {
                        DigitArgument => Category::Digit,
                        Complete | InsertCompletions | PossibleCompletions |
                            MenuComplete | MenuCompleteBackward => Category::Complete,
                        BackwardKillLine | KillLine | BackwardKillWord | KillWord |
                            UnixWordRubout => Category::Kill,
                        ForwardSearchHistory | ReverseSearchHistory => Category::IncrementalSearch,
                        HistorySearchForward | HistorySearchBackward => Category::Search,
                        Yank | YankPop => Category::Yank,
                        _ => Category::Other
                    }
                }
            }

            impl Default for Command 
            {
                fn default() -> Self {
                    Command::Custom(Borrowed(""))
                }
            }
        }

        pub mod complete
        {
            /*!
            Provides utilities for implementing word completion. */
            use ::
            {
                *,
            };
            /*
            use std::borrow::Cow::{self, Borrowed, Owned};
            use std::fs::read_dir;
            use std::path::{is_separator, MAIN_SEPARATOR};

            use crate::prompter::Prompter;
            use crate::terminal::Terminal;
            */
            /// Represents a single possible completion
            #[derive(Clone, Debug)]
            pub struct Completion {
                /// Whole completion text
                pub completion: String,
                /// Listing display string; `None` if matches completion
                pub display: Option<String>,
                /// Completion suffix; replaces append character
                pub suffix: Suffix,
            }

            /// Specifies an optional suffix to override the default value
            #[derive(Copy, Clone, Debug, Eq, PartialEq)]
            pub enum Suffix {
                /// Use the default suffix
                Default,
                /// Use no suffix
                None,
                /// Use the given suffix
                Some(char),
            }

            impl Completion {
                /// Returns a simple `Completion` value, with display string matching
                /// completion and using the default completion suffix.
                pub fn simple(s: String) -> Completion {
                    Completion{
                        completion: s,
                        display: None,
                        suffix: Suffix::default(),
                    }
                }

                /// Returns the full completion string, including suffix, using the given
                /// default suffix if one is not assigned to this completion.
                pub fn completion(&self, def_suffix: Option<char>) -> Cow<str> {
                    let mut s = Borrowed(&self.completion[..]);

                    if let Some(suffix) = self.suffix.with_default(def_suffix) {
                        s.to_mut().push(suffix);
                    }

                    s
                }

                /// Returns the display string, including suffix
                pub fn display(&self) -> Cow<str> {
                    let mut s = Borrowed(self.display_str());

                    if let Suffix::Some(suffix) = self.suffix {
                        s.to_mut().push(suffix);
                    }

                    s
                }

                /// Returns the number of characters displayed
                pub fn display_chars(&self) -> usize {
                    let n = self.display_str().chars().count();
                    n + if self.suffix.is_some() { 1 } else { 0 }
                }

                fn display_str(&self) -> &str {
                    match self.display {
                        Some(ref dis) => dis,
                        None => &self.completion
                    }
                }
            }

            impl Suffix {
                /// Returns whether the `Suffix` value is the `Default` variant.
                pub fn is_default(&self) -> bool {
                    match *self {
                        Suffix::Default => true,
                        _ => false
                    }
                }

                /// Returns whether the `Suffix` value is the `Some(_)` variant.
                pub fn is_some(&self) -> bool {
                    match *self {
                        Suffix::Some(_) => true,
                        _ => false
                    }
                }

                /// Returns whether the `Suffix` value is the `None` variant.
                pub fn is_none(&self) -> bool {
                    match *self {
                        Suffix::None => true,
                        _ => false
                    }
                }

                /// Returns an `Option<char>`, using the given value in place of `Default`.
                pub fn with_default(self, default: Option<char>) -> Option<char> {
                    match self {
                        Suffix::None => None,
                        Suffix::Some(ch) => Some(ch),
                        Suffix::Default => default
                    }
                }
            }

            impl Default for Suffix {
                fn default() -> Suffix {
                    Suffix::Default
                }
            }

            /// Performs completion for `Prompter` when triggered by a user input sequence
            pub trait Completer<Term: Terminal>: Send + Sync {
                /// Returns the set of possible completions for the prefix `word`.
                fn complete(&self, word: &str, prompter: &Prompter<Term>,
                    start: usize, end: usize) -> Option<Vec<Completion>>;

                /// Returns the starting position of the word under the cursor.
                ///
                /// The default implementation uses `Prompter::word_break_chars()` to
                /// detect the start of a word.
                fn word_start(&self, line: &str, end: usize, prompter: &Prompter<Term>) -> usize {
                    word_break_start(&line[..end], prompter.word_break_chars())
                }

                /// Quotes a possible completion for insertion into input.
                ///
                /// The default implementation returns the word, as is.
                fn quote<'a>(&self, word: &'a str) -> Cow<'a, str> { Borrowed(word) }

                /// Unquotes a piece of user input before searching for completions.
                ///
                /// The default implementation returns the word, as is.
                fn unquote<'a>(&self, word: &'a str) -> Cow<'a, str> { Borrowed(word) }
            }

            /// `Completer` type that performs no completion
            ///
            /// This is the default `Completer` for a new `Prompter` instance.
            pub struct DummyCompleter;

            impl<Term: Terminal> Completer<Term> for DummyCompleter {
                fn complete(&self, _word: &str, _reader: &Prompter<Term>,
                        _start: usize, _end: usize) -> Option<Vec<Completion>> { None }
            }

            /// Performs completion by searching for filenames matching the word prefix.
            pub struct PathCompleter;

            impl<Term: Terminal> Completer<Term> for PathCompleter {
                fn complete(&self, word: &str, _reader: &Prompter<Term>, _start: usize, _end: usize)
                        -> Option<Vec<Completion>> {
                    Some(complete_path(word))
                }

                fn word_start(&self, line: &str, end: usize, _reader: &Prompter<Term>) -> usize {
                    escaped_word_start(&line[..end])
                }

                fn quote<'a>(&self, word: &'a str) -> Cow<'a, str> {
                    escape(word)
                }

                fn unquote<'a>(&self, word: &'a str) -> Cow<'a, str> {
                    unescape(word)
                }
            }

            /// Returns a sorted list of paths whose prefix matches the given path.
            pub fn complete_path(path: &str) -> Vec<Completion> {
                let (base_dir, fname) = split_path(path);
                let mut res = Vec::new();

                let lookup_dir = base_dir.unwrap_or(".");

                if let Ok(list) = read_dir(lookup_dir) {
                    for ent in list {
                        if let Ok(ent) = ent {
                            let ent_name = ent.file_name();

                            // TODO: Deal with non-UTF8 paths in some way
                            if let Ok(path) = ent_name.into_string() {
                                if path.starts_with(fname) {
                                    let (name, display) = if let Some(dir) = base_dir {
                                        (format!("{}{}{}", dir, MAIN_SEPARATOR, path),
                                            Some(path))
                                    } else {
                                        (path, None)
                                    };

                                    let is_dir = ent.metadata().ok()
                                        .map_or(false, |m| m.is_dir());

                                    let suffix = if is_dir {
                                        Suffix::Some(MAIN_SEPARATOR)
                                    } else {
                                        Suffix::Default
                                    };

                                    res.push(Completion{
                                        completion: name,
                                        display: display,
                                        suffix: suffix,
                                    });
                                }
                            }
                        }
                    }
                }

                res.sort_by(|a, b| a.display_str().cmp(b.display_str()));
                res
            }

            /// Returns the start position of the word that ends at the end of the string.
            pub fn word_break_start(s: &str, word_break: &str) -> usize {
                let mut start = s.len();

                for (idx, ch) in s.char_indices().rev() {
                    if word_break.contains(ch) {
                        break;
                    }
                    start = idx;
                }

                start
            }

            /// Returns the start position of a word with non-word characters escaped by
            /// backslash (`\\`).
            pub fn escaped_word_start(s: &str) -> usize {
                let mut chars = s.char_indices().rev();
                let mut start = s.len();

                while let Some((idx, ch)) = chars.next() {
                    if needs_escape(ch) {
                        let n = {
                            let mut n = 0;

                            loop {
                                let mut clone = chars.clone();

                                let ch = match clone.next() {
                                    Some((_, ch)) => ch,
                                    None => break
                                };

                                if ch == '\\' {
                                    chars = clone;
                                    n += 1;
                                } else {
                                    break;
                                }
                            }

                            n
                        };

                        if n % 2 == 0 {
                            break;
                        }
                    }

                    start = idx;
                }

                start
            }

            /// Escapes a word by prefixing a backslash (`\\`) to non-word characters.
            pub fn escape(s: &str) -> Cow<str> {
                let n = s.chars().filter(|&ch| needs_escape(ch)).count();

                if n == 0 {
                    Borrowed(s)
                } else {
                    let mut res = String::with_capacity(s.len() + n);

                    for ch in s.chars() {
                        if needs_escape(ch) {
                            res.push('\\');
                        }
                        res.push(ch);
                    }

                    Owned(res)
                }
            }

            /// Unescapes a word by removing the backslash (`\\`) from escaped characters.
            pub fn unescape(s: &str) -> Cow<str> {
                if s.contains('\\') {
                    let mut res = String::with_capacity(s.len());
                    let mut chars = s.chars();

                    while let Some(ch) = chars.next() {
                        if ch == '\\' {
                            if let Some(ch) = chars.next() {
                                res.push(ch);
                            }
                        } else {
                            res.push(ch);
                        }
                    }

                    Owned(res)
                } else {
                    Borrowed(s)
                }
            }

            fn needs_escape(ch: char) -> bool {
                match ch {
                    ' ' | '\t' | '\n' | '\\' => true,
                    _ => false
                }
            }

            fn split_path(path: &str) -> (Option<&str>, &str) {
                match path.rfind(is_separator) {
                    Some(pos) => (Some(&path[..pos]), &path[pos + 1..]),
                    None => (None, path)
                }
            }
        }

        pub mod function
        {
            /*!
            Provides the `Function` trait for implementing custom `Prompter` commands */
            use ::
            {
                *,
            };
            /*
            use std::io;

            use crate::command::Category;
            use crate::prompter::Prompter;
            use crate::terminal::Terminal;
            */
            /// Implements custom functionality for a `Prompter` command
            pub trait Function<Term: Terminal>: Send + Sync {
                /// Executes the function.
                ///
                /// `count` is the numerical argument supplied by the user; `1` by default.
                /// `prompter.explicit_arg()` may be called to determine whether this value
                /// was explicitly supplied by the user.
                ///
                /// `ch` is the final character of the sequence that triggered the command.
                /// `prompter.sequence()` may be called to determine the full sequence that
                /// triggered the command.
                fn execute(&self, prompter: &mut Prompter<Term>, count: i32, ch: char) -> io::Result<()>;

                /// Returns the command category.
                fn category(&self) -> Category { Category::Other }
            }

            impl<F, Term: Terminal> Function<Term> for F where
                    F: Send + Sync,
                    F: Fn(&mut Prompter<Term>, i32, char) -> io::Result<()> {
                fn execute(&self, prompter: &mut Prompter<Term>, count: i32, ch: char) -> io::Result<()> {
                    self(prompter, count, ch)
                }
            }
        }

        pub mod highlighting
        {
            /*!
            Syntax highlighting functionality for the terminal interface */
            use ::
            {
                ops::{ Range },
                *,
            };
            /*
            */
            /// Represents a style to be applied to a text range.
            #[derive(Debug, Clone, PartialEq, Eq)]
            pub enum Style {
                /// A style using raw ANSI color codes
                AnsiColor(String),
                /// The default terminal style
                Default,
            }

            /// A trait for providing style information for a line of text.
            pub trait Highlighter {
                /// Takes the current line buffer and returns a list of styled ranges.
                fn highlight(&self, line: &str) -> Vec<(Range<usize>, Style)>;
            }

            /// Style reset sequence
            pub const RESET_STYLE: &str = "\x1b[0m";
        }

        pub mod inputrc
        {
            /*!
            Parses configuration files in the format of GNU Readline `inputrc` */
            use ::
            {
                *,
            };
            /*
            use std::char::from_u32;
            use std::fs::File;
            use std::io::{stderr, Read, Write};
            use std::path::Path;
            use std::str::{Chars, Lines};

            use crate::chars::{ctrl, meta, parse_char_name};
            use crate::command::Command;
            */
            /// Parsed configuration directive
            #[derive(Clone, Debug)]
            pub enum Directive {
                /// Bind construct; `"input-sequence": command-or-macro`
                Bind(String, Command),
                /// Conditional construct;
                /// (`$if name=value` or `$if value`) *directives*
                /// (optional `$else` *directives*) `$endif`
                Conditional{
                    /// Value name; if `None`, value refers to application name
                    name: Option<String>,
                    /// Value to compare
                    value: String,
                    /// Group of directives evaluated when condition is true
                    then_group: Vec<Directive>,
                    /// Group of directives evaluated when condition is false
                    else_group: Vec<Directive>,
                },
                /// Set variable; `set name value`
                SetVariable(String, String),
            }

            /// Parses the named file and returns contained directives.
            ///
            /// If the file cannot be opened, `None` is returned and an error is printed
            /// to `stderr`. If any errors are encountered during parsing, they are printed
            /// to `stderr`.
            pub fn parse_file<P: ?Sized>(filename: &P) -> Option<Vec<Directive>>
                    where P: AsRef<Path> {
                let filename = filename.as_ref();

                let mut f = match File::open(filename) {
                    Ok(f) => f,
                    Err(e) => {
                        let _ = writeln!(stderr(), "lineread: {}: {}", filename.display(), e);
                        return None;
                    }
                };

                let mut buf = String::new();

                if let Err(e) = f.read_to_string(&mut buf) {
                    let _ = writeln!(stderr(), "{}: {}", filename.display(), e);
                    return None;
                }

                Some(parse_text(filename, &buf))
            }

            /// Parses some text and returns contained directives.
            ///
            /// If any errors are encountered during parsing, they are printed to `stderr`.
            pub fn parse_text<P: ?Sized>(name: &P, line: &str) -> Vec<Directive>
                    where P: AsRef<Path> {
                let mut p = Parser::new(name.as_ref(), line);
                p.parse()
            }

            struct Parser<'a> {
                lines: Lines<'a>,
                filename: &'a Path,
                line_num: usize,
            }

            enum Token<'a> {
                /// Colon; `:`
                Colon,
                /// Equal; `=`
                Equal,
                /// Conditional or other special directive; `$word`
                SpecialWord(&'a str),
                /// Double-quoted string; `"foo"`
                String(String),
                /// Bare word; `foo`
                Word(&'a str),
                /// Invalid token
                Invalid,
            }

            impl<'a> Parser<'a> {
                pub fn new(filename: &'a Path, text: &'a str) -> Parser<'a> {
                    Parser{
                        lines: text.lines(),
                        filename: filename,
                        line_num: 0,
                    }
                }

                fn next_line(&mut self) -> Option<&'a str> {
                    self.lines.next().map(|line| {
                        self.line_num += 1;
                        line.trim()
                    })
                }

                fn parse(&mut self) -> Vec<Directive> {
                    let mut dirs = Vec::new();

                    while let Some(line) = self.next_line() {
                        if line.starts_with('#') {
                            continue;
                        }

                        let mut tokens = Tokens::new(line);

                        if let Some(Token::SpecialWord("include")) = tokens.next() {
                            let path = tokens.line;

                            if let Some(d) = parse_file(Path::new(path)) {
                                dirs.extend(d);
                            }

                            continue;
                        }

                        if let Some(dir) = self.parse_line(line) {
                            dirs.push(dir);
                        }
                    }

                    dirs
                }

                fn parse_conditional(&mut self) -> (Vec<Directive>, Vec<Directive>) {
                    let mut then_group = Vec::new();
                    let mut else_group = Vec::new();
                    let mut parse_else = false;

                    loop {
                        let line = match self.next_line() {
                            Some(line) => line,
                            None => {
                                self.error("missing $endif directive");
                                break;
                            }
                        };

                        if line.starts_with('#') {
                            continue;
                        }

                        let mut tokens = Tokens::new(line);

                        let start = match tokens.next() {
                            Some(tok) => tok,
                            None => continue
                        };

                        match start {
                            Token::SpecialWord("else") => {
                                if parse_else {
                                    self.error("duplicate $else directive");
                                } else {
                                    parse_else = true;
                                }
                            }
                            Token::SpecialWord("endif") => {
                                break;
                            }
                            _ => {
                                if let Some(dir) = self.parse_line(line) {
                                    if parse_else {
                                        else_group.push(dir);
                                    } else {
                                        then_group.push(dir);
                                    }
                                }
                            }
                        }
                    }

                    (then_group, else_group)
                }

                fn parse_line(&mut self, line: &str) -> Option<Directive> {
                    let mut tokens = Tokens::new(line);

                    let start = tokens.next()?;

                    let dir = match start {
                        Token::SpecialWord("if") => {
                            let name = match tokens.next() {
                                Some(Token::Word(w)) => w,
                                _ => {
                                    self.invalid();
                                    return None;
                                }
                            };

                            let (name, value) = match tokens.next() {
                                Some(Token::Equal) => {
                                    let value = match tokens.next() {
                                        Some(Token::Word(w)) => w,
                                        None => "",
                                        _ => {
                                            self.invalid();
                                            return None;
                                        }
                                    };

                                    (Some(name), value)
                                }
                                None => (None, name),
                                _ => {
                                    self.invalid();
                                    return None;
                                }
                            };

                            let (then_group, else_group) = self.parse_conditional();

                            Directive::Conditional{
                                name: name.map(|s| s.to_owned()),
                                value: value.to_owned(),
                                then_group: then_group,
                                else_group: else_group,
                            }
                        }
                        Token::SpecialWord("else") => {
                            self.error("$else without matching $if directive");
                            return None;
                        }
                        Token::SpecialWord("endif") => {
                            self.error("$endif without matching $if directive");
                            return None;
                        }
                        Token::String(seq) => {
                            match tokens.next() {
                                Some(Token::Colon) => (),
                                _ => {
                                    self.invalid();
                                    return None;
                                }
                            }

                            match tokens.next() {
                                Some(Token::Word(value)) =>
                                    Directive::Bind(seq, Command::from_string(value)),
                                Some(Token::String(out)) =>
                                    Directive::Bind(seq, Command::Macro(out.to_owned().into())),
                                _ => {
                                    self.invalid();
                                    return None;
                                }
                            }
                        }
                        Token::Word("set") => {
                            let name = match tokens.next() {
                                Some(Token::Word(w)) => w,
                                _ => {
                                    self.invalid();
                                    return None;
                                }
                            };

                            let rest = tokens.line;

                            let value = match tokens.next() {
                                Some(Token::String(s)) => s,
                                Some(Token::Word(_)) => rest.to_owned(),
                                _ => {
                                    self.invalid();
                                    return None;
                                }
                            };

                            Directive::SetVariable(name.to_owned(), value)
                        }
                        Token::Word(name) => {
                            match tokens.next() {
                                Some(Token::Colon) => (),
                                _ => {
                                    self.invalid();
                                    return None;
                                }
                            }

                            let seq = match parse_char_name(name) {
                                Some(seq) => seq,
                                None => {
                                    self.invalid();
                                    return None;
                                }
                            };

                            match tokens.next() {
                                Some(Token::Word(value)) =>
                                    Directive::Bind(seq, Command::from_string(value)),
                                Some(Token::String(macro_seq)) =>
                                    Directive::Bind(seq, Command::Macro(macro_seq.to_owned().into())),
                                _ => {
                                    self.invalid();
                                    return None;
                                }
                            }
                        }
                        _ => {
                            self.invalid();
                            return None;
                        }
                    };

                    Some(dir)
                }

                fn error(&self, msg: &str) {
                    let _ = writeln!(stderr(),
                        "lineread: {} line {}: {}", self.filename.display(), self.line_num, msg);
                }

                fn invalid(&self) {
                    self.error("invalid directive");
                }
            }

            struct Tokens<'a> {
                line: &'a str,
            }

            impl<'a> Tokens<'a> {
                fn new(line: &str) -> Tokens {
                    Tokens{
                        line: line,
                    }
                }
            }

            impl<'a> Iterator for Tokens<'a> {
                type Item = Token<'a>;

                fn next(&mut self) -> Option<Token<'a>> {
                    let ch = self.line.chars().next()?;

                    let tok = match ch {
                        ':' => {
                            self.line = self.line[1..].trim_start();
                            Token::Colon
                        }
                        '=' => {
                            self.line = self.line[1..].trim_start();
                            Token::Equal
                        }
                        '$' => {
                            let (word, rest) = parse_word(&self.line[1..]);
                            self.line = rest.trim_start();
                            Token::SpecialWord(word)
                        }
                        '"' => {
                            let (tok, rest) = parse_string(self.line);
                            self.line = rest.trim_start();
                            tok
                        }
                        _ => {
                            let (word, rest) = parse_word(self.line);
                            self.line = rest.trim_start();
                            Token::Word(word)
                        }
                    };

                    Some(tok)
                }
            }

            fn parse_escape(chars: &mut Chars) -> Option<String> {
                let ch = chars.next()?;

                let esc = match ch {
                    'C'  => {
                        match chars.next() {
                            Some('-') => (),
                            _ => return None
                        }
                        ctrl(chars.next()?)
                    }
                    'M'  => {
                        match chars.next() {
                            Some('-') => (),
                            _ => return None
                        }
                        return Some(meta(chars.next()?));
                    }
                    'e'  => '\x1b',
                    '\\' => '\\',
                    '"'  => '"',
                    '\'' => '\'',
                    'a'  => '\x07',
                    'b'  => '\x08',
                    'd'  => '\x7f',
                    'f'  => '\x0c',
                    'n'  => '\n',
                    'r'  => '\r',
                    't'  => '\t',
                    'u'  => {
                        match chars.next() {
                            Some('{') => (),
                            _ => return None
                        }

                        let mut n = 0;

                        for _ in 0..6 {
                            match chars.clone().next().and_then(|ch| ch.to_digit(16)) {
                                Some(digit) => {
                                    chars.next();
                                    n *= 16;
                                    n += digit;
                                }
                                None => break
                            }
                        }

                        match chars.next() {
                            Some('}') => (),
                            _ => return None
                        }

                        from_u32(n)?
                    }
                    'v'  => '\x0b',
                    'x'  => {
                        let mut n = 0;

                        for _ in 0..2 {
                            // Peek the next character
                            let digit = chars.clone().next()?.to_digit(16)? as u8;

                            // Consume if valid
                            chars.next();

                            n <<= 4;
                            n |= digit;
                        }

                        n as char
                    }
                    '0' ..= '3' => {
                        let mut n = ch as u8 - b'0';

                        for _ in 0..2 {
                            // Peek the next character
                            let digit = chars.clone().next()?.to_digit(8)? as u8;

                            // Consume if valid
                            chars.next();

                            n <<= 3;
                            n |= digit;
                        }

                        n as char
                    }
                    _ => return None
                };

                Some(esc.to_string())
            }

            fn parse_string(s: &str) -> (Token, &str) {
                let mut chars = s.chars();
                let mut res = String::new();

                // Skip open quote
                chars.next();

                while let Some(ch) = chars.next() {
                    match ch {
                        '"' => return (Token::String(res), chars.as_str()),
                        '\\' => {
                            match parse_escape(&mut chars) {
                                Some(esc) => {
                                    res.push_str(&esc);
                                }
                                None => break
                            }
                        }
                        ch => res.push(ch)
                    }
                }

                (Token::Invalid, "")
            }

            fn parse_word(s: &str) -> (&str, &str) {
                let mut chars = s.char_indices();

                loop {
                    let mut clone = chars.clone();

                    match clone.next() {
                        Some((ind, ch)) if ch == ':' || ch == '"' || ch == '=' ||
                                ch.is_whitespace() => {
                            return (&s[..ind], &s[ind..]);
                        }
                        None => {
                            return (s, "");
                        }
                        _ => ()
                    }

                    chars = clone;
                }
            }
        }

        pub mod interface
        {
            /*!
            Provides the main interface to interactive input reader. */
            use ::
            {
                *,
            };
            /*
            use std::borrow::Cow;
            use std::fmt;
            use std::fs::{File, OpenOptions};
            use std::io::{
                self, BufRead, BufReader, BufWriter,
                Read as _, Seek, SeekFrom, Write as _,
            };
            use std::path::Path;
            use std::sync::{Arc, Mutex, MutexGuard};
            use std::time::Duration;

            use crate::command::Command;
            use crate::complete::Completer;
            use crate::function::Function;
            use crate::highlighting::Highlighter;
            use crate::inputrc::Directive;
            use crate::reader::{Read, Reader, ReadLock, ReadResult};
            use crate::terminal::{DefaultTerminal, Signal, Terminal};
            use crate::variables::Variable;
            use crate::writer::{Write, Writer, WriteLock};
            */
            /// The main interface to input reading and other terminal operations.
            pub struct Interface<Term: Terminal> {
                term: Term,
                write: Mutex<Write>,
                read: Mutex<Read<Term>>,
                highlighter: Option<Arc<dyn Highlighter + Send + Sync>>,
            }

            impl Interface<DefaultTerminal> {
                /// Creates a new `Interface` with the given application name.
                pub fn new<T>(application: T) -> io::Result<Interface<DefaultTerminal>>
                        where T: Into<Cow<'static, str>> {
                    let term = DefaultTerminal::new()?;
                    Interface::with_term(application, term)
                }
            }

            impl<Term: Terminal> Interface<Term> {
                /// Creates a new `Interface` instance with a particular terminal implementation.
                ///
                /// To use the default terminal interface, call `Interface::new` instead.
                pub fn with_term<T>(application: T, term: Term) -> io::Result<Interface<Term>>
                        where T: Into<Cow<'static, str>> {
                    let size = term.lock_write().size()?;
                    let read = Read::new(&term, application.into());

                    Ok(Interface{
                        term: term,
                        write: Mutex::new(Write::new(size)),
                        read: Mutex::new(read),
                        highlighter: None,
                    })
                }

                /// Acquires the read lock and returns a `Reader` instance.
                ///
                /// The `Reader` instance allows exclusive access to variables, bindings,
                /// and command implementations.
                pub fn lock_reader(&self) -> Reader<Term> {
                    Reader::new(self, self.lock_read())
                }

                /// Acquires the write lock and returns a `Writer` instance.
                ///
                /// If a `read_line` call is in progress, this method will move the cursor
                /// to a new line after the prompt, allowing output to be written without
                /// corrupting the prompt text. The prompt will be redrawn when the `Writer`
                /// instance is dropped.
                ///
                /// To instead erase the prompt and write text, use [`lock_writer_erase`].
                ///
                /// [`lock_writer_erase`]: #method.lock_writer_erase
                pub fn lock_writer_append(&self) -> io::Result<Writer<Term>> {
                    Writer::with_lock(self.lock_write(), false)
                }

                /// Acquires the write lock and returns a `Writer` instance.
                ///
                /// If a `read_line` call is in progress, this method will erase the prompt,
                /// allowing output to be written without corrupting the prompt text.
                /// The prompt will be redrawn when the `Writer` instance is dropped.
                ///
                /// To instead write text after the prompt, use [`lock_writer_append`].
                ///
                /// [`lock_writer_append`]: #method.lock_writer_append
                pub fn lock_writer_erase(&self) -> io::Result<Writer<Term>> {
                    Writer::with_lock(self.lock_write(), true)
                }

                fn lock_read(&self) -> ReadLock<Term> {
                    ReadLock::new(
                        self.term.lock_read(),
                        self.read.lock().expect("Interface::lock_read"))
                }

                pub(crate) fn lock_write(&self) -> WriteLock<Term> {
                    WriteLock::new(
                        self.term.lock_write(),
                        self.write.lock().expect("Interface::lock_write"),
                        self.highlighter.clone(),
                    )
                }

                pub(crate) fn lock_write_data(&self) -> MutexGuard<Write> {
                    self.write.lock().expect("Interface::lock_write_data")
                }
            }

            /// ## Locking
            ///
            /// The following methods internally acquire the read lock.
            ///
            /// The lock is released before the method returns.
            ///
            /// If the read lock is already held, e.g. because a `read_line` call is in
            /// progress, the method will block until the lock is released.
            impl<Term: Terminal> Interface<Term> {
                /// Interactively reads a line from the terminal device.
                ///
                /// User input is collected until one of the following conditions is met:
                ///
                /// * If the user issues an end-of-file, `ReadResult::Eof` is returned.
                /// * When the user inputs a newline (`'\n'`), the resulting input
                ///   (not containing a trailing newline character) is returned as
                ///   `ReadResult::Input(_)`.
                /// * When a reported signal (see [`set_report_signal`]) is received,
                ///   it is returned as `ReadResult::Signal(_)`. The `read_line` operation may
                ///   then be either resumed with another call to `read_line` or ended by
                ///   calling [`cancel_read_line`].
                ///
                /// [`cancel_read_line`]: #method.cancel_read_line
                /// [`set_report_signal`]: #method.set_report_signal
                pub fn read_line(&self) -> io::Result<ReadResult> {
                    self.lock_reader().read_line()
                }

                /// Performs one step of the interactive `read_line` loop.
                ///
                /// This method can be used to drive the `read_line` process asynchronously.
                /// It will wait for input only up to the specified duration, then process
                /// any available input from the terminal.
                ///
                /// If the user completes the input process, `Ok(Some(result))` is returned.
                /// Otherwise, `Ok(None)` is returned to indicate that the interactive loop
                /// may continue.
                ///
                /// The interactive prompt may be cancelled prematurely using the
                /// [`cancel_read_line`] method.
                ///
                /// See [`read_line`] for details on the return value.
                ///
                /// [`cancel_read_line`]: #method.cancel_read_line
                /// [`read_line`]: #method.read_line
                pub fn read_line_step(&self, timeout: Option<Duration>)
                        -> io::Result<Option<ReadResult>> {
                    self.lock_reader().read_line_step(timeout)
                }

                /// Cancels an in-progress `read_line` operation.
                ///
                /// This method will reset internal data structures to their original state
                /// and move the terminal cursor to a new, empty line.
                ///
                /// This method is called to prematurely end the interactive loop when
                /// using the [`read_line_step`] method.
                ///
                /// It is not necessary to call this method if using the [`read_line`] method.
                ///
                /// [`read_line`]: #method.read_line
                /// [`read_line_step`]: #method.read_line_step
                pub fn cancel_read_line(&self) -> io::Result<()> {
                    self.lock_reader().cancel_read_line()
                }

                /// Returns a clone of the current completer instance.
                pub fn completer(&self) -> Arc<dyn Completer<Term>> {
                    self.lock_reader().completer().clone()
                }

                /// Replaces the current completer, returning the previous instance.
                pub fn set_completer(&self, completer: Arc<dyn Completer<Term>>)
                        -> Arc<dyn Completer<Term>> {
                    self.lock_reader().set_completer(completer)
                }

                /// Returns the value of the named variable or `None`
                /// if no such variable exists.
                pub fn get_variable(&self, name: &str) -> Option<Variable> {
                    self.lock_reader().get_variable(name)
                }

                /// Sets the value of the named variable and returns the previous
                /// value.
                ///
                /// If `name` does not refer to a variable or the `value` is not
                /// a valid value for the variable, `None` is returned.
                pub fn set_variable(&self, name: &str, value: &str) -> Option<Variable> {
                    self.lock_reader().set_variable(name, value)
                }

                /// Returns whether the given `Signal` is ignored.
                pub fn ignore_signal(&self, signal: Signal) -> bool {
                    self.lock_reader().ignore_signal(signal)
                }

                /// Sets whether the given `Signal` will be ignored.
                pub fn set_ignore_signal(&self, signal: Signal, set: bool) {
                    self.lock_reader().set_ignore_signal(signal, set)
                }

                /// Returns whether the given `Signal` is reported.
                pub fn report_signal(&self, signal: Signal) -> bool {
                    self.lock_reader().report_signal(signal)
                }

                /// Sets whether the given `Signal` is reported.
                pub fn set_report_signal(&self, signal: Signal, set: bool) {
                    self.lock_reader().set_report_signal(signal, set)
                }

                /// Binds a sequence to a command.
                ///
                /// Returns the previously bound command.
                pub fn bind_sequence<T>(&self, seq: T, cmd: Command) -> Option<Command>
                        where T: Into<Cow<'static, str>> {
                    self.lock_reader().bind_sequence(seq, cmd)
                }

                /// Binds a sequence to a command, if and only if the given sequence
                /// is not already bound to a command.
                ///
                /// Returns `true` if a new binding was created.
                pub fn bind_sequence_if_unbound<T>(&self, seq: T, cmd: Command) -> bool
                        where T: Into<Cow<'static, str>> {
                    self.lock_reader().bind_sequence_if_unbound(seq, cmd)
                }

                /// Removes a binding for the given sequence.
                ///
                /// Returns the previously bound command.
                pub fn unbind_sequence(&self, seq: &str) -> Option<Command> {
                    self.lock_reader().unbind_sequence(seq)
                }

                /// Defines a named function to which sequences may be bound.
                ///
                /// The name should consist of lowercase ASCII letters and numbers,
                /// containing no spaces, with words separated by hyphens. However,
                /// this is not a requirement.
                ///
                /// Returns the function previously defined with the same name.
                pub fn define_function<T>(&self, name: T, cmd: Arc<dyn Function<Term>>)
                        -> Option<Arc<dyn Function<Term>>> where T: Into<Cow<'static, str>> {
                    self.lock_reader().define_function(name, cmd)
                }

                /// Removes a function defined with the given name.
                ///
                /// Returns the defined function.
                pub fn remove_function(&self, name: &str) -> Option<Arc<dyn Function<Term>>> {
                    self.lock_reader().remove_function(name)
                }

                /// Evaluates a series of configuration directives.
                pub fn evaluate_directives(&self, dirs: Vec<Directive>) {
                    self.lock_reader().evaluate_directives(&self.term, dirs)
                }

                /// Evaluates a single configuration directive.
                pub fn evaluate_directive(&self, dir: Directive) {
                    self.lock_reader().evaluate_directive(&self.term, dir)
                }
            }

            /// ## Locking
            ///
            /// The following methods internally acquire the write lock.
            ///
            /// The lock is released before the method returns.
            ///
            /// If the write lock is already held, the method will block until it is released.
            impl<Term: Terminal> Interface<Term> {
                /// Returns the current input buffer.
                pub fn buffer(&self) -> String {
                    self.lock_write().buffer.to_owned()
                }

                /// Returns the current number of history entries.
                pub fn history_len(&self) -> usize {
                    self.lock_write().history_len()
                }

                /// Returns the maximum number of history entries.
                ///
                /// Not to be confused with [`history_len`], which returns the *current*
                /// number of history entries.
                ///
                /// [`history_len`]: #method.history_len
                pub fn history_size(&self) -> usize {
                    self.lock_write().history_size()
                }

                /// Save history entries to the specified file.
                ///
                /// If the file does not exist, it is created and all history entries are
                /// written to the new file.
                ///
                /// If the file does exist, entries added since the last call to `save_history`
                /// (or since the start of the application) are appended to the named file.
                ///
                /// If the file would contain more than `self.history_size()` entries,
                /// it is first truncated, discarding the oldest entries.
                pub fn save_history<P: AsRef<Path>>(&self, path: P) -> io::Result<()> {
                    let path = path.as_ref();
                    let mut w = self.lock_write();

                    if !path.exists() || w.history_size() == !0 {
                        self.append_history(path, &w)?;
                    } else {
                        self.rewrite_history(path, &w)?;
                    }

                    w.reset_new_history();
                    Ok(())
                }

                fn append_history<P: AsRef<Path>>(&self, path: P, w: &WriteLock<Term>)
                        -> io::Result<()> {
                    let file = OpenOptions::new()
                        .append(true)
                        .create(true)
                        .open(path.as_ref())?;

                    self.append_history_to(&file, w)
                }

                fn append_history_to(&self, file: &File, w: &WriteLock<Term>) -> io::Result<()> {
                    let mut wtr = BufWriter::new(file);

                    for entry in w.new_history() {
                        wtr.write_all(entry.as_bytes())?;
                        wtr.write_all(b"\n")?;
                    }

                    wtr.flush()
                }

                fn rewrite_history<P: AsRef<Path>>(&self, path: P, w: &WriteLock<Term>)
                        -> io::Result<()> {
                    fn nth_line(s: &str, n: usize) -> Option<usize> {
                        let start = s.as_ptr() as usize;

                        s.lines().nth(n)
                            .map(|s| s.as_ptr() as usize - start)
                    }

                    let mut file = OpenOptions::new()
                        .create(true)
                        .read(true)
                        .write(true)
                        .open(path.as_ref())?;

                    let mut hist = String::new();

                    file.read_to_string(&mut hist)?;

                    let n_lines = hist.lines().count();
                    let n = n_lines.saturating_sub(
                        w.history_size() - w.new_history_entries());

                    if n != 0 {
                        if let Some(pos) = nth_line(&hist, n) {
                            file.seek(SeekFrom::Start(0))?;
                            file.write_all(hist[pos..].as_bytes())?;

                            let n = file.seek(SeekFrom::Current(0))?;
                            file.set_len(n)?;
                        }
                    }

                    self.append_history_to(&file, w)
                }

                /// Load history entries from the specified file.
                pub fn load_history<P: AsRef<Path>>(&self, path: P) -> io::Result<()> {
                    let mut writer = self.lock_write();

                    let file = File::open(&path)?;
                    let rdr = BufReader::new(file);

                    for line in rdr.lines() {
                        writer.add_history(line?);
                    }

                    writer.reset_new_history();

                    Ok(())
                }

                /// Writes formatted text to the terminal display.
                ///
                /// This method enables `Interface` to be used as the receiver to
                /// the [`writeln!`] macro.
                ///
                /// If the text contains any unprintable characters (e.g. escape sequences),
                /// those characters will be escaped before printing.
                ///
                /// # Notes
                ///
                /// If this method is called during a [`read_line`] call, the prompt will
                /// first be erased, then restored after the given string is printed.
                /// Therefore, the written text should end with a newline. If the `writeln!`
                /// macro is used, a newline is automatically added to the end of the text.
                ///
                /// To instead write text after the prompt, use [`lock_writer_append`].
                ///
                /// [`read_line`]: #method.read_line
                /// [`writeln!`]: https://doc.rust-lang.org/std/macro.writeln.html
                /// [`lock_writer_append`]: #method.lock_writer_append
                pub fn write_fmt(&self, args: fmt::Arguments) -> io::Result<()> {
                    let s = args.to_string();
                    self.write_str(&s)
                }

                fn write_str(&self, line: &str) -> io::Result<()> {
                    self.lock_writer_erase()?.write_str(line)
                }
            }

            /// ## Locking
            ///
            /// The following methods internally acquire both the read and write locks.
            ///
            /// The locks are released before the method returns.
            ///
            /// If either lock is already held, the method will block until it is released.
            impl<Term: Terminal> Interface<Term> {
                /// Sets the prompt that will be displayed when `read_line` is called.
                ///
                /// # Notes
                ///
                /// If `prompt` contains any terminal escape sequences (e.g. color codes),
                /// such escape sequences should be immediately preceded by the character
                /// `'\x01'` and immediately followed by the character `'\x02'`.
                pub fn set_prompt(&self, prompt: &str) -> io::Result<()> {
                    self.lock_reader().set_prompt(prompt)
                }

                /// Sets the input buffer to the given string.
                ///
                /// # Notes
                ///
                /// To prevent invalidating the cursor, this method sets the cursor
                /// position to the end of the new buffer.
                pub fn set_buffer(&self, buf: &str) -> io::Result<()> {
                    self.lock_reader().set_buffer(buf)
                }

                /// Sets the cursor position in the input buffer.
                ///
                /// # Panics
                ///
                /// If the given position is out of bounds or not on a `char` boundary.
                pub fn set_cursor(&self, pos: usize) -> io::Result<()> {
                    self.lock_reader().set_cursor(pos)
                }

                // History methods don't appear to require a read lock, but do acquire
                // it nonetheless because any operation that truncates history may interefere
                // with an ongoing `read_line` call. Therefore, the read lock is acquired
                // to check whether a `read_line` call is in progress.

                /// Adds a line to history.
                ///
                /// If a `read_line` call is in progress, this method has no effect.
                pub fn add_history(&self, line: String) {
                    self.lock_reader().add_history(line);
                }

                /// Adds a line to history, unless it is identical to the most recent entry.
                ///
                /// If a `read_line` call is in progress, this method has no effect.
                pub fn add_history_unique(&self, line: String) {
                    self.lock_reader().add_history_unique(line);
                }

                /// Removes all history entries.
                ///
                /// If a `read_line` call is in progress, this method has no effect.
                pub fn clear_history(&self) {
                    self.lock_reader().clear_history();
                }

                /// Removes the history entry at the given index.
                ///
                /// If the index is out of bounds, this method has no effect.
                ///
                /// If a `read_line` call is in progress, this method has no effect.
                pub fn remove_history(&self, idx: usize) {
                    self.lock_reader().remove_history(idx);
                }

                /// Sets the maximum number of history entries.
                ///
                /// If `n` is less than the current number of history entries,
                /// the oldest entries are truncated to meet the given requirement.
                ///
                /// If a `read_line` call is in progress, this method has no effect.
                pub fn set_history_size(&self, n: usize) {
                    self.lock_reader().set_history_size(n);
                }

                /// Truncates history to the only the most recent `n` entries.
                ///
                /// If a `read_line` call is in progress, this method has no effect.
                pub fn truncate_history(&self, n: usize) {
                    self.lock_reader().truncate_history(n);
                }

                /// Sets the syntax highlighter for the input line.
                pub fn set_highlighter(&mut self, highlighter: Arc<dyn Highlighter + Send + Sync>) {
                    self.highlighter = Some(highlighter);
                }
            }
        }

        pub mod memory
        {
            /*!
            Implements an in-memory `Terminal` interface. */
            use ::
            {
                *,
            };
            /*
            use std::cmp::min;
            use std::iter::repeat;
            use std::io;
            use std::sync::{Arc, Mutex, MutexGuard};
            use std::time::Duration;

            use crate::terminal::{
                CursorMode, RawRead, SignalSet, Size,
                Terminal, TerminalReader, TerminalWriter,
            };
            */
            /// Default size of a `MemoryTerminal` buffer
            pub const DEFAULT_SIZE: Size = Size
            {
                columns: 80,
                lines: 24,
            };

            /// Implements an in-memory `Terminal` interface
            ///
            /// The contents of a `MemoryTerminal` are shared. That is, cloning
            /// a `MemoryTerminal` value will share the contained terminal buffer.
            #[derive(Clone, Debug)]
            pub struct MemoryTerminal {
                write: Arc<Mutex<Writer>>,
                read: Arc<Mutex<Reader>>,
            }

            #[derive(Debug)]
            struct Writer {
                memory: Vec<char>,
                col: usize,
                line: usize,
                cursor_mode: CursorMode,
                size: Size,
            }

            #[derive(Debug)]
            struct Reader {
                input: Vec<u8>,
                resize: Option<Size>,
            }

            /// Holds the lock on read operations of a `MemoryTerminal`.
            pub struct MemoryReadGuard<'a>(MutexGuard<'a, Reader>);

            /// Holds the lock on write operations of a `MemoryTerminal`.
            pub struct MemoryWriteGuard<'a>(MutexGuard<'a, Writer>);

            impl MemoryTerminal {
                /// Returns a new `MemoryTerminal` with the default buffer size.
                pub fn new() -> MemoryTerminal {
                    MemoryTerminal::default()
                }

                /// Returns a new `MemoryTerminal` with the given buffer size.
                ///
                /// # Panics
                ///
                /// If either of the `lines` or `columns` fields are `0`.
                pub fn with_size(size: Size) -> MemoryTerminal {
                    MemoryTerminal{
                        read: Arc::new(Mutex::new(Reader::new())),
                        write: Arc::new(Mutex::new(Writer::new(size))),
                    }
                }

                /// Clears the terminal buffer and places the cursor at `(0, 0)`.
                pub fn clear_all(&self) {
                    self.lock_writer().clear_all();
                }

                /// Clears all characters beginning at the cursor and ending at buffer end.
                pub fn clear_to_end(&self) {
                    self.lock_writer().clear_to_end();
                }

                /// Clears the input buffer.
                pub fn clear_input(&self) {
                    self.lock_reader().clear_input();
                }

                /// Returns whether any input remains to be read.
                pub fn has_input(&self) -> bool {
                    self.lock_reader().has_input()
                }

                /// Returns an iterator over lines in the buffer.
                ///
                /// # Notes
                ///
                /// The returned iterator immutably borrows the contents of the
                /// `MemoryTerminal`. Attempting to perform a mutating operation on the
                /// parent `MemoryTerminal` while the `Lines` iterator lives will cause
                /// a panic.
                pub fn lines(&self) -> Lines {
                    Lines{
                        writer: self.lock_writer(),
                        line: 0,
                    }
                }

                /// Moves the cursor up `n` cells.
                pub fn move_up(&self, n: usize) {
                    self.lock_writer().move_up(n);
                }

                /// Moves the cursor down `n` cells.
                pub fn move_down(&self, n: usize) {
                    self.lock_writer().move_down(n);
                }

                /// Moves the cursor left `n` cells.
                pub fn move_left(&self, n: usize) {
                    self.lock_writer().move_left(n);
                }

                /// Moves the cursor right `n` cells.
                pub fn move_right(&self, n: usize) {
                    self.lock_writer().move_right(n);
                }

                /// Moves the cursor to the first column of the current line.
                pub fn move_to_first_column(&self) {
                    self.lock_writer().move_to_first_column()
                }

                /// Pushes a character sequence to the back of the input queue.
                pub fn push_input(&self, s: &str) {
                    self.lock_reader().push_input(s.as_bytes());
                }

                /// Reads some input from the input buffer.
                pub fn read_input(&self, buf: &mut [u8]) -> usize {
                    self.lock_reader().read_input(buf)
                }

                /// Changes the size of the terminal buffer.
                /// The buffer will be truncated or filled with spaces, as necessary.
                ///
                /// # Panics
                ///
                /// If either of the `lines` or `columns` fields are `0` or if the area
                /// exceeds `usize` maximum.
                pub fn resize(&self, new_size: Size) {
                    self.lock_writer().resize(new_size);
                    self.lock_reader().resize(new_size);
                }

                /// Moves the contents of the buffer up `n` lines.
                /// The first `n` lines of text will be erased.
                pub fn scroll_up(&self, n: usize) {
                    self.lock_writer().scroll_up(n);
                }

                /// Returns the `(line, column)` position of the cursor.
                pub fn cursor(&self) -> (usize, usize) {
                    let r = self.lock_writer();
                    (r.line, r.col)
                }

                /// Sets the cursor mode.
                pub fn set_cursor_mode(&self, mode: CursorMode) {
                    self.lock_writer().set_cursor_mode(mode);
                }

                /// Returns the cursor mode.
                pub fn cursor_mode(&self) -> CursorMode {
                    self.lock_writer().cursor_mode()
                }

                /// Returns the size of the terminal buffer.
                pub fn size(&self) -> Size {
                    self.lock_writer().size
                }

                /// Writes some text into the buffer.
                ///
                /// If the text extends beyond the length of the current line without a
                /// newline character (`'\n'`), the extraneous text will be dropped.
                pub fn write(&self, s: &str) {
                    self.lock_writer().write(s);
                }

                fn lock_reader(&self) -> MutexGuard<Reader> {
                    self.read.lock().unwrap()
                }

                fn lock_writer(&self) -> MutexGuard<Writer> {
                    self.write.lock().unwrap()
                }
            }

            impl Default for MemoryTerminal {
                fn default() -> MemoryTerminal {
                    MemoryTerminal::with_size(DEFAULT_SIZE)
                }
            }

            impl Reader {
                fn new() -> Reader {
                    Reader{
                        input: Vec::new(),
                        resize: None,
                    }
                }

                fn has_input(&mut self) -> bool {
                    self.resize.is_some() || !self.input.is_empty()
                }

                fn clear_input(&mut self) {
                    self.input.clear();
                }

                fn push_input(&mut self, bytes: &[u8]) {
                    self.input.extend(bytes);
                }

                fn read_input(&mut self, buf: &mut [u8]) -> usize {
                    let n = min(buf.len(), self.input.len());

                    buf[..n].copy_from_slice(&self.input[..n]);
                    let _ = self.input.drain(..n);
                    n
                }

                fn resize(&mut self, size: Size) {
                    self.resize = Some(size);
                }
            }

            impl Writer {
                fn new(size: Size) -> Writer {
                    assert!(size.lines != 0 && size.columns != 0,
                        "zero-area terminal buffer: {:?}", size);

                    let n_chars = size.lines * size.columns;

                    Writer{
                        memory: vec![' '; n_chars],
                        col: 0,
                        line: 0,
                        cursor_mode: CursorMode::Normal,
                        size: size,
                    }
                }

                fn clear_all(&mut self) {
                    for ch in &mut self.memory {
                        *ch = ' ';
                    }
                    self.col = 0;
                    self.line = 0;
                }

                fn clear_to_end(&mut self) {
                    let idx = self.index();

                    for ch in &mut self.memory[idx..] {
                        *ch = ' ';
                    }
                }

                fn move_up(&mut self, n: usize) {
                    self.line = self.line.saturating_sub(n);
                }

                fn move_down(&mut self, n: usize) {
                    self.line = min(self.size.lines - 1, self.line + n);
                }

                fn move_left(&mut self, n: usize) {
                    self.col = self.col.saturating_sub(n);
                }

                fn move_right(&mut self, n: usize) {
                    self.col = min(self.size.columns - 1, self.col + n);
                }

                fn move_to_first_column(&mut self) {
                    self.col = 0;
                }

                fn resize(&mut self, new_size: Size) {
                    if self.size != new_size {
                        let n_chars = new_size.lines.checked_mul(new_size.columns)
                            .unwrap_or_else(|| panic!("terminal size too large: {:?}", new_size));

                        assert!(n_chars != 0, "zero-area terminal buffer: {:?}", new_size);

                        let mut new_buf = Vec::with_capacity(n_chars);

                        let (n_copy, n_extra) = if new_size.columns > self.size.columns {
                            (self.size.columns, new_size.columns - self.size.columns)
                        } else {
                            (new_size.columns, 0)
                        };

                        for line in self.memory.chunks(self.size.columns).take(new_size.lines) {
                            new_buf.extend(&line[..n_copy]);
                            new_buf.extend(repeat(' ').take(n_extra));
                        }

                        if new_size.lines > self.size.lines {
                            let n_lines = new_size.lines - self.size.lines;
                            new_buf.extend(repeat(' ').take(n_lines * new_size.columns));
                        }

                        debug_assert_eq!(new_buf.len(), n_chars);

                        self.col = min(self.col, new_size.columns);
                        self.line = min(self.line, new_size.lines);
                        self.size = new_size;
                        self.memory = new_buf;
                    }
                }

                fn scroll_up(&mut self, n: usize) {
                    let chars = min(self.memory.len(), self.size.columns * n);
                    self.memory.drain(..chars);
                    self.memory.extend(repeat(' ').take(chars));
                    self.line = self.line.saturating_sub(n);
                }

                fn set_cursor_mode(&mut self, mode: CursorMode) {
                    self.cursor_mode = mode;
                }

                fn cursor_mode(&self) -> CursorMode {
                    self.cursor_mode
                }

                fn write(&mut self, s: &str) {
                    for ch in s.chars() {
                        if ch == '\n' {
                            self.advance_line();
                        } else if ch == '\r' {
                            self.col = 0;
                        } else {
                            self.write_char(ch);
                        }
                    }
                }

                fn advance_line(&mut self) {
                    self.line += 1;
                    self.col = 0;
                    if self.line == self.size.lines {
                        self.scroll_up(1);
                    }
                }

                fn write_char(&mut self, ch: char) {
                    if self.col >= self.size.columns {
                        self.advance_line();
                    }

                    let idx = self.index();
                    self.memory[idx] = ch;
                    self.col += 1;
                }

                fn index(&self) -> usize {
                    self.line * self.size.columns + self.col
                }
            }

            /// Iterator over lines in a `MemoryTerminal` buffer.
            ///
            /// Note that while this value behaves as an iterator, it cannot implement
            /// the `Iterator` trait because its yielded values borrow `self`.
            pub struct Lines<'a> {
                writer: MutexGuard<'a, Writer>,
                line: usize,
            }

            impl<'a> Lines<'a> {
                /// Returns the next line in the buffer.
                pub fn next(&mut self) -> Option<&[char]> {
                    if self.line >= self.writer.size.lines {
                        None
                    } else {
                        let start = self.writer.size.columns * self.line;
                        self.line += 1;
                        let end = self.writer.size.columns * self.line;

                        Some(&self.writer.memory[start..end])
                    }
                }

                /// Returns the number of lines remaining in the iterator.
                pub fn lines_remaining(&self) -> usize {
                    self.writer.size.lines - self.line
                }
            }

            impl Terminal for MemoryTerminal {
                // No preparation needed for in-memory terminal
                type PrepareState = ();
                //type Reader = MemoryReadGuard;
                //type Writer = MemoryWriteGuard;

                fn name(&self) -> &str { "memory-terminal" }

                fn lock_read<'a>(&'a self) -> Box<dyn TerminalReader<Self> + 'a> {
                    Box::new(MemoryReadGuard(self.lock_reader()))
                }

                fn lock_write<'a>(&'a self) -> Box<dyn TerminalWriter<Self> + 'a> {
                    Box::new(MemoryWriteGuard(self.lock_writer()))
                }
            }

            impl<'a> TerminalReader<MemoryTerminal> for MemoryReadGuard<'a> {
                fn wait_for_input(&mut self, _timeout: Option<Duration>) -> io::Result<bool> {
                    Ok(!self.0.input.is_empty())
                }

                fn prepare(&mut self, _block_signals: bool, _report_signals: SignalSet)
                        -> io::Result<()> { Ok(()) }

                unsafe fn prepare_with_lock(&mut self,
                        _lock: &mut dyn TerminalWriter<MemoryTerminal>,
                        _block_signals: bool, _report_signals: SignalSet)
                        -> io::Result<()> { Ok(()) }

                fn restore(&mut self, _state: ()) -> io::Result<()> { Ok(()) }

                unsafe fn restore_with_lock(&mut self,
                        _lock: &mut dyn TerminalWriter<MemoryTerminal>, _state: ())
                        -> io::Result<()> { Ok(()) }

                fn read(&mut self, buf: &mut Vec<u8>) -> io::Result<RawRead> {
                    if let Some(size) = self.0.resize.take() {
                        return Ok(RawRead::Resize(size));
                    }

                    buf.reserve(16);

                    let cap = buf.capacity();
                    let len = buf.len();
                    let n;

                    unsafe {
                        buf.set_len(cap);
                        n = self.0.read_input(&mut buf[len..]);
                        buf.set_len(len + n);
                    }

                    Ok(RawRead::Bytes(n))
                }
            }

            impl<'a> TerminalWriter<MemoryTerminal> for MemoryWriteGuard<'a> {
                fn size(&self) -> io::Result<Size> {
                    Ok(self.0.size)
                }

                fn clear_screen(&mut self) -> io::Result<()> {
                    self.0.clear_all();
                    Ok(())
                }

                fn clear_to_screen_end(&mut self) -> io::Result<()> {
                    self.0.clear_to_end();
                    Ok(())
                }

                fn move_up(&mut self, n: usize) -> io::Result<()> {
                    self.0.move_up(n);
                    Ok(())
                }

                fn move_down(&mut self, n: usize) -> io::Result<()> {
                    self.0.move_down(n);
                    Ok(())
                }

                fn move_left(&mut self, n: usize) -> io::Result<()> {
                    self.0.move_left(n);
                    Ok(())
                }

                fn move_right(&mut self, n: usize) -> io::Result<()> {
                    self.0.move_right(n);
                    Ok(())
                }

                fn move_to_first_column(&mut self) -> io::Result<()> {
                    self.0.move_to_first_column();
                    Ok(())
                }

                fn set_cursor_mode(&mut self, mode: CursorMode) -> io::Result<()> {
                    self.0.set_cursor_mode(mode);
                    Ok(())
                }

                fn write(&mut self, s: &str) -> io::Result<()> {
                    self.0.write(s);
                    Ok(())
                }

                fn flush(&mut self) -> io::Result<()> { Ok(()) }
            }
        }

        pub mod prompter
        {
            /*!
            Provides access to prompt input state. */
            use ::
            {
                *,
            };
            /*
            use std::io;
            use std::mem::replace;
            use std::ops::Range;
            use std::sync::Arc;
            use std::time::Instant;

            use mortal::FindResult;

            use crate::chars::{is_ctrl, is_printable, DELETE, EOF};
            use crate::command::{Category, Command};
            use crate::complete::Completion;
            use crate::function::Function;
            use crate::reader::{BindingIter, InputState, ReadLock, ReadResult};
            use crate::table::{format_columns, Line, Table};
            use crate::terminal::{CursorMode, Signal, Size, Terminal};
            use crate::util::{
                get_open_paren, find_matching_paren, first_word,
                longest_common_prefix, repeat_char,
                back_n_words, forward_n_words,
                backward_char, forward_char, backward_word, forward_word,
                word_start, word_end, RangeArgument,
            };
            use crate::variables::VariableIter;
            use crate::writer::{
                BLINK_DURATION, display_str,
                Digit, Display, HistoryIter, PromptType, Writer, WriteLock,
            };
            */
            /// Provides access to the current state of input while a `read_line` call is in progress.
            pub struct Prompter<'a, 'b: 'a, Term: 'b + Terminal> {
                pub(crate) read: &'a mut ReadLock<'b, Term>,
                write: WriteLock<'b, Term>,
            }

            impl<'a, 'b: 'a, Term: 'b + Terminal> Prompter<'a, 'b, Term> {
                pub(crate) fn new(read: &'a mut ReadLock<'b, Term>, write: WriteLock<'b, Term>)
                        -> Prompter<'a, 'b, Term> {
                    Prompter{read, write}
                }

                /// Returns a `Writer` instance using the currently held write lock.
                pub fn writer_append<'c>(&'c mut self) -> io::Result<Writer<'c, 'b, Term>> {
                    Writer::with_ref(&mut self.write, false)
                }

                /// Returns a `Writer` instance using the currently held write lock.
                ///
                /// This method will erase the prompt, allowing output to be written
                /// without corrupting the prompt text. The prompt will be redrawn
                /// when the `Writer` instance is dropped.
                ///
                /// To instead write text after the prompt, use [`writer_append`].
                ///
                /// [`writer_append`]: #method.writer_append
                pub fn writer_erase<'c>(&'c mut self) -> io::Result<Writer<'c, 'b, Term>> {
                    Writer::with_ref(&mut self.write, true)
                }

                /// Resets input state at the start of `read_line`
                fn reset_input(&mut self) {
                    self.read.reset_data();
                    self.write.reset_data();
                }

                pub(crate) fn start_read_line(&mut self) -> io::Result<()> {
                    self.read.state = InputState::NewSequence;
                    self.write.is_prompt_drawn = true;
                    self.write.update_size()?;
                    self.write.draw_prompt()
                }

                pub(crate) fn end_read_line(&mut self) -> io::Result<()> {
                    self.write.expire_blink()?;

                    if self.read.overwrite_mode {
                        self.write.set_cursor_mode(CursorMode::Normal)?;
                    }
                    if self.write.is_prompt_drawn {
                        self.write.move_to_end()?;
                        self.write.write_str("\n")?;
                        self.write.is_prompt_drawn = false;
                    }

                    self.reset_input();
                    self.read.state = InputState::Inactive;

                    Ok(())
                }

                pub(crate) fn handle_input(&mut self, ch: char) -> io::Result<Option<ReadResult>> {
                    self.write.expire_blink()?;

                    match self.read.state {
                        InputState::Inactive => panic!("input received in inactive state"),
                        InputState::NewSequence => {
                            if ch == EOF && self.write.buffer.is_empty() {
                                self.write.write_str("\n")?;
                                self.write.is_prompt_drawn = false;
                                return Ok(Some(ReadResult::Eof));
                            } else {
                                self.read.sequence.push(ch);
                                self.execute_sequence()?;

                                if self.read.input_accepted {
                                    let s = replace(&mut self.write.buffer, String::new());
                                    return Ok(Some(ReadResult::Input(s)));
                                }
                            }
                        }
                        InputState::ContinueSequence{expiry: _} => {
                            self.read.sequence.push(ch);

                            self.execute_sequence()?;

                            if self.read.input_accepted {
                                let s = replace(&mut self.write.buffer, String::new());
                                return Ok(Some(ReadResult::Input(s)));
                            }
                        }
                        InputState::Number => {
                            if let Some(digit) = ch.to_digit(10) {
                                self.write.input_arg.input(digit as i32);

                                if self.write.input_arg.is_out_of_bounds() {
                                    self.read.state = InputState::NewSequence;
                                    self.write.input_arg = Digit::None;
                                    self.write.explicit_arg = false;
                                    self.write.redraw_prompt(PromptType::Normal)?;
                                } else {
                                    self.write.redraw_prompt(PromptType::Number)?;
                                }
                            } else {
                                self.read.state = InputState::NewSequence;
                                self.write.redraw_prompt(PromptType::Normal)?;
                                self.read.macro_buffer.insert(0, ch);
                            }
                        }
                        InputState::CharSearch{n, backward} => {
                            if n != 0 {
                                if backward {
                                    self.write.backward_search_char(n, ch)?;
                                } else {
                                    self.write.forward_search_char(n, ch)?;
                                }
                            }
                            self.read.state = InputState::NewSequence;
                        }
                        InputState::TextSearch => {
                            if ch == DELETE {
                                {
                                    let write = &mut *self.write;
                                    write.search_buffer.pop();
                                    write.last_search.clone_from(&write.search_buffer);
                                }
                                self.write.search_history_update()?;
                            } else if self.is_abort(ch) {
                                self.abort_search_history()?;
                            } else if is_ctrl(ch) {
                                // End search, handle input after cancelling
                                self.end_search_history()?;
                                self.read.macro_buffer.insert(0, ch);
                            } else {
                                {
                                    let write = &mut *self.write;
                                    write.search_buffer.push(ch);
                                    write.last_search.clone_from(&write.search_buffer);
                                }
                                self.write.search_history_update()?;
                            }
                        }
                        InputState::CompleteIntro => {
                            match ch {
                                'y' | 'Y' | ' ' => {
                                    self.write.write_str("\n")?;
                                    self.show_completions_page(0)?;
                                }
                                '\r' | '\n' => {
                                    self.write.write_str("\n")?;
                                    self.show_completions_line(0)?;
                                }
                                'q' | 'Q' |
                                'n' | 'N' | DELETE => {
                                    self.write.write_str("\n")?;
                                    self.end_page_completions()?;
                                }
                                _ => ()
                            }
                        }
                        InputState::CompleteMore(offset) => {
                            match ch {
                                'y' | 'Y' | ' ' => {
                                    self.write.clear_prompt()?;
                                    self.show_completions_page(offset)?;
                                }
                                '\r' | '\n' => {
                                    self.write.clear_prompt()?;
                                    self.show_completions_line(offset)?;
                                }
                                'q' | 'Q' |
                                'n' | 'N' | DELETE => {
                                    self.write.clear_prompt()?;
                                    self.end_page_completions()?;
                                }
                                _ => ()
                            }
                        }
                        InputState::QuotedInsert(n) => {
                            if n != 0 {
                                self.insert(n, ch)?;
                            }
                            self.read.state = InputState::NewSequence;
                        }
                    }

                    Ok(None)
                }

                /// Returns the current buffer.
                pub fn buffer(&self) -> &str {
                    &self.write.buffer
                }

                /// Returns the "backup" buffer.
                ///
                /// When the user is currently editing a history entry, the backup buffer
                /// contains the original user input.
                pub fn backup_buffer(&self) -> &str {
                    &self.write.backup_buffer
                }

                /// Returns the command `Category` of the most recently executed command.
                ///
                /// Some commands may use this to influence behavior of repeated commands.
                pub fn last_command_category(&self) -> Category {
                    self.read.last_cmd
                }

                /// Returns the set of characters that indicate a word break.
                pub fn word_break_chars(&self) -> &str {
                    &self.read.word_break
                }

                /// Sets the buffer to the given value.
                ///
                /// The cursor is moved to the end of the buffer.
                pub fn set_buffer(&mut self, buf: &str) -> io::Result<()> {
                    self.write.set_buffer(buf)
                }

                /// Returns the current position of the cursor.
                pub fn cursor(&self) -> usize {
                    self.write.cursor
                }

                /// Sets the cursor to the given position within the buffer.
                ///
                /// # Panics
                ///
                /// If the given position is out of bounds or is not aligned to `char` boundaries.
                pub fn set_cursor(&mut self, pos: usize) -> io::Result<()> {
                    self.write.set_cursor(pos)
                }

                /// Sets the prompt that will be displayed when `read_line` is called.
                ///
                /// # Notes
                ///
                /// If `prompt` contains any terminal escape sequences (e.g. color codes),
                /// such escape sequences should be immediately preceded by the character
                /// `'\x01'` and immediately followed by the character `'\x02'`.
                pub fn set_prompt(&mut self, prompt: &str) -> io::Result<()> {
                    self.write.set_prompt(prompt)
                }

                /// Returns the size of the terminal at the last draw operation.
                pub fn screen_size(&self) -> Size {
                    self.write.screen_size
                }

                /// Returns whether a numerical argument was explicitly supplied by the user.
                pub fn explicit_arg(&self) -> bool {
                    self.write.explicit_arg
                }

                /// Returns the current input sequence.
                pub fn sequence(&self) -> &str {
                    &self.read.sequence
                }

                /// Returns an iterator over bound sequences
                pub fn bindings(&self) -> BindingIter {
                    self.read.bindings()
                }

                /// Returns an iterator over variable values.
                pub fn variables(&self) -> VariableIter {
                    self.read.variables()
                }

                /// Returns an iterator over history entries
                pub fn history(&self) -> HistoryIter {
                    self.write.history()
                }

                /// Returns the index into history currently being edited.
                ///
                /// If the user is not editing a line of history, `None` is returned.
                pub fn history_index(&self) -> Option<usize> {
                    self.write.history_index
                }

                /// Returns the current number of history entries.
                pub fn history_len(&self) -> usize {
                    self.write.history.len()
                }

                fn next_history(&mut self, n: usize) -> io::Result<()> {
                    self.write.next_history(n)
                }

                fn prev_history(&mut self, n: usize) -> io::Result<()> {
                    self.write.prev_history(n)
                }

                /// Selects the history entry currently being edited by the user.
                ///
                /// Setting the entry to `None` will result in editing the input buffer.
                ///
                /// # Panics
                ///
                /// If the index is out of bounds.
                pub fn select_history_entry(&mut self, new: Option<usize>) -> io::Result<()> {
                    self.write.select_history_entry(new)
                }

                /// Returns the current set of completions.
                ///
                /// Unless the most recent command executed was one operating on completion
                /// sets, the result is `None`.
                pub fn completions(&self) -> Option<&[Completion]> {
                    self.read.completions.as_ref().map(|v| &v[..])
                }

                /// Sets the current set of completions.
                ///
                /// This completion set is accessed by commands such as `complete` and
                /// `possible-completions`.
                ///
                /// This set will only remain active until the end of the next
                /// non-completion command's execution. Therefore, any `Function`
                /// that uses this method must be of the `Complete` category.
                pub fn set_completions(&mut self, completions: Option<Vec<Completion>>) {
                    self.read.completions = completions;
                }

                /// Attempts to execute the current sequence.
                ///
                /// If no bindings match and the sequence contains only printable characters,
                /// the sequence will be inserted as text.
                ///
                /// Returns `true` if a complete sequence was found and executed.
                fn execute_sequence(&mut self) -> io::Result<()> {
                    match self.find_binding(&self.read.sequence) {
                        FindResult::Found(cmd) => {
                            let ch = self.read.sequence.chars().last().unwrap();
                            let n = self.write.input_arg.to_i32();

                            self.read.state = InputState::NewSequence;
                            self.execute_command(cmd, n, ch)?;
                            self.read.sequence.clear();
                        }
                        FindResult::NotFound => {
                            self.read.state = InputState::NewSequence;
                            self.insert_first_char()?;
                        }
                        FindResult::Incomplete => {
                            let expiry = None;
                            self.read.state = InputState::ContinueSequence{expiry};
                        }
                        FindResult::Undecided(_) => {
                            let expiry = self.keyseq_expiry();
                            self.read.state = InputState::ContinueSequence{expiry};
                        }
                    }

                    Ok(())
                }

                fn force_execute_sequence(&mut self) -> io::Result<()> {
                    self.read.state = InputState::NewSequence;

                    match self.find_binding(&self.read.sequence) {
                        FindResult::Found(cmd) |
                        FindResult::Undecided(cmd) => {
                            let ch = self.read.sequence.chars().last().unwrap();
                            let n = self.write.input_arg.to_i32();

                            self.execute_command(cmd, n, ch)?;
                            self.read.sequence.clear();
                        }
                        FindResult::NotFound => {
                            self.insert_first_char()?;
                        }
                        FindResult::Incomplete => unreachable!(),
                    }

                    Ok(())
                }

                /// Execute the command `SelfInsert` on the first character in the input
                /// sequence, if it is printable. Then, queue the remaining characters
                /// so they may be reinterpreted.
                fn insert_first_char(&mut self) -> io::Result<()> {
                    let (first, rest) = {
                        let mut chars = self.read.sequence.chars();

                        (chars.next().unwrap(), chars.as_str().to_owned())
                    };

                    self.read.sequence.clear();

                    if is_printable(first) {
                        let n = self.write.input_arg.to_i32();
                        self.execute_command(Command::SelfInsert, n, first)?;
                    }

                    if !rest.is_empty() {
                        self.read.queue_input(&rest);
                    }

                    Ok(())
                }

                fn find_binding(&self, seq: &str) -> FindResult<Command> {
                    self.read.bindings.find(seq).cloned()
                }

                fn get_function(&self, name: &str) -> Option<&Arc<dyn Function<Term>>> {
                    self.read.functions.get(name)
                }

                fn is_abort(&self, ch: char) -> bool {
                    let mut buf = [0; 4];
                    let s = ch.encode_utf8(&mut buf);

                    self.find_binding(&s) == FindResult::Found(Command::Abort)
                }

                fn execute_command(&mut self, cmd: Command, n: i32, ch: char) -> io::Result<()> {
                    use crate::command::Command::*;

                    let mut category = cmd.category();

                    if self.read.overwrite_mode {
                        match cmd {
                            DigitArgument | SelfInsert => (),
                            BackwardDeleteChar if n >= 0 => (),
                            _ => self.read.overwritten_chars.clear()
                        }
                    }

                    match cmd {
                        Abort => (),
                        AcceptLine => {
                            self.accept_input()?;
                        }
                        Complete => {
                            if !self.read.disable_completion {
                                self.complete_word()?;
                            } else if is_printable(ch) {
                                self.execute_command(SelfInsert, n, ch)?;
                            }
                        }
                        InsertCompletions => {
                            if self.read.completions.is_none() {
                                self.build_completions();
                            }

                            if let Some(completions) = self.read.completions.take() {
                                self.insert_completions(&completions)?;
                                self.read.completions = Some(completions);
                            }
                        }
                        PossibleCompletions => {
                            if self.read.completions.is_none() {
                                self.build_completions();
                            }

                            if let Some(completions) = self.read.completions.take() {
                                self.show_completions(&completions)?;
                                self.read.completions = Some(completions);
                            }
                        }
                        MenuComplete => {
                            if self.read.completions.is_none() {
                                self.build_completions();
                            }

                            if n > 0 {
                                self.next_completion(n as usize)?;
                            } else {
                                self.prev_completion((-n) as usize)?;
                            }
                        }
                        MenuCompleteBackward => {
                            if self.read.completions.is_none() {
                                self.build_completions();
                            }

                            if n > 0 {
                                self.prev_completion(n as usize)?;
                            } else {
                                self.next_completion((-n) as usize)?;
                            }
                        }
                        DigitArgument => {
                            self.read.state = InputState::Number;
                            self.write.set_digit_from_char(ch);
                            self.write.redraw_prompt(PromptType::Number)?;
                        }
                        SelfInsert => {
                            if n > 0 {
                                let n = n as usize;

                                if self.read.overwrite_mode {
                                    self.overwrite(n, ch)?;
                                } else {
                                    self.insert(n, ch)?;
                                }

                                if self.read.blink_matching_paren {
                                    if let Some(open) = get_open_paren(ch) {
                                        if let Some(pos) = find_matching_paren(
                                                &self.write.buffer[..self.write.cursor],
                                                &self.read.string_chars, open, ch) {
                                            self.blink(pos)?;
                                        }
                                    }
                                }
                            }
                        }
                        TabInsert => {
                            if n > 0 {
                                self.insert(n as usize, '\t')?;
                            }
                        }
                        InsertComment => {
                            if self.explicit_arg() &&
                                    self.write.buffer.starts_with(&self.read.comment_begin[..]) {
                                self.write.move_to(0)?;
                                let n = self.read.comment_begin.len();

                                self.delete_range(..n)?;
                                self.accept_input()?;
                            } else {
                                self.write.move_to(0)?;
                                let s = self.read.comment_begin.clone();
                                self.insert_str(&s)?;
                                self.accept_input()?;
                            }
                        }
                        BackwardChar => {
                            if n > 0 {
                                self.write.backward_char(n as usize)?;
                            } else if n < 0 {
                                self.write.forward_char((-n) as usize)?;
                            }
                        }
                        ForwardChar => {
                            if n > 0 {
                                self.write.forward_char(n as usize)?;
                            } else if n < 0 {
                                self.write.backward_char((-n) as usize)?;
                            }
                        }
                        CharacterSearch => {
                            if n >= 0 {
                                self.read.state = InputState::CharSearch{
                                    n: n as usize,
                                    backward: false,
                                }
                            } else {
                                self.read.state = InputState::CharSearch{
                                    n: (-n) as usize,
                                    backward: true,
                                };
                            }
                        }
                        CharacterSearchBackward => {
                            if n >= 0 {
                                self.read.state = InputState::CharSearch{
                                    n: n as usize,
                                    backward: true,
                                }
                            } else {
                                self.read.state = InputState::CharSearch{
                                    n: (-n) as usize,
                                    backward: false,
                                };
                            }
                        }
                        BackwardWord => {
                            if n > 0 {
                                self.backward_word(n as usize)?;
                            } else if n < 0 {
                                self.forward_word((-n) as usize)?;
                            }
                        }
                        ForwardWord => {
                            if n > 0 {
                                let pos = forward_word(n as usize,
                                    &self.write.buffer, self.write.cursor, &self.read.word_break);
                                self.write.move_to(pos)?;
                            } else if n < 0 {
                                let pos = forward_word((-n) as usize,
                                    &self.write.buffer, self.write.cursor, &self.read.word_break);
                                self.write.move_to(pos)?;
                            }
                        }
                        BackwardKillLine => {
                            let r = ..self.write.cursor;
                            self.kill_range(r)?;
                        }
                        KillLine => {
                            let r = self.write.cursor..;
                            self.kill_range(r)?;
                        }
                        BackwardKillWord => {
                            if n > 0 {
                                let pos = backward_word(n as usize,
                                    &self.write.buffer, self.write.cursor, &self.read.word_break);
                                let r = pos..self.write.cursor;
                                self.kill_range(r)?;
                            } else if n < 0 {
                                let pos = forward_word((-n) as usize,
                                    &self.write.buffer, self.write.cursor, &self.read.word_break);
                                let r = self.write.cursor..pos;
                                self.kill_range(r)?;
                            }
                        }
                        KillWord => {
                            if n > 0 {
                                let pos = forward_word(n as usize,
                                    &self.write.buffer, self.write.cursor, &self.read.word_break);
                                let r = self.write.cursor..pos;
                                self.kill_range(r)?;
                            } else if n < 0 {
                                let pos = backward_word((-n) as usize,
                                    &self.write.buffer, self.write.cursor, &self.read.word_break);
                                let r = pos..self.write.cursor;
                                self.kill_range(r)?;
                            }
                        }
                        UnixWordRubout => {
                            if n > 0 {
                                let pos = backward_word(n as usize,
                                    &self.write.buffer, self.write.cursor, " \t\n");
                                let r = pos..self.write.cursor;
                                self.kill_range(r)?;
                            } else if n < 0 {
                                let pos = forward_word((-n) as usize,
                                    &self.write.buffer, self.write.cursor, " \t\n");
                                let r = self.write.cursor..pos;
                                self.kill_range(r)?;
                            }
                        }
                        ClearScreen => {
                            self.write.clear_screen()?;
                        }
                        BeginningOfLine => self.write.move_to(0)?,
                        EndOfLine => self.write.move_to_end()?,
                        BackwardDeleteChar => {
                            if n > 0 {
                                if self.read.overwrite_mode {
                                    self.overwrite_back(n as usize)?;
                                } else {
                                    let pos = backward_char(n as usize,
                                        &self.write.buffer, self.write.cursor);
                                    let r = pos..self.write.cursor;
                                    self.delete_range(r)?;
                                }
                            } else if n < 0 {
                                let pos = forward_char((-n) as usize,
                                    &self.write.buffer, self.write.cursor);
                                let r = self.write.cursor..pos;
                                self.delete_range(r)?;
                            }
                        }
                        DeleteChar => {
                            if n > 0 {
                                let pos = forward_char(n as usize,
                                    &self.write.buffer, self.write.cursor);
                                let r = self.write.cursor..pos;
                                self.delete_range(r)?;
                            } else if n < 0 {
                                let pos = backward_char(n as usize,
                                    &self.write.buffer, self.write.cursor);
                                let r = pos..self.write.cursor;
                                self.delete_range(r)?;
                            }
                        }
                        TransposeChars => {
                            if n != 0 && self.write.cursor != 0 {
                                let (src, dest);

                                if !self.explicit_arg() && self.write.cursor == self.write.buffer.len() {
                                    let end = backward_char(1, &self.write.buffer, self.write.cursor);
                                    let start = backward_char(1, &self.write.buffer, end);

                                    src = start..end;
                                    dest = end..self.write.cursor;
                                } else {
                                    let start = backward_char(1, &self.write.buffer, self.write.cursor);
                                    let end = self.write.cursor;

                                    src = start..end;

                                    dest = if n < 0 {
                                        let back = backward_char((-n) as usize, &self.write.buffer, start);
                                        back..start
                                    } else {
                                        let fwd = forward_char(n as usize + 1, &self.write.buffer, start);
                                        end..fwd
                                    };
                                }

                                self.transpose_range(src, dest)?;
                            }
                        }
                        TransposeWords => {
                            if n != 0 {
                                if let Some(first) = first_word(&self.write.buffer[..self.write.cursor], &self.read.word_break) {
                                    let start = word_start(&self.write.buffer, self.write.cursor, &self.read.word_break);

                                    if first != start {
                                        let (src, dest);

                                        if !self.explicit_arg() && start == self.write.buffer.len() {
                                            let dest_start = backward_word(1, &self.write.buffer, start, &self.read.word_break);
                                            let dest_end = word_end(&self.write.buffer, dest_start, &self.read.word_break);

                                            let src_start = backward_word(1, &self.write.buffer, dest_start, &self.read.word_break);
                                            let src_end = word_end(&self.write.buffer, src_start, &self.read.word_break);

                                            src = src_start..src_end;
                                            dest = dest_start..dest_end;
                                        } else {
                                            let src_start = backward_word(1, &self.write.buffer, start, &self.read.word_break);
                                            let src_end = word_end(&self.write.buffer, src_start, &self.read.word_break);

                                            src = src_start..src_end;

                                            dest = if n < 0 {
                                                back_n_words((-n) as usize, &self.write.buffer, src_start, &self.read.word_break)
                                            } else {
                                                forward_n_words(n as usize, &self.write.buffer, src_start, &self.read.word_break)
                                            };
                                        }

                                        self.transpose_range(src, dest)?;
                                    }
                                }
                            }
                        }
                        BeginningOfHistory => {
                            self.select_history_entry(Some(0))?;
                        }
                        EndOfHistory => {
                            self.select_history_entry(None)?;
                        }
                        NextHistory => {
                            if n > 0 {
                                self.next_history(n as usize)?;
                            } else if n < 0 {
                                self.prev_history((-n) as usize)?;
                            }
                        }
                        PreviousHistory => {
                            if n > 0 {
                                self.prev_history(n as usize)?;
                            } else if n < 0 {
                                self.next_history((-n) as usize)?;
                            }
                        }
                        ForwardSearchHistory => {
                            self.read.state = InputState::TextSearch;
                            if self.read.last_cmd == Category::IncrementalSearch {
                                self.write.continue_search_history(false)?;
                            } else {
                                self.write.start_search_history(false)?;
                            }
                        }
                        ReverseSearchHistory => {
                            self.read.state = InputState::TextSearch;
                            if self.read.last_cmd == Category::IncrementalSearch {
                                self.write.continue_search_history(true)?;
                            } else {
                                self.write.start_search_history(true)?;
                            }
                        }
                        HistorySearchForward => {
                            if self.read.last_cmd == Category::Search {
                                self.write.continue_history_search(false)?;
                            } else {
                                self.write.start_history_search(false)?;
                            }
                        }
                        HistorySearchBackward => {
                            if self.read.last_cmd == Category::Search {
                                self.write.continue_history_search(true)?;
                            } else {
                                self.write.start_history_search(true)?;
                            }
                        }
                        QuotedInsert => {
                            self.read.state = InputState::QuotedInsert(
                                if n >= 0 { n as usize } else { 0 });
                        }
                        OverwriteMode => {
                            self.read.overwrite_mode = !self.read.overwrite_mode;

                            if !self.read.overwrite_mode {
                                self.read.overwritten_append = 0;
                                self.read.overwritten_chars.clear();
                            }

                            let mode = if self.read.overwrite_mode {
                                CursorMode::Overwrite
                            } else {
                                CursorMode::Normal
                            };

                            self.write.set_cursor_mode(mode)?;
                        }
                        Yank => {
                            self.yank()?;
                        }
                        YankPop => {
                            self.yank_pop()?;
                        }
                        Custom(ref name) => {
                            if let Some(fun) = self.get_function(name).cloned() {
                                fun.execute(self, n, ch)?;

                                category = fun.category();
                            }
                        }
                        Macro(ref seq) => {
                            self.read.queue_input(seq);
                        }
                    }

                    if category != Category::Digit {
                        self.write.input_arg = Digit::None;
                        self.write.explicit_arg = false;

                        self.read.last_cmd = category;

                        if category != Category::Complete {
                            self.read.completions = None;
                        }

                        if category != Category::Yank {
                            self.read.last_yank = None;
                        }
                    }

                    Ok(())
                }

                /// Accepts the current input buffer as user input.
                ///
                /// This method may be called by a [`Function`] implementation, immediately
                /// before ending execution, in order to simulate the `accept-line` command;
                /// e.g. to implement a command that extends the default behavior of the
                /// `accept-line` action.
                ///
                /// Behavior of this method is undefined if called outside of a `Function`
                /// implementation.
                ///
                /// [`Function`]: ../function/trait.Function.html
                pub fn accept_input(&mut self) -> io::Result<()> {
                    self.write.move_to_end()?;
                    self.write.write_str("\n")?;
                    self.read.input_accepted = true;
                    self.write.is_prompt_drawn = false;
                    Ok(())
                }

                /// Moves the cursor to the given position, waits for 500 milliseconds
                /// (or until next user input), then restores the original cursor position.
                ///
                /// # Panics
                ///
                /// If the given position is out of bounds or is not aligned to `char` boundaries.
                pub fn blink(&mut self, pos: usize) -> io::Result<()> {
                    self.write.blink(pos)?;

                    self.read.max_wait_duration = Some(BLINK_DURATION);

                    Ok(())
                }

                fn check_expire_blink(&mut self, now: Instant) -> io::Result<()> {
                    if self.write.check_expire_blink(now)? {
                        self.read.max_wait_duration = None;
                    }

                    Ok(())
                }

                fn check_expire_sequence(&mut self, now: Instant) -> io::Result<()> {
                    if let InputState::ContinueSequence{expiry: Some(expiry)} = self.read.state {
                        if now >= expiry {
                            self.read.max_wait_duration = None;
                            self.force_execute_sequence()?;
                        }
                    }

                    Ok(())
                }

                fn keyseq_expiry(&mut self) -> Option<Instant> {
                    if let Some(t) = self.read.keyseq_timeout {
                        self.read.max_wait_duration = Some(t);
                        Some(Instant::now() + t)
                    } else {
                        None
                    }
                }

                pub(crate) fn check_expire_timeout(&mut self) -> io::Result<()> {
                    let now = Instant::now();

                    self.check_expire_blink(now)?;
                    self.check_expire_sequence(now)
                }

                fn expire_blink(&mut self) -> io::Result<()> {
                    self.read.max_wait_duration = None;
                    self.write.expire_blink()
                }

                fn build_completions(&mut self) {
                    let compl = self.read.completer.clone();
                    let end = self.write.cursor;
                    let start = compl.word_start(&self.write.buffer, end, self);

                    if start > end {
                        panic!("Completer::word_start returned invalid index; \
                            start > end ({} > {})", start, end);
                    }

                    let unquoted = compl.unquote(&self.write.buffer[start..end]).into_owned();

                    let completions = compl.complete(&unquoted, self, start, end);
                    let n_completions = completions.as_ref().map_or(0, |c| c.len());

                    self.read.completions = completions;
                    self.read.completion_index = n_completions;
                    self.read.completion_start = start;
                    self.read.completion_prefix = end;
                }

                fn complete_word(&mut self) -> io::Result<()> {
                    if let Some(completions) = self.read.completions.take() {
                        if completions.len() == 1 {
                            self.substitute_completion(&completions[0])?;
                        } else {
                            self.show_completions(&completions)?;
                            self.read.completions = Some(completions);
                        }
                    } else {
                        self.build_completions();
                        let completions = self.read.completions.take().unwrap_or_default();

                        if completions.len() == 1 {
                            self.substitute_completion(&completions[0])?;
                        } else if !completions.is_empty() {
                            let start = self.read.completion_start;
                            let end = self.write.cursor;

                            {
                                let pfx = longest_common_prefix(completions.iter()
                                    .map(|compl| &compl.completion[..]))
                                    .unwrap_or_default();
                                self.replace_str_forward(start..end, &pfx)?;
                            }

                            self.read.completions = Some(completions);
                        }
                    }

                    Ok(())
                }

                fn substitute_completion(&mut self, compl: &Completion) -> io::Result<()> {
                    let mut s = self.read.completer.quote(&compl.completion);

                    if let Some(suffix) = compl.suffix.with_default(self.read.completion_append_character) {
                        s.to_mut().push(suffix);
                    }

                    let start = self.read.completion_start;
                    let end = self.write.cursor;
                    self.replace_str_forward(start..end, &s)
                }

                fn insert_completions(&mut self, completions: &[Completion]) -> io::Result<()> {
                    let mut words = String::new();

                    for compl in completions {
                        words.push_str(&self.read.completer.unquote(&compl.completion));
                        words.push(' ');
                    }

                    let start = self.read.completion_start;
                    let end = self.write.cursor;

                    self.replace_str_forward(start..end, &words)
                }

                fn show_completions(&mut self, completions: &[Completion]) -> io::Result<()> {
                    if completions.is_empty() {
                        return Ok(());
                    }

                    let eff_width = self.write.screen_size.columns
                        .min(self.read.completion_display_width);

                    let completions = completions.iter()
                        .map(|compl| display_str(&compl.display(), Display::default()).into_owned())
                        .collect::<Vec<_>>();

                    let cols = format_columns(&completions, eff_width,
                        self.read.print_completions_horizontally);
                    let table = Table::new(&completions, cols.as_ref().map(|c| &c[..]),
                        self.read.print_completions_horizontally);

                    self.write.write_str("\n")?;

                    let n_completions = completions.len();

                    if self.read.page_completions &&
                            n_completions >= self.read.completion_query_items {
                        // TODO: Replace borrowed data in `Table` with owned data.
                        // Then, store table here to avoid regenerating column widths
                        self.start_page_completions(n_completions)
                    } else {
                        self.show_list_completions(table)?;
                        self.write.draw_prompt()
                    }
                }

                fn start_page_completions(&mut self, n_completions: usize) -> io::Result<()> {
                    self.read.state = InputState::CompleteIntro;
                    self.write.redraw_prompt(PromptType::CompleteIntro(n_completions))
                }

                fn end_page_completions(&mut self) -> io::Result<()> {
                    self.read.state = InputState::NewSequence;
                    self.write.prompt_type = PromptType::Normal;
                    self.write.draw_prompt()
                }

                fn is_paging_completions(&self) -> bool {
                    match self.read.state {
                        InputState::CompleteMore(_) => true,
                        _ => false
                    }
                }

                fn show_completions_page(&mut self, offset: usize) -> io::Result<()> {
                    if let Some(compl) = self.read.completions.take() {
                        let width = self.write.screen_size.columns
                            .min(self.read.completion_display_width);
                        let n_lines = self.write.screen_size.lines - 1;

                        let completions = compl.iter()
                            .map(|compl| display_str(&compl.display(), Display::default()).into_owned())
                            .collect::<Vec<_>>();

                        let cols = format_columns(&completions, width,
                            self.read.print_completions_horizontally);
                        let mut table = Table::new(&completions, cols.as_ref().map(|c| &c[..]),
                            self.read.print_completions_horizontally);

                        for row in table.by_ref().skip(offset).take(n_lines) {
                            self.show_completion_line(row)?;
                        }

                        if table.has_more() {
                            self.read.completions = Some(compl);
                            self.read.state = InputState::CompleteMore(offset + n_lines);
                            self.write.prompt_type = PromptType::CompleteMore;
                            self.write.draw_prompt()?;
                        } else {
                            self.end_page_completions()?;
                        }
                    }

                    Ok(())
                }

                fn show_completions_line(&mut self, offset: usize) -> io::Result<()> {
                    if let Some(compl) = self.read.completions.take() {
                        let width = self.write.screen_size.columns
                            .min(self.read.completion_display_width);
                        let completions = compl.iter()
                            .map(|compl| display_str(&compl.display(), Display::default()).into_owned())
                            .collect::<Vec<_>>();

                        let cols = format_columns(&completions, width,
                            self.read.print_completions_horizontally);
                        let mut table = Table::new(&completions, cols.as_ref().map(|c| &c[..]),
                            self.read.print_completions_horizontally);

                        if let Some(row) = table.by_ref().skip(offset).next() {
                            self.show_completion_line(row)?;
                        }

                        if table.has_more() {
                            self.read.completions = Some(compl);
                            self.read.state = InputState::CompleteMore(offset + 1);
                            self.write.prompt_type = PromptType::CompleteMore;
                            self.write.draw_prompt()?;
                        } else {
                            self.end_page_completions()?;
                        }
                    }

                    Ok(())
                }

                fn show_completion_line<S: AsRef<str>>(&mut self, line: Line<S>) -> io::Result<()> {
                    let mut space = 0;

                    for (width, name) in line {
                        self.write.move_right(space)?;
                        self.write.write_str(name)?;
                        space = width - name.chars().count();
                    }

                    self.write.write_str("\n")
                }

                fn show_list_completions<S: AsRef<str>>(&mut self, table: Table<S>) -> io::Result<()> {
                    for line in table {
                        let mut space = 0;

                        for (width, name) in line {
                            self.write.move_right(space)?;
                            self.write.write_str(name)?;
                            space = width - name.chars().count();
                        }
                        self.write.write_str("\n")?;
                    }

                    Ok(())
                }

                fn next_completion(&mut self, n: usize) -> io::Result<()> {
                    let len = self.read.completions.as_ref().map_or(0, |c| c.len());
                    let max = len + 1;

                    let old = self.read.completion_index;
                    let new = (old + n) % max;

                    if old != new {
                        self.set_completion(new)?;
                    }

                    Ok(())
                }

                fn prev_completion(&mut self, n: usize) -> io::Result<()> {
                    let len = self.read.completions.as_ref().map_or(0, |c| c.len());
                    let max = len + 1;

                    let old = self.read.completion_index;
                    let new = if n <= old {
                        max - old - n
                    } else {
                        old - n
                    };

                    self.set_completion(new)
                }

                fn set_completion(&mut self, new: usize) -> io::Result<()> {
                    let len = self.read.completions.as_ref().map_or(0, |c| c.len());
                    let old = self.read.completion_index;

                    if old != new {
                        self.read.completion_index = new;

                        if new == len {
                            let start = self.read.completion_prefix;
                            let end = self.write.cursor;

                            self.delete_range(start..end)?;
                        } else {
                            let start = self.read.completion_start;
                            let end = self.write.cursor;
                            let s = self.read.completions.as_ref().unwrap()[new]
                                .completion(self.read.completion_append_character).into_owned();

                            self.replace_str_forward(start..end, &s)?;
                        }
                    }

                    Ok(())
                }

                fn abort_search_history(&mut self) -> io::Result<()> {
                    self.read.state = InputState::NewSequence;
                    self.read.last_cmd = Category::Other;
                    self.write.abort_search_history()
                }

                fn end_search_history(&mut self) -> io::Result<()> {
                    self.read.state = InputState::NewSequence;
                    self.write.end_search_history()
                }

                pub(crate) fn handle_resize(&mut self, size: Size) -> io::Result<()> {
                    self.expire_blink()?;

                    if self.is_paging_completions() {
                        self.end_page_completions()?;
                    }

                    self.write.screen_size = size;

                    let p = self.write.prompt_type;
                    self.write.redraw_prompt(p)
                }

                pub(crate) fn handle_signal(&mut self, signal: Signal) -> io::Result<()> {
                    self.expire_blink()?;

                    match signal {
                        Signal::Continue => {
                            self.write.draw_prompt()?;
                        }
                        Signal::Interrupt => {
                            self.read.macro_buffer.clear();
                            self.write.move_to_end()?;

                            if self.read.echo_control_characters {
                                self.write.write_str("^C")?;
                            }

                            self.write.write_str("\n")?;
                            self.reset_input();
                            self.write.draw_prompt()?;
                        }
                        _ => ()
                    }

                    Ok(())
                }

                fn backward_word(&mut self, n: usize) -> io::Result<()> {
                    let pos = backward_word(n,
                        &self.write.buffer, self.write.cursor, &self.read.word_break);
                    self.write.move_to(pos)
                }

                fn forward_word(&mut self, n: usize) -> io::Result<()> {
                    let pos = forward_word(n,
                        &self.write.buffer, self.write.cursor, &self.read.word_break);
                    self.write.move_to(pos)
                }

                /// Deletes a range of text from the input buffer.
                ///
                /// # Panics
                ///
                /// If the given range is out of bounds or is not aligned to `char` boundaries.
                pub fn delete_range<R: RangeArgument<usize>>(&mut self, range: R) -> io::Result<()> {
                    self.write.delete_range(range)
                }

                /// Deletes a range from the buffer and adds the removed text to the
                /// kill ring.
                ///
                /// # Panics
                ///
                /// If the given range is out of bounds or is not aligned to `char` boundaries.
                pub fn kill_range<R: RangeArgument<usize>>(&mut self, range: R) -> io::Result<()> {
                    let start = range.start().cloned().unwrap_or(0);
                    let end = range.end().cloned().unwrap_or_else(|| self.write.buffer.len());
                    let len = end - start;

                    if len != 0 {
                        let buf = self.write.buffer[start..end].to_owned();

                        if self.read.last_cmd != Category::Kill {
                            self.push_kill_ring(buf);
                        } else if end == self.write.cursor {
                            self.prepend_kill_ring(buf);
                        } else {
                            self.append_kill_ring(buf);
                        }

                        self.delete_range(start..end)?;
                    }

                    Ok(())
                }

                fn push_kill_ring(&mut self, s: String) {
                    if self.read.kill_ring.len() == self.read.kill_ring.capacity() {
                        self.read.kill_ring.pop_back();
                    }
                    self.read.kill_ring.push_front(s);
                }

                fn rotate_kill_ring(&mut self) {
                    if let Some(kill) = self.read.kill_ring.pop_front() {
                        self.read.kill_ring.push_back(kill);
                    }
                }

                fn append_kill_ring(&mut self, s: String) {
                    if let Some(kill) = self.read.kill_ring.front_mut() {
                        kill.push_str(&s);
                        return;
                    }
                    self.push_kill_ring(s);
                }

                fn prepend_kill_ring(&mut self, s: String) {
                    if let Some(kill) = self.read.kill_ring.front_mut() {
                        kill.insert_str(0, &s);
                        return;
                    }
                    self.push_kill_ring(s);
                }

                /// Transposes two regions of the buffer, `src` and `dest`.
                /// The cursor is placed at the end of the new location of `src`.
                ///
                /// # Panics
                ///
                /// If `src` and `dest` overlap, are out of bounds,
                /// or are not aligned to `char` boundaries.
                pub fn transpose_range(&mut self, src: Range<usize>, dest: Range<usize>)
                        -> io::Result<()> {
                    self.write.transpose_range(src, dest)
                }

                /// Insert text from the front of the kill ring at the current cursor position.
                /// The cursor is placed at the end of the new text.
                pub fn yank(&mut self) -> io::Result<()> {
                    if let Some(kill) = self.read.kill_ring.front().cloned() {
                        let start = self.write.cursor;
                        self.read.last_yank = Some((start, start + kill.len()));

                        self.insert_str(&kill)?;
                    }

                    Ok(())
                }

                /// Rotates the kill ring and replaces yanked text with the new front.
                ///
                /// If the previous operation was not `yank`, this has no effect.
                pub fn yank_pop(&mut self) -> io::Result<()> {
                    if let Some((start, end)) = self.read.last_yank {
                        self.rotate_kill_ring();

                        if let Some(kill) = self.read.kill_ring.front().cloned() {
                            self.read.last_yank = Some((start, start + kill.len()));

                            self.write.move_to(start)?;
                            self.replace_str_forward(start..end, &kill)?;
                        }
                    }

                    Ok(())
                }

                /// Overwrite `n` characters; assumes `n >= 1`
                fn overwrite(&mut self, n: usize, ch: char) -> io::Result<()> {
                    let start = self.write.cursor;
                    let end = forward_char(n, &self.write.buffer, start);

                    {
                        let over = &self.write.buffer[start..end];
                        let n_chars = over.chars().count();

                        if n > n_chars {
                            self.read.overwritten_append += n - n_chars;
                        }

                        if !over.is_empty() {
                            self.read.overwritten_chars.push_str(&over);
                        }
                    }

                    let s = repeat_char(ch, n);
                    self.replace_str_forward(start..end, &s)
                }

                fn overwrite_back(&mut self, mut n: usize) -> io::Result<()> {
                    if self.read.overwritten_append != 0 {
                        let n_del = n.min(self.read.overwritten_append);

                        let pos = backward_char(n_del, &self.write.buffer, self.write.cursor);
                        let r = pos..self.write.cursor;
                        self.delete_range(r)?;

                        self.read.overwritten_append -= n_del;
                        n -= n_del;
                    }

                    if n != 0 && !self.read.overwritten_chars.is_empty() {
                        let n_repl = n.min(self.read.overwritten_chars.chars().count());

                        let pos = backward_char(n_repl, &self.write.buffer, self.write.cursor);

                        let over_pos = backward_char(n_repl,
                            &self.read.overwritten_chars, self.read.overwritten_chars.len());

                        let over = self.read.overwritten_chars.drain(over_pos..).collect::<String>();

                        let r = pos..self.write.cursor;
                        self.replace_str_backward(r, &over)?;

                        n -= n_repl;
                    }

                    if n != 0 {
                        self.write.backward_char(n)?;
                    }

                    Ok(())
                }

                /// Insert a given character at the current cursor position `n` times.
                ///
                /// The cursor position remains the same.
                pub fn insert(&mut self, n: usize, ch: char) -> io::Result<()> {
                    if n != 0 {
                        let s = repeat_char(ch, n);
                        self.insert_str(&s)?;
                    }

                    Ok(())
                }

                /// Insert a string at the current cursor position.
                ///
                /// The cursor is placed at the end of the new string.
                pub fn insert_str(&mut self, s: &str) -> io::Result<()> {
                    self.write.insert_str(s)
                }

                /// Replaces a range in the buffer and redraws.
                ///
                /// The cursor is placed at the start of the range.
                pub fn replace_str_backward<R: RangeArgument<usize>>(&mut self,
                        range: R, s: &str) -> io::Result<()> {
                    self.replace_str_impl(range, s)?;
                    let len = self.write.buffer.len();
                    self.write.move_from(len)
                }

                /// Replaces a range in the buffer and redraws.
                ///
                /// The cursor is placed at the end of the new string.
                pub fn replace_str_forward<R: RangeArgument<usize>>(&mut self,
                        range: R, s: &str) -> io::Result<()> {
                    self.replace_str_impl(range, s)?;
                    self.write.cursor += s.len();
                    let len = self.write.buffer.len();
                    self.write.move_from(len)
                }

                /// Replaces a range in the buffer and redraws.
                ///
                /// The cursor position is set to start of range, on-screen cursor remains
                /// at end of buffer.
                fn replace_str_impl<R: RangeArgument<usize>>(&mut self,
                        range: R, s: &str) -> io::Result<()> {
                    let start = range.start().cloned().unwrap_or(0);
                    let end = range.end().cloned().unwrap_or_else(|| self.write.buffer.len());
                    self.write.move_to(start)?;

                    let _ = self.write.buffer.drain(start..end);
                    let cursor = self.write.cursor;
                    self.write.buffer.insert_str(cursor, s);

                    self.write.draw_buffer(cursor)?;
                    self.write.clear_to_screen_end()
                }
            }
        }

        pub mod reader
        {
            /*!
            Provides access to terminal read operations. */
            use ::
            {
                *,
            };
            /*
            use std::borrow::Cow;
            use std::collections::{HashMap, VecDeque};
            use std::io;
            use std::mem::replace;
            use std::ops::{Deref, DerefMut};
            use std::path::{Path, PathBuf};
            use std::slice;
            use std::sync::{Arc, MutexGuard};
            use std::time::{Duration, Instant};

            use mortal::SequenceMap;

            use crate::command::{Category, Command};
            use crate::complete::{Completer, Completion, DummyCompleter};
            use crate::function::Function;
            use crate::inputrc::{parse_file, Directive};
            use crate::interface::Interface;
            use crate::prompter::Prompter;
            use crate::sys::path::{env_init_file, system_init_file, user_init_file};
            use crate::terminal::{
                RawRead, Signal, SignalSet, Size,
                Terminal, TerminalReader,
            };
            use crate::util::{first_char, match_name};
            use crate::variables::{Variable, Variables, VariableIter};
            */
            /// Default set of string characters
            pub const STRING_CHARS: &str = "\"'";

            /// Default set of word break characters
            pub const WORD_BREAK_CHARS: &str = " \t\n\"\\'`@$><=;|&{(";

            /// Indicates the start of a series of invisible characters in the prompt
            pub const START_INVISIBLE: char = '\x01';

            /// Indicates the end of a series of invisible characters in the prompt
            pub const END_INVISIBLE: char = '\x02';

            /// Maximum size of kill ring
            const MAX_KILLS: usize = 10;

            /// Provides access to data related to reading and processing user input.
            ///
            /// Holds a lock on terminal read operations.
            /// See [`Interface`] for more information about concurrent operations.
            ///
            /// An instance of this type can be constructed using the
            /// [`Interface::lock_reader`] method.
            ///
            /// [`Interface`]: ../interface/struct.Interface.html
            /// [`Interface::lock_reader`]: ../interface/struct.Interface.html#method.lock_reader
            pub struct Reader<'a, Term: 'a + Terminal> {
                iface: &'a Interface<Term>,
                lock: ReadLock<'a, Term>,
            }

            pub(crate) struct Read<Term: Terminal> {
                /// Application name
                pub application: Cow<'static, str>,

                /// Pending input
                pub input_buffer: Vec<u8>,
                /// Pending macro sequence
                pub macro_buffer: String,

                pub bindings: SequenceMap<Cow<'static, str>, Command>,
                pub functions: HashMap<Cow<'static, str>, Arc<dyn Function<Term>>>,

                /// Current input sequence
                pub sequence: String,
                /// Whether newline has been received
                pub input_accepted: bool,

                /// Whether overwrite mode is currently active
                pub overwrite_mode: bool,
                /// Characters appended while in overwrite mode
                pub overwritten_append: usize,
                /// Characters overwritten in overwrite mode
                pub overwritten_chars: String,

                /// Configured completer
                pub completer: Arc<dyn Completer<Term>>,
                /// Character appended to completions
                pub completion_append_character: Option<char>,
                /// Current set of possible completions
                pub completions: Option<Vec<Completion>>,
                /// Current "menu-complete" entry being viewed:
                pub completion_index: usize,
                /// Start of the completed word
                pub completion_start: usize,
                /// Start of the inserted prefix of a completed word
                pub completion_prefix: usize,

                pub string_chars: Cow<'static, str>,
                pub word_break: Cow<'static, str>,

                pub last_cmd: Category,
                pub last_yank: Option<(usize, usize)>,
                pub kill_ring: VecDeque<String>,

                pub catch_signals: bool,
                pub ignore_signals: SignalSet,
                pub report_signals: SignalSet,
                pub last_resize: Option<Size>,
                pub last_signal: Option<Signal>,

                variables: Variables,

                pub state: InputState,
                pub max_wait_duration: Option<Duration>,
            }

            pub(crate) struct ReadLock<'a, Term: 'a + Terminal> {
                term: Box<dyn TerminalReader<Term> + 'a>,
                data: MutexGuard<'a, Read<Term>>,
            }

            /// Returned from [`read_line`] to indicate user input
            ///
            /// [`read_line`]: ../interface/struct.Interface.html#method.read_line
            #[derive(Debug)]
            pub enum ReadResult {
                /// User issued end-of-file
                Eof,
                /// User input received
                Input(String),
                /// Reported signal was received
                Signal(Signal),
            }

            #[derive(Copy, Clone, Debug)]
            pub(crate) enum InputState {
                Inactive,
                NewSequence,
                ContinueSequence{
                    expiry: Option<Instant>,
                },
                Number,
                CharSearch{
                    n: usize,
                    backward: bool,
                },
                TextSearch,
                CompleteIntro,
                CompleteMore(usize),
                QuotedInsert(usize),
            }

            impl<'a, Term: 'a + Terminal> Reader<'a, Term> {
                pub(crate) fn new(iface: &'a Interface<Term>, lock: ReadLock<'a, Term>)
                        -> Reader<'a, Term> {
                    Reader{iface, lock}
                }

                /// Interactively reads a line from the terminal device.
                ///
                /// User input is collected until one of the following conditions is met:
                ///
                /// * If the user issues an end-of-file, `ReadResult::Eof` is returned.
                /// * When the user inputs a newline (`'\n'`), the resulting input
                ///   (not containing a trailing newline character) is returned as
                ///   `ReadResult::Input(_)`.
                /// * When a reported signal (see [`set_report_signal`]) is received,
                ///   it is returned as `ReadResult::Signal(_)`. The `read_line` operation may
                ///   then be either resumed with another call to `read_line` or ended by
                ///   calling [`cancel_read_line`].
                ///
                /// [`cancel_read_line`]: #method.cancel_read_line
                /// [`set_report_signal`]: #method.set_report_signal
                pub fn read_line(&mut self) -> io::Result<ReadResult> {
                    loop {
                        if let Some(res) = self.read_line_step(None)? {
                            return Ok(res);
                        }
                    }
                }

                /// Performs one step of the interactive `read_line` loop.
                ///
                /// This method can be used to drive the `read_line` process asynchronously.
                /// It will wait for input only up to the specified duration, then process
                /// any available input from the terminal.
                ///
                /// If the user completes the input process, `Ok(Some(result))` is returned.
                /// Otherwise, `Ok(None)` is returned to indicate that the interactive loop
                /// may continue.
                ///
                /// The interactive prompt may be cancelled prematurely using the
                /// [`cancel_read_line`] method.
                ///
                /// See [`read_line`] for details on the return value.
                ///
                /// [`cancel_read_line`]: #method.cancel_read_line
                /// [`read_line`]: #method.read_line
                pub fn read_line_step(&mut self, timeout: Option<Duration>)
                        -> io::Result<Option<ReadResult>> {
                    self.initialize_read_line()?;

                    let state = self.prepare_term()?;
                    let res = self.read_line_step_impl(timeout);
                    self.lock.term.restore(state)?;

                    res
                }

                /// Cancels an in-progress `read_line` operation.
                ///
                /// This method will reset internal data structures to their original state
                /// and move the terminal cursor to a new, empty line.
                ///
                /// This method is called to prematurely end the interactive loop when
                /// using the [`read_line_step`] method.
                ///
                /// It is not necessary to call this method if using the [`read_line`] method.
                ///
                /// [`read_line`]: #method.read_line
                /// [`read_line_step`]: #method.read_line_step
                pub fn cancel_read_line(&mut self) -> io::Result<()> {
                    self.end_read_line()
                }

                fn initialize_read_line(&mut self) -> io::Result<()> {
                    if !self.lock.is_active() {
                        self.prompter().start_read_line()?;
                    }
                    Ok(())
                }

                fn read_line_step_impl(&mut self, timeout: Option<Duration>)
                        -> io::Result<Option<ReadResult>> {
                    let do_read = if self.lock.is_input_available() {
                        // This branch will be taken only if a macro has buffered some input.
                        // We check for input with a zero duration to see if the user has
                        // entered Ctrl-C, e.g. to interrupt an infinitely recursive macro.
                        self.lock.term.wait_for_input(Some(Duration::from_secs(0)))?
                    } else {
                        let timeout = limit_duration(timeout, self.lock.max_wait_duration);
                        self.lock.term.wait_for_input(timeout)?
                    };

                    if do_read {
                        self.lock.read_input()?;
                    }

                    if let Some(size) = self.lock.take_resize() {
                        self.handle_resize(size)?;
                    }

                    if let Some(sig) = self.lock.take_signal() {
                        if self.lock.report_signals.contains(sig) {
                            return Ok(Some(ReadResult::Signal(sig)));
                        }
                        if !self.lock.ignore_signals.contains(sig) {
                            self.handle_signal(sig)?;
                        }
                    }

                    // Acquire the write lock and process all available input
                    {
                        let mut prompter = self.prompter();

                        prompter.check_expire_timeout()?;

                        // If the macro buffer grows in size while input is being processed,
                        // we end this step and let the caller try again. This is to allow
                        // reading Ctrl-C to interrupt (perhaps infinite) macro execution.
                        let mut macro_len = prompter.read.data.macro_buffer.len();

                        while prompter.read.is_input_available() {
                            if let Some(ch) = prompter.read.read_char()? {
                                if let Some(r) = prompter.handle_input(ch)? {
                                    prompter.end_read_line()?;
                                    return Ok(Some(r));
                                }
                            }

                            let new_macro_len = prompter.read.data.macro_buffer.len();

                            if new_macro_len != 0 && new_macro_len >= macro_len {
                                break;
                            }

                            macro_len = new_macro_len;
                        }
                    }

                    Ok(None)
                }

                fn end_read_line(&mut self) -> io::Result<()> {
                    if self.lock.is_active() {
                        self.prompter().end_read_line()?;
                    }
                    Ok(())
                }

                fn prepare_term(&mut self) -> io::Result<Term::PrepareState> {
                    if self.read_next_raw() {
                        self.lock.term.prepare(true, SignalSet::new())
                    } else {
                        let mut signals = self.lock.report_signals.union(self.lock.ignore_signals);

                        if self.lock.catch_signals {
                            // Ctrl-C is always intercepted (unless we're catching no signals).
                            // By default, lineread handles it by clearing the current input state.
                            signals.insert(Signal::Interrupt);
                        }

                        let block_signals = !self.lock.catch_signals;

                        self.lock.term.prepare(block_signals, signals)
                    }
                }

                fn read_next_raw(&self) -> bool {
                    match self.lock.state {
                        InputState::QuotedInsert(_) => true,
                        _ => false
                    }
                }

                /// Sets the input buffer to the given string.
                ///
                /// This method internally acquires the `Interface` write lock.
                ///
                /// # Notes
                ///
                /// To prevent invalidating the cursor, this method sets the cursor
                /// position to the end of the new buffer.
                pub fn set_buffer(&mut self, buf: &str) -> io::Result<()> {
                    if self.lock.is_active() {
                        self.prompter().set_buffer(buf)
                    } else {
                        self.iface.lock_write_data().set_buffer(buf);
                        Ok(())
                    }
                }

                /// Sets the cursor position in the input buffer.
                ///
                /// This method internally acquires the `Interface` write lock.
                ///
                /// # Panics
                ///
                /// If the given position is out of bounds or not on a `char` boundary.
                pub fn set_cursor(&mut self, pos: usize) -> io::Result<()> {
                    if self.lock.is_active() {
                        self.prompter().set_cursor(pos)
                    } else {
                        self.iface.lock_write_data().set_cursor(pos);
                        Ok(())
                    }
                }

                /// Sets the prompt that will be displayed when `read_line` is called.
                ///
                /// This method internally acquires the `Interface` write lock.
                ///
                /// # Notes
                ///
                /// If `prompt` contains any terminal escape sequences (e.g. color codes),
                /// such escape sequences should be immediately preceded by the character
                /// `'\x01'` and immediately followed by the character `'\x02'`.
                pub fn set_prompt(&mut self, prompt: &str) -> io::Result<()> {
                    self.prompter().set_prompt(prompt)
                }

                /// Adds a line to history.
                ///
                /// This method internally acquires the `Interface` write lock.
                ///
                /// If a `read_line` call is in progress, this method has no effect.
                pub fn add_history(&self, line: String) {
                    if !self.lock.is_active() {
                        self.iface.lock_write().add_history(line);
                    }
                }

                /// Adds a line to history, unless it is identical to the most recent entry.
                ///
                /// This method internally acquires the `Interface` write lock.
                ///
                /// If a `read_line` call is in progress, this method has no effect.
                pub fn add_history_unique(&self, line: String) {
                    if !self.lock.is_active() {
                        self.iface.lock_write().add_history_unique(line);
                    }
                }

                /// Removes all history entries.
                ///
                /// This method internally acquires the `Interface` write lock.
                ///
                /// If a `read_line` call is in progress, this method has no effect.
                pub fn clear_history(&self) {
                    if !self.lock.is_active() {
                        self.iface.lock_write().clear_history();
                    }
                }

                /// Removes the history entry at the given index.
                ///
                /// This method internally acquires the `Interface` write lock.
                ///
                /// If the index is out of bounds, this method has no effect.
                ///
                /// If a `read_line` call is in progress, this method has no effect.
                pub fn remove_history(&self, idx: usize) {
                    if !self.lock.is_active() {
                        self.iface.lock_write().remove_history(idx);
                    }
                }

                /// Sets the maximum number of history entries.
                ///
                /// This method internally acquires the `Interface` write lock.
                ///
                /// If `n` is less than the current number of history entries,
                /// the oldest entries are truncated to meet the given requirement.
                ///
                /// If a `read_line` call is in progress, this method has no effect.
                pub fn set_history_size(&self, n: usize) {
                    if !self.lock.is_active() {
                        self.iface.lock_write().set_history_size(n);
                    }
                }

                /// Truncates history to the only the most recent `n` entries.
                ///
                /// This method internally acquires the `Interface` write lock.
                ///
                /// If a `read_line` call is in progress, this method has no effect.
                pub fn truncate_history(&self, n: usize) {
                    if !self.lock.is_active() {
                        self.iface.lock_write().truncate_history(n);
                    }
                }

                /// Returns the application name
                pub fn application(&self) -> &str {
                    &self.lock.application
                }

                /// Sets the application name
                pub fn set_application<T>(&mut self, application: T)
                        where T: Into<Cow<'static, str>> {
                    self.lock.application = application.into();
                }

                /// Returns a reference to the current completer instance.
                pub fn completer(&self) -> &Arc<dyn Completer<Term>> {
                    &self.lock.completer
                }

                /// Replaces the current completer, returning the previous instance.
                pub fn set_completer(&mut self, completer: Arc<dyn Completer<Term>>)
                        -> Arc<dyn Completer<Term>> {
                    replace(&mut self.lock.completer, completer)
                }

                /// Returns the value of the named variable or `None`
                /// if no such variable exists.
                pub fn get_variable(&self, name: &str) -> Option<Variable> {
                    self.lock.get_variable(name)
                }

                /// Sets the value of the named variable and returns the previous
                /// value.
                ///
                /// If `name` does not refer to a variable or the `value` is not
                /// a valid value for the variable, `None` is returned.
                pub fn set_variable(&mut self, name: &str, value: &str) -> Option<Variable> {
                    self.lock.set_variable(name, value)
                }

                /// Returns an iterator over stored variables.
                pub fn variables(&self) -> VariableIter {
                    self.lock.variables.iter()
                }

                /// Returns whether to "blink" matching opening parenthesis character
                /// when a closing parenthesis character is entered.
                ///
                /// The default value is `false`.
                pub fn blink_matching_paren(&self) -> bool {
                    self.lock.blink_matching_paren
                }

                /// Sets the `blink-matching-paren` variable.
                pub fn set_blink_matching_paren(&mut self, set: bool) {
                    self.lock.blink_matching_paren = set;
                }

                /// Returns whether `lineread` will catch certain signals.
                pub fn catch_signals(&self) -> bool {
                    self.lock.catch_signals
                }

                /// Sets whether `lineread` will catch certain signals.
                ///
                /// This setting is `true` by default. It can be disabled to allow the
                /// host program to handle signals itself.
                pub fn set_catch_signals(&mut self, enabled: bool) {
                    self.lock.catch_signals = enabled;
                }

                /// Returns whether the given `Signal` is ignored.
                pub fn ignore_signal(&self, signal: Signal) -> bool {
                    self.lock.ignore_signals.contains(signal)
                }

                /// Sets whether the given `Signal` will be ignored.
                pub fn set_ignore_signal(&mut self, signal: Signal, set: bool) {
                    if set {
                        self.lock.ignore_signals.insert(signal);
                        self.lock.report_signals.remove(signal);
                    } else {
                        self.lock.ignore_signals.remove(signal);
                    }
                }

                /// Returns whether the given `Signal` is to be reported.
                pub fn report_signal(&self, signal: Signal) -> bool {
                    self.lock.report_signals.contains(signal)
                }

                /// Sets whether to report the given `Signal`.
                ///
                /// When a reported signal is received via the terminal, it will be returned
                /// from `Interface::read_line` as `Ok(Signal(signal))`.
                pub fn set_report_signal(&mut self, signal: Signal, set: bool) {
                    if set {
                        self.lock.report_signals.insert(signal);
                        self.lock.ignore_signals.remove(signal);
                    } else {
                        self.lock.report_signals.remove(signal);
                    }
                }

                /// Returns whether Tab completion is disabled.
                ///
                /// The default value is `false`.
                pub fn disable_completion(&self) -> bool {
                    self.lock.disable_completion
                }

                /// Sets the `disable-completion` variable.
                pub fn set_disable_completion(&mut self, disable: bool) {
                    self.lock.disable_completion = disable;
                }

                /// When certain control characters are pressed, a character sequence
                /// equivalent to this character will be echoed.
                ///
                /// The default value is `true`.
                pub fn echo_control_characters(&self) -> bool {
                    self.lock.echo_control_characters
                }

                /// Sets the `echo-control-characters` variable.
                pub fn set_echo_control_characters(&mut self, echo: bool) {
                    self.lock.echo_control_characters = echo;
                }

                /// Returns the character, if any, that is appended to a successful completion.
                pub fn completion_append_character(&self) -> Option<char> {
                    self.lock.completion_append_character
                }

                /// Sets the character, if any, that is appended to a successful completion.
                pub fn set_completion_append_character(&mut self, ch: Option<char>) {
                    self.lock.completion_append_character = ch;
                }

                /// Returns the width of completion listing display.
                ///
                /// If this value is greater than the terminal width, terminal width is used
                /// instead.
                ///
                /// The default value is equal to `usize::max_value()`.
                pub fn completion_display_width(&self) -> usize {
                    self.lock.completion_display_width
                }

                /// Sets the `completion-display-width` variable.
                pub fn set_completion_display_width(&mut self, n: usize) {
                    self.lock.completion_display_width = n;
                }

                /// Returns the minimum number of completion items that require user
                /// confirmation before listing.
                ///
                /// The default value is `100`.
                pub fn completion_query_items(&self) -> usize {
                    self.lock.completion_query_items
                }

                /// Sets the `completion-query-items` variable.
                pub fn set_completion_query_items(&mut self, n: usize) {
                    self.lock.completion_query_items = n;
                }

                /// Returns the timeout to wait for further user input when an ambiguous
                /// sequence has been entered. If the value is `None`, wait is indefinite.
                ///
                /// The default value 500 milliseconds.
                pub fn keyseq_timeout(&self) -> Option<Duration> {
                    self.lock.keyseq_timeout
                }

                /// Sets the `keyseq-timeout` variable.
                pub fn set_keyseq_timeout(&mut self, timeout: Option<Duration>) {
                    self.lock.keyseq_timeout = timeout;
                }

                /// Returns whether to list possible completions one page at a time.
                ///
                /// The default value is `true`.
                pub fn page_completions(&self) -> bool {
                    self.lock.page_completions
                }

                /// Sets the `page-completions` variable.
                pub fn set_page_completions(&mut self, set: bool) {
                    self.lock.page_completions = set;
                }

                /// Returns whether to list completions horizontally, rather than down
                /// the screen.
                ///
                /// The default value is `false`.
                pub fn print_completions_horizontally(&self) -> bool {
                    self.lock.print_completions_horizontally
                }

                /// Sets the `print-completions-horizontally` variable.
                pub fn set_print_completions_horizontally(&mut self, set: bool) {
                    self.lock.print_completions_horizontally = set;
                }

                /// Returns the set of characters that delimit strings.
                pub fn string_chars(&self) -> &str {
                    &self.lock.string_chars
                }

                /// Sets the set of characters that delimit strings.
                pub fn set_string_chars<T>(&mut self, chars: T)
                        where T: Into<Cow<'static, str>> {
                    self.lock.string_chars = chars.into();
                }

                /// Returns the set of characters that indicate a word break.
                pub fn word_break_chars(&self) -> &str {
                    &self.lock.word_break
                }

                /// Sets the set of characters that indicate a word break.
                pub fn set_word_break_chars<T>(&mut self, chars: T)
                        where T: Into<Cow<'static, str>> {
                    self.lock.word_break = chars.into();
                }

                /// Returns an iterator over bound sequences
                pub fn bindings(&self) -> BindingIter {
                    self.lock.bindings()
                }

                /// Binds a sequence to a command.
                ///
                /// Returns the previously bound command.
                pub fn bind_sequence<T>(&mut self, seq: T, cmd: Command) -> Option<Command>
                        where T: Into<Cow<'static, str>> {
                    self.lock.bind_sequence(seq, cmd)
                }

                /// Binds a sequence to a command, if and only if the given sequence
                /// is not already bound to a command.
                ///
                /// Returns `true` if a new binding was created.
                pub fn bind_sequence_if_unbound<T>(&mut self, seq: T, cmd: Command) -> bool
                        where T: Into<Cow<'static, str>> {
                    self.lock.bind_sequence_if_unbound(seq, cmd)
                }

                /// Removes a binding for the given sequence.
                ///
                /// Returns the previously bound command.
                pub fn unbind_sequence(&mut self, seq: &str) -> Option<Command> {
                    self.lock.unbind_sequence(seq)
                }

                /// Defines a named function to which sequences may be bound.
                ///
                /// The name should consist of lowercase ASCII letters and numbers,
                /// containing no spaces, with words separated by hyphens. However,
                /// this is not a requirement.
                ///
                /// Returns the function previously defined with the same name.
                pub fn define_function<T>(&mut self, name: T, cmd: Arc<dyn Function<Term>>)
                        -> Option<Arc<dyn Function<Term>>> where T: Into<Cow<'static, str>> {
                    self.lock.define_function(name, cmd)
                }

                /// Removes a function defined with the given name.
                ///
                /// Returns the defined function.
                pub fn remove_function(&mut self, name: &str) -> Option<Arc<dyn Function<Term>>> {
                    self.lock.remove_function(name)
                }

                pub(crate) fn evaluate_directives(&mut self, term: &Term, dirs: Vec<Directive>) {
                    self.lock.data.evaluate_directives(term, dirs)
                }

                pub(crate) fn evaluate_directive(&mut self, term: &Term, dir: Directive) {
                    self.lock.data.evaluate_directive(term, dir)
                }

                fn prompter<'b>(&'b mut self) -> Prompter<'b, 'a, Term> {
                    Prompter::new(
                        &mut self.lock,
                        self.iface.lock_write())
                }

                fn handle_resize(&mut self, size: Size) -> io::Result<()> {
                    self.prompter().handle_resize(size)
                }

                fn handle_signal(&mut self, sig: Signal) -> io::Result<()> {
                    self.prompter().handle_signal(sig)
                }
            }

            impl<'a, Term: 'a + Terminal> ReadLock<'a, Term> {
                pub fn new(term: Box<dyn TerminalReader<Term> + 'a>, data: MutexGuard<'a, Read<Term>>)
                        -> ReadLock<'a, Term> {
                    ReadLock{term, data}
                }

                /// Reads the next character of input.
                ///
                /// Performs a non-blocking read from the terminal, if necessary.
                ///
                /// If non-input data was received (e.g. a signal) or insufficient input
                /// is available, `Ok(None)` is returned.
                pub fn read_char(&mut self) -> io::Result<Option<char>> {
                    if let Some(ch) = self.macro_pop() {
                        Ok(Some(ch))
                    } else if let Some(ch) = self.decode_input()? {
                        Ok(Some(ch))
                    } else {
                        Ok(None)
                    }
                }

                fn read_input(&mut self) -> io::Result<()> {
                    match self.term.read(&mut self.data.input_buffer)? {
                        RawRead::Bytes(_) => (),
                        RawRead::Resize(new_size) => {
                            self.last_resize = Some(new_size);
                        }
                        RawRead::Signal(sig) => {
                            self.last_signal = Some(sig);
                        }
                    }

                    Ok(())
                }

                fn is_input_available(&self) -> bool {
                    !self.data.macro_buffer.is_empty() || match self.peek_input() {
                        Ok(Some(_)) | Err(_) => true,
                        Ok(None) => false
                    }
                }

                fn macro_pop(&mut self) -> Option<char> {
                    if self.data.macro_buffer.is_empty() {
                        None
                    } else {
                        Some(self.data.macro_buffer.remove(0))
                    }
                }

                fn decode_input(&mut self) -> io::Result<Option<char>> {
                    let res = self.peek_input();

                    if let Ok(Some(ch)) = res {
                        self.data.input_buffer.drain(..ch.len_utf8());
                    }

                    res
                }

                fn peek_input(&self) -> io::Result<Option<char>> {
                    if self.data.input_buffer.is_empty() {
                        Ok(None)
                    } else {
                        first_char(&self.data.input_buffer)
                    }
                }

                pub fn reset_data(&mut self) {
                    self.data.reset_data();
                }
            }

            impl<'a, Term: 'a + Terminal> Deref for ReadLock<'a, Term> {
                type Target = Read<Term>;

                fn deref(&self) -> &Read<Term> {
                    &self.data
                }
            }

            impl<'a, Term: 'a + Terminal> DerefMut for ReadLock<'a, Term> {
                fn deref_mut(&mut self) -> &mut Read<Term> {
                    &mut self.data
                }
            }

            impl<Term: Terminal> Deref for Read<Term> {
                type Target = Variables;

                fn deref(&self) -> &Variables {
                    &self.variables
                }
            }

            impl<Term: Terminal> DerefMut for Read<Term> {
                fn deref_mut(&mut self) -> &mut Variables {
                    &mut self.variables
                }
            }

            impl<Term: Terminal> Read<Term> {
                pub fn new(term: &Term, application: Cow<'static, str>) -> Read<Term> {
                    let mut r = Read{
                        application,

                        bindings: default_bindings(),
                        functions: HashMap::new(),

                        input_buffer: Vec::new(),
                        macro_buffer: String::new(),

                        sequence: String::new(),
                        input_accepted: false,

                        overwrite_mode: false,
                        overwritten_append: 0,
                        overwritten_chars: String::new(),

                        completer: Arc::new(DummyCompleter),
                        completion_append_character: Some(' '),
                        completions: None,
                        completion_index: 0,
                        completion_start: 0,
                        completion_prefix: 0,

                        string_chars: STRING_CHARS.into(),
                        word_break: WORD_BREAK_CHARS.into(),

                        last_cmd: Category::Other,
                        last_yank: None,
                        kill_ring: VecDeque::with_capacity(MAX_KILLS),

                        catch_signals: true,
                        ignore_signals: SignalSet::new(),
                        report_signals: SignalSet::new(),
                        last_resize: None,
                        last_signal: None,

                        variables: Variables::default(),

                        state: InputState::Inactive,
                        max_wait_duration: None,
                    };

                    r.read_init(term);
                    r
                }

                pub fn bindings(&self) -> BindingIter {
                    BindingIter(self.bindings.sequences().iter())
                }

                pub fn variables(&self) -> VariableIter {
                    self.variables.iter()
                }

                fn take_resize(&mut self) -> Option<Size> {
                    self.last_resize.take()
                }

                fn take_signal(&mut self) -> Option<Signal> {
                    self.last_signal.take()
                }

                pub fn queue_input(&mut self, seq: &str) {
                    self.macro_buffer.insert_str(0, seq);
                }

                pub fn is_active(&self) -> bool {
                    match self.state {
                        InputState::Inactive => false,
                        _ => true
                    }
                }

                pub fn reset_data(&mut self) {
                    self.state = InputState::NewSequence;
                    self.input_accepted = false;
                    self.overwrite_mode = false;
                    self.overwritten_append = 0;
                    self.overwritten_chars.clear();
                    self.sequence.clear();

                    self.completions = None;

                    self.last_cmd = Category::Other;
                    self.last_yank = None;

                    self.last_resize = None;
                    self.last_signal = None;
                }

                pub fn bind_sequence<T>(&mut self, seq: T, cmd: Command) -> Option<Command>
                        where T: Into<Cow<'static, str>> {
                    self.bindings.insert(seq.into(), cmd)
                }

                pub fn bind_sequence_if_unbound<T>(&mut self, seq: T, cmd: Command) -> bool
                        where T: Into<Cow<'static, str>> {
                    use mortal::sequence::Entry;

                    match self.bindings.entry(seq.into()) {
                        Entry::Occupied(_) => false,
                        Entry::Vacant(ent) => {
                            ent.insert(cmd);
                            true
                        }
                    }
                }

                pub fn unbind_sequence(&mut self, seq: &str) -> Option<Command> {
                    self.bindings.remove(seq)
                        .map(|(_, cmd)| cmd)
                }

                pub fn define_function<T>(&mut self, name: T, cmd: Arc<dyn Function<Term>>)
                        -> Option<Arc<dyn Function<Term>>> where T: Into<Cow<'static, str>> {
                    self.functions.insert(name.into(), cmd)
                }

                pub fn remove_function(&mut self, name: &str) -> Option<Arc<dyn Function<Term>>> {
                    self.functions.remove(name)
                }

                fn read_init(&mut self, term: &Term) {
                    if let Some(path) = env_init_file() {
                        // If `INPUTRC` is present, even if invalid, parse nothing else.
                        // Thus, an empty `INPUTRC` will inhibit loading configuration.
                        self.read_init_file_if_exists(term, Some(path));
                    } else {
                        if !self.read_init_file_if_exists(term, user_init_file()) {
                            self.read_init_file_if_exists(term, system_init_file());
                        }
                    }
                }

                fn read_init_file_if_exists(&mut self, term: &Term, path: Option<PathBuf>) -> bool {
                    match path {
                        Some(ref path) if path.exists() => {
                            self.read_init_file(term, path);
                            true
                        }
                        _ => false
                    }
                }

                fn read_init_file(&mut self, term: &Term, path: &Path) {
                    if let Some(dirs) = parse_file(path) {
                        self.evaluate_directives(term, dirs);
                    }
                }

                /// Evaluates a series of configuration directives.
                pub(crate) fn evaluate_directives(&mut self, term: &Term, dirs: Vec<Directive>) {
                    for dir in dirs {
                        self.evaluate_directive(term, dir);
                    }
                }

                /// Evaluates a single configuration directive.
                pub(crate) fn evaluate_directive(&mut self, term: &Term, dir: Directive) {
                    match dir {
                        Directive::Bind(seq, cmd) => {
                            self.bind_sequence(seq, cmd);
                        }
                        Directive::Conditional{name, value, then_group, else_group} => {
                            let name = name.as_ref().map(|s| &s[..]);

                            if self.eval_condition(term, name, &value) {
                                self.evaluate_directives(term, then_group);
                            } else {
                                self.evaluate_directives(term, else_group);
                            }
                        }
                        Directive::SetVariable(name, value) => {
                            self.set_variable(&name, &value);
                        }
                    }
                }

                fn eval_condition(&self, term: &Term, name: Option<&str>, value: &str) -> bool {
                    match name {
                        None => self.application == value,
                        Some("lib") => value == "lineread",
                        Some("mode") => value == "emacs",
                        Some("term") => self.term_matches(term, value),
                        _ => false
                    }
                }

                fn term_matches(&self, term: &Term, value: &str) -> bool {
                    match_name(term.name(), value)
                }
            }

            /// Iterator over `Reader` bindings
            pub struct BindingIter<'a>(slice::Iter<'a, (Cow<'static, str>, Command)>);

            impl<'a> ExactSizeIterator for BindingIter<'a> {}

            impl<'a> Iterator for BindingIter<'a> {
                type Item = (&'a str, &'a Command);

                #[inline]
                fn next(&mut self) -> Option<Self::Item> {
                    self.0.next().map(|&(ref s, ref cmd)| (&s[..], cmd))
                }

                #[inline]
                fn nth(&mut self, n: usize) -> Option<Self::Item> {
                    self.0.nth(n).map(|&(ref s, ref cmd)| (&s[..], cmd))
                }

                #[inline]
                fn size_hint(&self) -> (usize, Option<usize>) {
                    self.0.size_hint()
                }
            }

            impl<'a> DoubleEndedIterator for BindingIter<'a> {
                #[inline]
                fn next_back(&mut self) -> Option<Self::Item> {
                    self.0.next_back().map(|&(ref s, ref cmd)| (&s[..], cmd))
                }
            }

            fn default_bindings() -> SequenceMap<Cow<'static, str>, Command> {
                use crate::command::Command::*;

                SequenceMap::from(vec![
                    // Carriage return and line feed
                    ("\r".into(), AcceptLine),
                    ("\n".into(), AcceptLine),

                    // Possible sequences for arrow keys, Home, End
                    ("\x1b[A".into(), PreviousHistory),
                    ("\x1b[B".into(), NextHistory),
                    ("\x1b[C".into(), ForwardChar),
                    ("\x1b[D".into(), BackwardChar),
                    ("\x1b[H".into(), BeginningOfLine),
                    ("\x1b[F".into(), EndOfLine),

                    // More possible sequences for arrow keys, Home, End
                    ("\x1bOA".into(), PreviousHistory),
                    ("\x1bOB".into(), NextHistory),
                    ("\x1bOC".into(), ForwardChar),
                    ("\x1bOD".into(), BackwardChar),
                    ("\x1bOH".into(), BeginningOfLine),
                    ("\x1bOF".into(), EndOfLine),

                    // Possible sequences for Insert, Delete
                    ("\x1b[2~".into(), OverwriteMode),
                    ("\x1b[3~".into(), DeleteChar),

                    // Basic commands
                    ("\x01"    .into(), BeginningOfLine),           // Ctrl-A
                    ("\x02"    .into(), BackwardChar),              // Ctrl-B
                    ("\x04"    .into(), DeleteChar),                // Ctrl-D
                    ("\x05"    .into(), EndOfLine),                 // Ctrl-E
                    ("\x06"    .into(), ForwardChar),               // Ctrl-F
                    ("\x07"    .into(), Abort),                     // Ctrl-G
                    ("\x08"    .into(), BackwardDeleteChar),        // Ctrl-H
                    ("\x0b"    .into(), KillLine),                  // Ctrl-K
                    ("\x0c"    .into(), ClearScreen),               // Ctrl-L
                    ("\x0e"    .into(), NextHistory),               // Ctrl-N
                    ("\x10"    .into(), PreviousHistory),           // Ctrl-P
                    ("\x12"    .into(), ReverseSearchHistory),      // Ctrl-R
                    ("\x14"    .into(), TransposeChars),            // Ctrl-T
                    ("\x15"    .into(), BackwardKillLine),          // Ctrl-U
                    ("\x16"    .into(), QuotedInsert),              // Ctrl-V
                    ("\x17"    .into(), UnixWordRubout),            // Ctrl-W
                    ("\x19"    .into(), Yank),                      // Ctrl-Y
                    ("\x1d"    .into(), CharacterSearch),           // Ctrl-]
                    ("\x7f"    .into(), BackwardDeleteChar),        // Rubout
                    ("\x1b\x08".into(), BackwardKillWord),          // Escape, Ctrl-H
                    ("\x1b\x1d".into(), CharacterSearchBackward),   // Escape, Ctrl-]
                    ("\x1b\x7f".into(), BackwardKillWord),          // Escape, Rubout
                    ("\x1bb"   .into(), BackwardWord),              // Escape, b
                    ("\x1bd"   .into(), KillWord),                  // Escape, d
                    ("\x1bf"   .into(), ForwardWord),               // Escape, f
                    ("\x1bt"   .into(), TransposeWords),            // Escape, t
                    ("\x1by"   .into(), YankPop),                   // Escape, y
                    ("\x1b#"   .into(), InsertComment),             // Escape, #
                    ("\x1b<"   .into(), BeginningOfHistory),        // Escape, <
                    ("\x1b>"   .into(), EndOfHistory),              // Escape, >

                    // Completion commands
                    ("\t"   .into(), Complete),             // Tab
                    ("\x1b?".into(), PossibleCompletions),  // Escape, ?
                    ("\x1b*".into(), InsertCompletions),    // Escape, *

                    // Digit commands
                    ("\x1b-".into(), DigitArgument),    // Escape, -
                    ("\x1b0".into(), DigitArgument),    // Escape, 0
                    ("\x1b1".into(), DigitArgument),    // Escape, 1
                    ("\x1b2".into(), DigitArgument),    // Escape, 2
                    ("\x1b3".into(), DigitArgument),    // Escape, 3
                    ("\x1b4".into(), DigitArgument),    // Escape, 4
                    ("\x1b5".into(), DigitArgument),    // Escape, 5
                    ("\x1b6".into(), DigitArgument),    // Escape, 6
                    ("\x1b7".into(), DigitArgument),    // Escape, 7
                    ("\x1b8".into(), DigitArgument),    // Escape, 8
                    ("\x1b9".into(), DigitArgument),    // Escape, 9
                ])
            }

            fn limit_duration(dur: Option<Duration>, max: Option<Duration>) -> Option<Duration> {
                match (dur, max) {
                    (dur, None) | (None, dur) => dur,
                    (Some(dur), Some(max)) => Some(dur.min(max)),
                }
            }
        }

        pub mod table
        {
            /*!
            Provides utilities for formatting strings in a table */
            use ::
            {
                *,
            };
            /*
            use std::cmp::min;
            */
            const COL_SPACE: usize = 2;
            /// Represents a table of strings, formatted into rows and columns
            ///
            /// A `Table` is an `Iterator` yielding `Line` elements, which are in turn
            /// iterators yielding `(usize, &str)` elements, describing the width and content
            /// of each cell in a given row.
            pub struct Table<'a, S: 'a> {
                strings: &'a [S],
                sizes: Option<&'a [usize]>,
                offset: usize,
                per_col: usize,
                rows: usize,
                horizontal: bool,
            }

            impl<'a, S: 'a + AsRef<str>> Table<'a, S> {
                /// Constructs a new table from the given set of strings, using the given
                /// column sizes.
                ///
                /// If `horizontal` is `true`, items will be list horizontally first.
                ///
                /// # Horizontal
                ///
                /// ```text
                /// a b c
                /// d e f
                /// g h i
                /// ```
                ///
                /// # Vertical
                ///
                /// ```text
                /// a d g
                /// b e h
                /// c f i
                /// ```
                pub fn new(strs: &'a [S], mut sizes: Option<&'a [usize]>,
                        horizontal: bool) -> Table<'a, S> {
                    if let Some(sz) = sizes {
                        if sz.is_empty() {
                            sizes = None;
                        }
                    }

                    let n_strs = strs.len();
                    let n_cols = sizes.map_or(1, |sz| sz.len());

                    let rows = n_strs / n_cols + (n_strs % n_cols != 0) as usize;

                    Table{
                        strings: strs,
                        sizes: sizes,
                        offset: 0,
                        per_col: (strs.len() + (n_cols - 1)) / n_cols,
                        rows: rows,
                        horizontal: horizontal,
                    }
                }

                /// Returns whether more lines are present in the table.
                pub fn has_more(&self) -> bool {
                    self.offset < self.rows
                }

                fn num_cols(&self) -> usize {
                    self.sizes.map_or(1, |sz| sz.len())
                }
            }

            impl<'a, S: 'a + AsRef<str>> Iterator for Table<'a, S> {
                type Item = Line<'a, S>;

                fn next(&mut self) -> Option<Line<'a, S>> {
                    if self.offset == self.rows {
                        return None;
                    }

                    let n = self.num_cols();

                    let (start, end, stride) = if self.horizontal {
                        let start = self.offset * n;
                        let end = min(self.strings.len(), start + n);
                        (start, end, 1)
                    } else {
                        let start = self.offset;
                        let end = min(self.strings.len(), start + self.per_col * n);
                        (start, end, self.per_col)
                    };

                    self.offset += 1;

                    Some(Line{
                        strings: &self.strings[start..end],
                        sizes: self.sizes,
                        stride: stride,
                        offset: 0,
                    })
                }
            }

            /// Represents a single line of the table
            ///
            /// A `Line` is an `Iterator` yielding `(usize, &str)` elements, describing
            /// the width and content of each cell in a given row.
            pub struct Line<'a, S: 'a> {
                strings: &'a [S],
                sizes: Option<&'a [usize]>,
                stride: usize,
                offset: usize,
            }

            impl<'a, S: 'a + AsRef<str>> Iterator for Line<'a, S> {
                type Item = (usize, &'a str);

                fn next(&mut self) -> Option<(usize, &'a str)> {
                    let s = self.strings.get(self.offset * self.stride)?.as_ref();

                    let width = self.sizes.and_then(|sz| sz.get(self.offset).cloned())
                        .unwrap_or_else(|| s.chars().count());

                    self.offset += 1;

                    Some((width, s))
                }
            }

            /// Formats a series of strings into columns, fitting within a given screen width.
            /// Returns the size of each resulting column, including spacing.
            ///
            /// If the strings cannot be formatted into columns (e.g. one or more strings
            /// are longer than the screen width) or the result would be only one column,
            /// `None` is returned.
            pub fn format_columns<S: AsRef<str>>(strs: &[S], screen_width: usize,
                    horizontal: bool) -> Option<Vec<usize>> {
                if strs.is_empty() {
                    return None;
                }

                let n_strs = strs.len();

                let (mut min_len, mut max_len) = min_max(strs.iter().map(|s| s.as_ref().chars().count()));

                if min_len == 0 { min_len = 1; }
                if max_len == 0 { max_len = 1; }

                let mut min_cols = min(n_strs, screen_width / max_len);
                let max_cols = min(n_strs, screen_width / min_len);

                if min_cols <= 1 {
                    // No point in checking whether text can fit within one column
                    min_cols = 2;
                }

                if max_cols <= 1 {
                    return None;
                }

                let mut col_sizes = if min_cols == max_cols {
                    vec![vec![0; max_cols]]
                } else {
                    (min_cols..max_cols + 1)
                        .map(|n| vec![0; n]).collect::<Vec<_>>()
                };

                for (i, s) in strs.iter().enumerate() {
                    let len = s.as_ref().chars().count();

                    for cols in &mut col_sizes {
                        let n_cols = cols.len();

                        let col = if horizontal {
                            i % n_cols
                        } else {
                            let per_col = (n_strs + (n_cols - 1)) / n_cols;
                            i / per_col
                        };

                        let real_len = if col == n_cols - 1 { len } else { len + COL_SPACE };

                        if real_len > cols[col] {
                            cols[col] = real_len;
                        }
                    }
                }

                for cols in col_sizes.into_iter().rev() {
                    if cols.iter().fold(0, |a, b| a + b) <= screen_width {
                        return Some(cols);
                    }
                }

                None
            }

            fn min_max<I>(iter: I) -> (usize, usize) where I: Iterator<Item=usize> {
                let mut min = usize::max_value();
                let mut max = 0;

                for n in iter {
                    if n < min {
                        min = n;
                    }
                    if n + COL_SPACE > max {
                        max = n + COL_SPACE;
                    }
                }

                (min, max)
            }
        }

        pub mod terminal
        {
            /*!
            Provides a low-level terminal interface. */
            use ::
            {
                *,
            };
            /*
            use std::io;
            use std::time::Duration;

            use mortal::{self, PrepareConfig, PrepareState, TerminalReadGuard, TerminalWriteGuard};
            use crate::sys;

            pub use mortal::{CursorMode, Signal, SignalSet, Size};
            */
            /// Default `Terminal` interface
            pub struct DefaultTerminal(mortal::Terminal);

            /// Represents the result of a `Terminal` read operation
            pub enum RawRead {
                /// `n` bytes were read from the device
                Bytes(usize),
                /// The terminal window was resized
                Resize(Size),
                /// A signal was received while waiting for input
                Signal(Signal),
            }

            /// Defines a low-level interface to the terminal
            pub trait Terminal: Sized + Send + Sync {
                // TODO: When generic associated types are implemented (and stabilized),
                // boxed trait objects may be replaced by `Reader` and `Writer`.
                /// Returned by `prepare`; passed to `restore` to restore state.
                type PrepareState;
                /*
                /// Holds an exclusive read lock and provides read operations
                type Reader: TerminalReader;
                /// Holds an exclusive write lock and provides write operations
                type Writer: TerminalWriter;
                */

                /// Returns the name of the terminal.
                fn name(&self) -> &str;

                /// Acquires a lock on terminal read operations and returns a value holding
                /// that lock and granting access to such operations.
                ///
                /// The lock must not be released until the returned value is dropped.
                fn lock_read<'a>(&'a self) -> Box<dyn TerminalReader<Self> + 'a>;

                /// Acquires a lock on terminal write operations and returns a value holding
                /// that lock and granting access to such operations.
                ///
                /// The lock must not be released until the returned value is dropped.
                fn lock_write<'a>(&'a self) -> Box<dyn TerminalWriter<Self> + 'a>;
            }

            /// Holds a lock on `Terminal` read operations
            pub trait TerminalReader<Term: Terminal> {
                /// Prepares the terminal for line reading and editing operations.
                ///
                /// If `block_signals` is `true`, the terminal will be configured to treat
                /// special characters that would otherwise be interpreted as signals as
                /// their literal value.
                ///
                /// If `block_signals` is `false`, a signal contained in the `report_signals`
                /// set may be returned.
                ///
                /// # Notes
                ///
                /// This method may be called more than once. However, if the state values
                /// are not restored in reverse order in which they were created,
                /// the state of the underlying terminal device becomes undefined.
                fn prepare(&mut self, block_signals: bool, report_signals: SignalSet)
                    -> io::Result<Term::PrepareState>;

                /// Like `prepare`, but called when the write lock is already held.
                ///
                /// # Safety
                ///
                /// This method must be called with a `TerminalWriter` instance returned
                /// by the same `Terminal` instance to which this `TerminalReader` belongs.
                unsafe fn prepare_with_lock(&mut self, lock: &mut dyn TerminalWriter<Term>,
                        block_signals: bool, report_signals: SignalSet)
                        -> io::Result<Term::PrepareState>;

                /// Restores the terminal state using the given state data.
                fn restore(&mut self, state: Term::PrepareState) -> io::Result<()>;

                /// Like `restore`, but called when the write lock is already held.
                ///
                /// # Safety
                ///
                /// This method must be called with a `TerminalWriter` instance returned
                /// by the same `Terminal` instance to which this `TerminalReader` belongs.
                unsafe fn restore_with_lock(&mut self, lock: &mut dyn TerminalWriter<Term>,
                        state: Term::PrepareState) -> io::Result<()>;

                /// Reads some input from the terminal and appends it to the given buffer.
                fn read(&mut self, buf: &mut Vec<u8>) -> io::Result<RawRead>;

                /// Waits `timeout` for user input. If `timeout` is `None`, waits indefinitely.
                ///
                /// Returns `Ok(true)` if input becomes available within the given timeout
                /// or if a signal is received.
                ///
                /// Returns `Ok(false)` if the timeout expires before input becomes available.
                fn wait_for_input(&mut self, timeout: Option<Duration>) -> io::Result<bool>;
            }

            /// Holds a lock on `Terminal` write operations
            pub trait TerminalWriter<Term: Terminal> {
                /// Returns the size of the terminal window
                fn size(&self) -> io::Result<Size>;

                /// Presents a clear terminal screen, with cursor at first row, first column.
                ///
                /// If the terminal possesses a scrolling window over a buffer, this shall
                /// have the effect of moving the visible window down such that it shows
                /// an empty view of the buffer, preserving some or all of existing buffer
                /// contents, where possible.
                fn clear_screen(&mut self) -> io::Result<()>;

                /// Clears characters on the line occupied by the cursor, beginning with the
                /// cursor and ending at the end of the line. Also clears all characters on
                /// all lines after the cursor.
                fn clear_to_screen_end(&mut self) -> io::Result<()>;

                /// Moves the cursor up `n` cells; `n` may be zero.
                fn move_up(&mut self, n: usize) -> io::Result<()>;

                /// Moves the cursor down `n` cells; `n` may be zero.
                fn move_down(&mut self, n: usize) -> io::Result<()>;

                /// Moves the cursor left `n` cells; `n` may be zero.
                fn move_left(&mut self, n: usize) -> io::Result<()>;

                /// Moves the cursor right `n` cells; `n` may be zero.
                fn move_right(&mut self, n: usize) -> io::Result<()>;

                /// Moves the cursor to the first column of the current line
                fn move_to_first_column(&mut self) -> io::Result<()>;

                /// Set the current cursor mode
                fn set_cursor_mode(&mut self, mode: CursorMode) -> io::Result<()>;

                /// Writes output to the terminal.
                ///
                /// For each carriage return `'\r'` written to the terminal, the cursor
                /// should be moved to the first column of the current line.
                ///
                /// For each newline `'\n'` written to the terminal, the cursor should
                /// be moved to the first column of the following line.
                ///
                /// The terminal interface shall not automatically move the cursor to the next
                /// line when `write` causes a character to be written to the final column.
                fn write(&mut self, s: &str) -> io::Result<()>;

                /// Flushes any currently buffered output data.
                ///
                /// `TerminalWriter` instances may not buffer data on all systems.
                ///
                /// Data must be flushed when the `TerminalWriter` instance is dropped.
                fn flush(&mut self) -> io::Result<()>;
            }

            impl DefaultTerminal {
                /// Opens access to the terminal device associated with standard output.
                pub fn new() -> io::Result<DefaultTerminal> {
                    mortal::Terminal::new().map(DefaultTerminal)
                }

                /// Opens access to the terminal device associated with standard error.
                pub fn stderr() -> io::Result<DefaultTerminal> {
                    mortal::Terminal::stderr().map(DefaultTerminal)
                }

                unsafe fn cast_writer<'a>(writer: &'a mut dyn TerminalWriter<Self>)
                        -> &'a mut TerminalWriteGuard<'a> {
                    &mut *(writer as *mut _ as *mut TerminalWriteGuard)
                }
            }

            impl Terminal for DefaultTerminal {
                type PrepareState = PrepareState;

                fn name(&self) -> &str {
                    self.0.name()
                }

                fn lock_read<'a>(&'a self) -> Box<dyn TerminalReader<Self> + 'a> {
                    Box::new(self.0.lock_read().unwrap())
                }

                fn lock_write<'a>(&'a self) -> Box<dyn TerminalWriter<Self> + 'a> {
                    Box::new(self.0.lock_write().unwrap())
                }
            }

            impl<'a> TerminalReader<DefaultTerminal> for TerminalReadGuard<'a> {
                fn prepare(&mut self, block_signals: bool, report_signals: SignalSet)
                        -> io::Result<PrepareState> {
                    self.prepare(PrepareConfig{
                        block_signals,
                        enable_control_flow: !block_signals,
                        enable_keypad: false,
                        report_signals,
                        .. PrepareConfig::default()
                    })
                }

                unsafe fn prepare_with_lock(&mut self,
                        lock: &mut dyn TerminalWriter<DefaultTerminal>,
                        block_signals: bool, report_signals: SignalSet)
                        -> io::Result<PrepareState> {
                    let lock = DefaultTerminal::cast_writer(lock);

                    self.prepare_with_lock(lock, PrepareConfig{
                        block_signals,
                        enable_control_flow: !block_signals,
                        enable_keypad: false,
                        report_signals,
                        .. PrepareConfig::default()
                    })
                }

                fn restore(&mut self, state: PrepareState) -> io::Result<()> {
                    self.restore(state)
                }

                unsafe fn restore_with_lock(&mut self,
                        lock: &mut dyn TerminalWriter<DefaultTerminal>, state: PrepareState)
                        -> io::Result<()> {
                    let lock = DefaultTerminal::cast_writer(lock);
                    self.restore_with_lock(lock, state)
                }

                fn read(&mut self, buf: &mut Vec<u8>) -> io::Result<RawRead> {
                    sys::terminal_read(self, buf)
                }

                fn wait_for_input(&mut self, timeout: Option<Duration>) -> io::Result<bool> {
                    self.wait_event(timeout)
                }

            }

            impl<'a> TerminalWriter<DefaultTerminal> for TerminalWriteGuard<'a> {
                fn size(&self) -> io::Result<Size> {
                    self.size()
                }

                fn clear_screen(&mut self) -> io::Result<()> {
                    self.clear_screen()
                }

                fn clear_to_screen_end(&mut self) -> io::Result<()> {
                    self.clear_to_screen_end()
                }

                fn move_up(&mut self, n: usize) -> io::Result<()> {
                    self.move_up(n)
                }
                fn move_down(&mut self, n: usize) -> io::Result<()> {
                    self.move_down(n)
                }
                fn move_left(&mut self, n: usize) -> io::Result<()> {
                    self.move_left(n)
                }
                fn move_right(&mut self, n: usize) -> io::Result<()> {
                    self.move_right(n)
                }

                fn move_to_first_column(&mut self) -> io::Result<()> {
                    self.move_to_first_column()
                }

                fn set_cursor_mode(&mut self, mode: CursorMode) -> io::Result<()> {
                    self.set_cursor_mode(mode)
                }

                fn write(&mut self, s: &str) -> io::Result<()> {
                    self.write_str(s)
                }

                fn flush(&mut self) -> io::Result<()> {
                    self.flush()
                }
            }
        }

        pub mod util
        {
            /*!
            Provides miscellaneous utilities */
            use ::
            {
                *,
            };
            /*
            use std::borrow::Cow;
            use std::io;
            use std::ops::{Range, RangeFrom, RangeFull, RangeTo};
            use std::str::{from_utf8, from_utf8_unchecked};
            */
            pub fn filter_visible(s: &str) -> Cow<str>
            {
                use crate::reader::{START_INVISIBLE, END_INVISIBLE};

                if !s.contains(START_INVISIBLE) {
                    return Cow::Borrowed(s);
                }

                let mut virt = String::new();
                let mut ignore = false;

                for ch in s.chars() {
                    if ch == START_INVISIBLE {
                        ignore = true;
                    } else if ch == END_INVISIBLE {
                        ignore = false;
                    } else if !ignore {
                        virt.push(ch);
                    }
                }

                Cow::Owned(virt)
            }

            /// Returns the longest common prefix of a set of strings.
            ///
            /// If no common prefix exists, `None` is returned.
            pub fn longest_common_prefix<'a, I, S>(iter: I) -> Option<&'a str> where
                    I: IntoIterator<Item=&'a S>,
                    S: 'a + ?Sized + AsRef<str>,
                    {
                let mut iter = iter.into_iter();

                let mut pfx = iter.next()?.as_ref();

                for s in iter {
                    let s = s.as_ref();

                    let n = pfx.chars().zip(s.chars())
                        .take_while(|&(a, b)| a == b)
                        .map(|(ch, _)| ch.len_utf8()).sum();

                    if n == 0 {
                        return None;
                    } else {
                        pfx = &pfx[..n];
                    }
                }

                Some(pfx)
            }

            /// Returns a string consisting of a `char`, repeated `n` times.
            pub fn repeat_char(ch: char, n: usize) -> String {
                let mut buf = [0; 4];
                let s = ch.encode_utf8(&mut buf);

                s.repeat(n)
            }

            /// Implemented for built-in range types
            // Waiting for stabilization of `std` trait of the same name
            pub trait RangeArgument<T> {
                /// Returns the start of range, if present.
                fn start(&self) -> Option<&T> { None }

                /// Returns the end of range, if present.
                fn end(&self) -> Option<&T> { None }
            }

            impl<T> RangeArgument<T> for Range<T> {
                fn start(&self) -> Option<&T> { Some(&self.start) }

                fn end(&self) -> Option<&T> { Some(&self.end) }
            }

            impl<T> RangeArgument<T> for RangeFrom<T> {
                fn start(&self) -> Option<&T> { Some(&self.start) }
            }

            impl<T> RangeArgument<T> for RangeTo<T> {
                fn end(&self) -> Option<&T> { Some(&self.end) }
            }

            impl<T> RangeArgument<T> for RangeFull {}

            pub fn backward_char(n: usize, s: &str, cur: usize) -> usize {
                let mut chars = s[..cur].char_indices()
                    .filter(|&(_, ch)| !is_combining_mark(ch));
                let mut res = cur;

                for _ in 0..n {
                    match chars.next_back() {
                        Some((idx, _)) => res = idx,
                        None => return 0
                    }
                }

                res
            }

            pub fn forward_char(n: usize, s: &str, cur: usize) -> usize {
                let mut chars = s[cur..].char_indices()
                    .filter(|&(_, ch)| !is_combining_mark(ch));

                for _ in 0..n {
                    match chars.next() {
                        Some(_) => (),
                        None => return s.len()
                    }
                }

                match chars.next() {
                    Some((idx, _)) => cur + idx,
                    None => s.len()
                }
            }

            pub fn backward_search_char(n: usize, buf: &str, mut cur: usize, ch: char) -> Option<usize> {
                let mut pos = None;

                for _ in 0..n {
                    match buf[..cur].rfind(ch) {
                        Some(p) => {
                            cur = p;
                            pos = Some(cur);
                        }
                        None => break
                    }
                }

                pos
            }

            pub fn forward_search_char(n: usize, buf: &str, mut cur: usize, ch: char) -> Option<usize> {
                let mut pos = None;

                for _ in 0..n {
                    // Skip past the character under the cursor
                    let off = match buf[cur..].chars().next() {
                        Some(ch) => ch.len_utf8(),
                        None => break
                    };

                    match buf[cur + off..].find(ch) {
                        Some(p) => {
                            cur += off + p;
                            pos = Some(cur);
                        }
                        None => break
                    }
                }

                pos
            }

            pub fn backward_word(n: usize, buf: &str, cur: usize, word_break: &str) -> usize {
                let mut chars = buf[..cur].char_indices().rev();

                for _ in 0..n {
                    drop_while(&mut chars, |(_, ch)| word_break.contains(ch));
                    if chars.clone().next().is_none() { break; }
                    drop_while(&mut chars, |(_, ch)| !word_break.contains(ch));
                    if chars.clone().next().is_none() { break; }
                }

                match chars.next() {
                    Some((ind, ch)) => ind + ch.len_utf8(),
                    None => 0
                }
            }

            pub fn forward_word(n: usize, buf: &str, cur: usize, word_break: &str) -> usize {
                let mut chars = buf[cur..].char_indices();

                for _ in 0..n {
                    drop_while(&mut chars, |(_, ch)| word_break.contains(ch));
                    if chars.clone().next().is_none() { break; }
                    drop_while(&mut chars, |(_, ch)| !word_break.contains(ch));
                    if chars.clone().next().is_none() { break; }
                }

                match chars.next() {
                    Some((ind, _)) => cur + ind,
                    None => buf.len()
                }
            }

            pub fn back_n_words(n: usize, buf: &str, cur: usize, word_break: &str) -> Range<usize> {
                let prev = backward_word(1, buf, cur, word_break);
                let end = word_end(&buf, prev, word_break);

                if n > 1 {
                    let start = backward_word(n - 1, buf, prev, word_break);
                    start..end
                } else {
                    prev..end
                }
            }

            pub fn forward_n_words(n: usize, buf: &str, cur: usize, word_break: &str) -> Range<usize> {
                let start = next_word(1, buf, cur, word_break);

                if n > 1 {
                    let last = next_word(n - 1, buf, start, word_break);
                    let end = word_end(buf, last, word_break);
                    start..end
                } else {
                    let end = word_end(buf, start, word_break);
                    start..end
                }
            }

            /// Returns the first character in the buffer, if it contains any valid characters.
            pub fn first_char(buf: &[u8]) -> io::Result<Option<char>> {
                match from_utf8(buf) {
                    Ok(s) => Ok(s.chars().next()),
                    Err(e) => {
                        if e.error_len().is_some() {
                            return Err(io::Error::new(io::ErrorKind::InvalidData,
                                "invalid utf-8 input received"));
                        }

                        let valid = e.valid_up_to();

                        let s = unsafe { from_utf8_unchecked(&buf[..valid]) };
                        Ok(s.chars().next())
                    }
                }
            }

            pub fn first_word(buf: &str, word_break: &str) -> Option<usize> {
                let mut chars = buf.char_indices();

                drop_while(&mut chars, |(_, ch)| word_break.contains(ch));

                chars.next().map(|(idx, _)| idx)
            }

            pub fn word_start(buf: &str, cur: usize, word_break: &str) -> usize {
                let fwd = match buf[cur..].chars().next() {
                    Some(ch) => word_break.contains(ch),
                    None => return buf.len()
                };

                if fwd {
                    next_word(1, buf, cur, word_break)
                } else {
                    let mut chars = buf[..cur].char_indices().rev();

                    drop_while(&mut chars, |(_, ch)| !word_break.contains(ch));

                    match chars.next() {
                        Some((idx, ch)) => idx + ch.len_utf8(),
                        None => 0
                    }
                }
            }

            pub fn next_word(n: usize, buf: &str, cur: usize, word_break: &str) -> usize {
                let mut chars = buf[cur..].char_indices();

                for _ in 0..n {
                    drop_while(&mut chars, |(_, ch)| !word_break.contains(ch));
                    if chars.clone().next().is_none() { break; }
                    drop_while(&mut chars, |(_, ch)| word_break.contains(ch));
                    if chars.clone().next().is_none() { break; }
                }

                match chars.next() {
                    Some((idx, _)) => cur + idx,
                    None => buf.len()
                }
            }

            pub fn word_end(buf: &str, cur: usize, word_break: &str) -> usize {
                let mut chars = buf[cur..].char_indices();

                drop_while(&mut chars, |(_, ch)| !word_break.contains(ch));

                match chars.next() {
                    Some((idx, _)) => cur + idx,
                    None => buf.len()
                }
            }

            pub fn drop_while<I, T, F>(iter: &mut I, mut f: F)
                    where I: Iterator<Item=T> + Clone, F: FnMut(T) -> bool {
                loop {
                    let mut clone = iter.clone();

                    match clone.next() {
                        None => break,
                        Some(t) => {
                            if f(t) {
                                *iter = clone;
                            } else {
                                break;
                            }
                        }
                    }
                }
            }

            pub fn get_open_paren(ch: char) -> Option<char> {
                match ch {
                    ')' => Some('('),
                    ']' => Some('['),
                    '}' => Some('{'),
                    _ => None
                }
            }

            pub fn find_matching_paren(s: &str, quotes: &str, open: char, close: char) -> Option<usize> {
                let mut chars = s.char_indices().rev();
                let mut level = 0;
                let mut string_delim = None;

                while let Some((ind, ch)) = chars.next() {
                    if string_delim == Some(ch) {
                        string_delim = None;
                    } else if quotes.contains(ch) {
                        string_delim = Some(ch);
                    } else if string_delim.is_none() && ch == close {
                        level += 1;
                    } else if string_delim.is_none() && ch == open {
                        level -= 1;

                        if level == 0 {
                            return Some(ind);
                        }
                    }
                }

                None
            }

            pub fn is_combining_mark(ch: char) -> bool {
                use mortal::util::is_combining_mark;

                is_combining_mark(ch)
            }

            pub fn is_wide(ch: char) -> bool {
                use mortal::util::char_width;

                char_width(ch) == Some(2)
            }

            pub fn match_name(name: &str, value: &str) -> bool {
                // A value of "foo" matches both "foo" and "foo-bar"
                name == value ||
                    (name.starts_with(value) && name.as_bytes()[value.len()] == b'-')
            }
        }

        pub mod variables
        {
            /*!
            Contains types associated with user-configurable variables. */
            use ::
            {
                *,
            };
            /*
            use std::borrow::Cow;
            use std::fmt;
            use std::mem::replace;
            use std::time::Duration;
            */
            /// Default `keyseq_timeout`, in milliseconds
            const KEYSEQ_TIMEOUT_MS: u64 = 500;

            /// Iterator over `Reader` variable values
            #[derive(Clone)]
            pub struct VariableIter<'a> {
                vars: &'a Variables,
                n: usize,
            }

            /// Represents a `Reader` variable of a given type
            #[derive(Clone, Debug)]
            pub enum Variable {
                /// Boolean variable
                Boolean(bool),
                /// Integer variable
                Integer(i32),
                /// String variable
                String(Cow<'static, str>),
            }

            impl From<bool> for Variable {
                fn from(b: bool) -> Variable {
                    Variable::Boolean(b)
                }
            }

            impl From<i32> for Variable {
                fn from(i: i32) -> Variable {
                    Variable::Integer(i)
                }
            }

            impl From<&'static str> for Variable {
                fn from(s: &'static str) -> Variable {
                    Variable::String(s.into())
                }
            }

            impl From<Cow<'static, str>> for Variable {
                fn from(s: Cow<'static, str>) -> Variable {
                    Variable::String(s)
                }
            }

            impl From<String> for Variable {
                fn from(s: String) -> Variable {
                    Variable::String(s.into())
                }
            }

            impl fmt::Display for Variable {
                fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
                    match *self {
                        Variable::Boolean(b) => f.write_str(if b { "on" } else { "off" }),
                        Variable::Integer(n) => fmt::Display::fmt(&n, f),
                        Variable::String(ref s) => fmt::Display::fmt(&s[..], f),
                    }
                }
            }

            macro_rules! define_variables {
                ( $( $field:ident : $ty:ty => ( $name:expr , $conv:ident ,
                        |$gr:ident| $getter:expr , |$sr:ident, $v:ident| $setter:expr ) , )+ ) => {
                    static VARIABLE_NAMES: &[&str] = &[ $( $name ),+ ];

                    pub(crate) struct Variables {
                        $( pub $field : $ty ),*
                    }

                    impl Variables {
                        pub fn get_variable(&self, name: &str) -> Option<Variable> {
                            match name {
                                $( $name => {
                                    let $gr = self;
                                    Some(Variable::from($getter))
                                } )+
                                _ => None
                            }
                        }

                        pub fn set_variable(&mut self, name: &str, value: &str)
                                -> Option<Variable> {
                            match name {
                                $( $name => {
                                    if let Some($v) = $conv(value) {
                                        let $sr = self;
                                        Some(Variable::from($setter))
                                    } else {
                                        None
                                    }
                                } )+
                                _ => None
                            }
                        }

                        pub fn iter(&self) -> VariableIter {
                            VariableIter{vars: self, n: 0}
                        }
                    }

                    impl<'a> Iterator for VariableIter<'a> {
                        type Item = (&'static str, Variable);

                        fn next(&mut self) -> Option<Self::Item> {
                            let res = match VARIABLE_NAMES.get(self.n).cloned() {
                                $( Some($name) => ($name, {
                                    let $gr = self.vars;
                                    Variable::from($getter)
                                }) , )+
                                _ => return None
                            };

                            self.n += 1;
                            Some(res)
                        }
                    }
                }
            }

            define_variables!{
                blink_matching_paren: bool => ("blink-matching-paren", parse_bool,
                    |r| r.blink_matching_paren,
                    |r, v| replace(&mut r.blink_matching_paren, v)),
                comment_begin: Cow<'static, str> => ("comment-begin", parse_string,
                    |r| r.comment_begin.clone(),
                    |r, v| replace(&mut r.comment_begin, v.into())),
                completion_display_width: usize => ("completion-display-width", parse_usize,
                    |r| usize_as_i32(r.completion_display_width),
                    |r, v| usize_as_i32(replace(&mut r.completion_display_width, v))),
                completion_query_items: usize => ("completion-query-items", parse_usize,
                    |r| usize_as_i32(r.completion_query_items),
                    |r, v| usize_as_i32(replace(&mut r.completion_query_items, v))),
                disable_completion: bool => ("disable-completion", parse_bool,
                    |r| r.disable_completion,
                    |r, v| replace(&mut r.disable_completion, v)),
                echo_control_characters: bool => ("echo-control-characters", parse_bool,
                    |r| r.echo_control_characters,
                    |r, v| replace(&mut r.echo_control_characters, v)),
                keyseq_timeout: Option<Duration> => ("keyseq-timeout", parse_duration,
                    |r| as_millis(r.keyseq_timeout),
                    |r, v| as_millis(replace(&mut r.keyseq_timeout, v))),
                page_completions: bool => ("page-completions", parse_bool,
                    |r| r.page_completions,
                    |r, v| replace(&mut r.page_completions, v)),
                print_completions_horizontally: bool => ("print-completions-horizontally", parse_bool,
                    |r| r.print_completions_horizontally,
                    |r, v| replace(&mut r.print_completions_horizontally, v)),
            }

            impl Default for Variables {
                fn default() -> Variables {
                    Variables{
                        blink_matching_paren: false,
                        comment_begin: "#".into(),
                        completion_display_width: usize::max_value(),
                        completion_query_items: 100,
                        disable_completion: false,
                        echo_control_characters: true,
                        keyseq_timeout: Some(Duration::from_millis(KEYSEQ_TIMEOUT_MS)),
                        page_completions: true,
                        print_completions_horizontally: false,
                    }
                }
            }

            fn parse_bool(s: &str) -> Option<bool> {
                match s {
                    "0" => Some(false),
                    "1" => Some(true),
                    s if s.eq_ignore_ascii_case("off") => Some(false),
                    s if s.eq_ignore_ascii_case("on") => Some(true),
                    _ => None
                }
            }

            fn parse_string(s: &str) -> Option<String> {
                Some(s.to_owned())
            }

            fn as_millis(timeout: Option<Duration>) -> i32 {
                match timeout {
                    Some(t) => {
                        let s = (t.as_secs() * 1_000) as i32;
                        let ms = (t.subsec_nanos() / 1_000_000) as i32;

                        s + ms
                    }
                    None => -1
                }
            }

            fn parse_duration(s: &str) -> Option<Option<Duration>> {
                match s.parse::<i32>() {
                    Ok(n) if n <= 0 => Some(None),
                    Ok(n) => Some(Some(Duration::from_millis(n as u64))),
                    Err(_) => Some(None)
                }
            }

            fn usize_as_i32(u: usize) -> i32 {
                match u {
                    u if u > i32::max_value() as usize => -1,
                    u => u as i32
                }
            }

            fn parse_usize(s: &str) -> Option<usize> {
                match s.parse::<i32>() {
                    Ok(n) if n < 0 => Some(usize::max_value()),
                    Ok(n) => Some(n as usize),
                    Err(_) => None
                }
            }
        }

        pub mod writer
        {
            /*!
            Provides access to terminal write operations. */
            use ::
            {
                *,
            };
            /*
            use std::borrow::Cow::{self, Borrowed, Owned};
            use std::collections::{vec_deque, VecDeque};
            use std::fmt;
            use std::io;
            use std::iter::{repeat, Skip};
            use std::mem::swap;
            use std::ops::{Deref, DerefMut, Range};
            use std::sync::Arc;
            use std::sync::MutexGuard;
            use std::time::{Duration, Instant};

            use crate::chars::{is_ctrl, unctrl, ESCAPE, RUBOUT};
            use crate::highlighting::{Highlighter, Style, RESET_STYLE};
            use crate::reader::{START_INVISIBLE, END_INVISIBLE};
            use crate::terminal::{CursorMode, Size, Terminal, TerminalWriter};
            use crate::util::{
                backward_char, forward_char, backward_search_char, forward_search_char,
                filter_visible, is_combining_mark, is_wide, RangeArgument,
            };
            */
            /// Duration to wait for input when "blinking"
            pub(crate) const BLINK_DURATION: Duration = Duration::from_millis(500);

            const COMPLETE_MORE: &'static str = "--More--";

            /// Default maximum history size
            const MAX_HISTORY: usize = !0;

            /// Tab column interval
            const TAB_STOP: usize = 8;

            // Length of "(arg: "
            const PROMPT_NUM_PREFIX: usize = 6;
            // Length of ") "
            const PROMPT_NUM_SUFFIX: usize = 2;

            // Length of "(i-search)`"
            const PROMPT_SEARCH_PREFIX: usize = 11;
            // Length of "failed "
            const PROMPT_SEARCH_FAILED_PREFIX: usize = 7;
            // Length of "reverse-"
            const PROMPT_SEARCH_REVERSE_PREFIX: usize = 8;
            // Length of "': "
            const PROMPT_SEARCH_SUFFIX: usize = 3;

            /// Provides an interface to write line-by-line output to the terminal device.
            ///
            /// Holds a lock on terminal write operations.
            /// See [`Interface`] for more information about concurrent operations.
            ///
            /// An instance of this type can be constructed using either the
            /// [`Interface::lock_writer_append`] or the [`Interface::lock_writer_erase`]
            /// method.
            ///
            /// [`Interface`]: ../interface/struct.Interface.html
            /// [`Interface::lock_writer_append`]: ../interface/struct.Interface.html#method.lock_writer_append
            /// [`Interface::lock_writer_erase`]: ../interface/struct.Interface.html#method.lock_writer_erase
            pub struct Writer<'a, 'b: 'a, Term: 'b + Terminal> {
                write: WriterImpl<'a, 'b, Term>,
            }

            enum WriterImpl<'a, 'b: 'a, Term: 'b + Terminal> {
                Mutex(WriteLock<'b, Term>),
                MutRef(&'a mut WriteLock<'b, Term>),
            }

            #[derive(Debug)]
            pub(crate) struct Write {
                /// Input buffer
                pub buffer: String,
                /// Original buffer entered before searching through history
                pub backup_buffer: String,
                /// Position of the cursor
                pub cursor: usize,
                /// Position of the cursor if currently performing a blink
                blink: Option<Blink>,

                /// Stored history entries
                pub history: VecDeque<String>,
                /// History entry currently being edited;
                /// `None` if the new buffer is being edited
                pub history_index: Option<usize>,
                /// Maximum size of history
                history_size: usize,
                /// Number of history entries added since last loading history
                history_new_entries: usize,

                /// Whether the prompt is drawn; i.e. a `read_line` operation is in progress
                pub is_prompt_drawn: bool,

                /// Portion of prompt up to and including the final newline
                pub prompt_prefix: String,
                prompt_prefix_len: usize,
                /// Portion of prompt after the final newline
                pub prompt_suffix: String,
                prompt_suffix_len: usize,

                /// Current type of prompt
                pub prompt_type: PromptType,

                /// Whether a search in progress is a reverse search
                pub reverse_search: bool,
                /// Whether a search in progress has failed to find a match
                pub search_failed: bool,
                /// Current search string
                pub search_buffer: String,
                /// Last search string
                pub last_search: String,
                /// Selected history entry prior to a history search
                pub prev_history: Option<usize>,
                /// Position of the cursor prior to a history search
                pub prev_cursor: usize,

                /// Numerical argument
                pub input_arg: Digit,
                /// Whether a numerical argument was supplied
                pub explicit_arg: bool,

                /// Terminal size as of last draw operation
                pub screen_size: Size,
            }

            pub(crate) struct WriteLock<'a, Term: 'a + Terminal> {
                term: Box<dyn TerminalWriter<Term> + 'a>,
                data: MutexGuard<'a, Write>,
                highlighter: Option<Arc<dyn Highlighter + Send + Sync>>,
            }

            impl<'a, Term: Terminal> WriteLock<'a, Term> {
                pub fn new(term: Box<dyn TerminalWriter<Term> + 'a>, data: MutexGuard<'a, Write>,
                        highlighter: Option<Arc<dyn Highlighter + Send + Sync>>
                        ) -> WriteLock<'a, Term> {
                    WriteLock{
                        term,
                        data,
                        highlighter,
                    }
                }

                pub fn size(&self) -> io::Result<Size> {
                    self.term.size()
                }

                pub fn flush(&mut self) -> io::Result<()> {
                    self.term.flush()
                }

                pub fn update_size(&mut self) -> io::Result<()> {
                    let size = self.size()?;
                    self.screen_size = size;
                    Ok(())
                }

                pub fn blink(&mut self, pos: usize) -> io::Result<()> {
                    self.expire_blink()?;

                    let orig = self.cursor;
                    self.move_to(pos)?;
                    self.cursor = orig;

                    let expiry = Instant::now() + BLINK_DURATION;

                    self.blink = Some(Blink{
                        pos,
                        expiry,
                    });

                    Ok(())
                }

                pub fn check_expire_blink(&mut self, now: Instant) -> io::Result<bool> {
                    if let Some(blink) = self.data.blink {
                        if now >= blink.expiry {
                            self.expire_blink()?;
                        }
                    }

                    Ok(self.blink.is_none())
                }

                pub fn expire_blink(&mut self) -> io::Result<()> {
                    if let Some(blink) = self.data.blink.take() {
                        self.move_from(blink.pos)?;
                    }

                    Ok(())
                }

                pub fn set_prompt(&mut self, prompt: &str) -> io::Result<()> {
                    self.expire_blink()?;

                    let redraw = self.is_prompt_drawn && self.prompt_type.is_normal();

                    if redraw {
                        self.clear_full_prompt()?;
                    }

                    self.data.set_prompt(prompt);

                    if redraw {
                        self.draw_prompt()?;
                    }

                    Ok(())
                }

                /// Draws the prompt and current input, assuming the cursor is at column 0
                pub fn draw_prompt(&mut self) -> io::Result<()> {
                    self.draw_prompt_prefix()?;
                    self.draw_prompt_suffix()
                }

                pub fn draw_prompt_prefix(&mut self) -> io::Result<()> {
                    match self.prompt_type {
                        // Prefix is not drawn when completions are shown
                        PromptType::CompleteMore => Ok(()),
                        _ => {
                            let pfx = self.prompt_prefix.clone();
                            self.draw_raw_prompt(&pfx, Vec::new())
                        }
                    }
                }

                pub fn draw_prompt_suffix(&mut self) -> io::Result<()> {
                    match self.prompt_type {
                        PromptType::Normal => {
                            let sfx = self.prompt_suffix.clone();

                            let styles = self.highlighter.as_ref().map(|h|
                                h.highlight(&sfx)
                            ).unwrap_or_default();

                            self.draw_raw_prompt(&sfx, styles)?;
                        }
                        PromptType::Number => {
                            let n = self.input_arg.to_i32();
                            let s = format!("(arg: {}) ", n);
                            self.draw_text(0, &s)?;
                        }
                        PromptType::Search => {
                            let pre = match (self.reverse_search, self.search_failed) {
                                (false, false) => "(i-search)",
                                (false, true)  => "(failed i-search)",
                                (true,  false) => "(reverse-i-search)",
                                (true,  true)  => "(failed reverse-i-search)",
                            };

                            let entry_str = self.get_history(self.history_index).to_owned();
                            let prefix_str = format!("{}`{}': ", pre, self.search_buffer);
                            let prefix_len = prefix_str.len();

                            // Calculate styles for the history entry part
                            let entry_styles = self.highlighter.as_ref()
                                .map(|h| h.highlight(&entry_str))
                                .unwrap_or_default();

                            // Adjust style ranges to account for the prefix string
                            let adjusted_styles: Vec<(Range<usize>, Style)> = entry_styles.into_iter()
                                .map(|(range, style)| (range.start + prefix_len .. range.end + prefix_len, style))
                                .collect();

                            let full_str = format!("{}{}", prefix_str, entry_str);

                            // Draw the full string with adjusted styles using draw_text_impl
                            // Use Display options similar to draw_raw_prompt for consistency
                            self.draw_text_impl(0, &full_str, Display {
                                allow_tab: true,
                                allow_newline: true,
                                allow_escape: true,
                            }, false, &adjusted_styles, 0)?;

                            // Calculate screen coordinates using start_col = 0 because full_str includes the prefix.
                            let (end_line, _end_col) = self.line_col_with(full_str.len(), &full_str, 0);
                            let target_cursor_pos_in_full_str = prefix_len + self.cursor;
                            let (target_line, target_col) = self.line_col_with(target_cursor_pos_in_full_str, &full_str, 0);

                            // Calculate relative movement directly
                            let lines = target_line as isize - end_line as isize;
                            // Calculate the column move: move to beginning of target line, then right by target_col.
                            // We know we ended at the beginning of the line *after* end_line (due to wrap or newline logic in draw_text_impl)
                            // or at _end_col if end_line == target_line and no wrap occurred.
                            // It's simpler to move to the beginning of the target line and then right.
                            let cols = target_col as isize; // We will move_up/down first, then move_to_first_column, then move_right.

                            // Apply movement
                            if lines > 0 {
                                self.term.move_down(lines as usize)?;
                            } else if lines < 0 {
                                self.term.move_up((-lines) as usize)?;
                            }
                            self.term.move_to_first_column()?;
                            if cols > 0 {
                                self.term.move_right(cols as usize)?;
                            }
                            // We don't need to call self.move_rel as we performed the terminal moves directly.
                            // Also, don't update self.cursor here, it's already correct (index within history entry).
                            return Ok(())
                        }
                        PromptType::CompleteIntro(n) => {
                            return self.term.write(&complete_intro(n));
                        }
                        PromptType::CompleteMore => {
                            return self.term.write(COMPLETE_MORE);
                        }
                    }

                    self.draw_buffer(0)?;
                    let len = self.buffer.len();
                    self.move_from(len)
                }

                pub fn redraw_prompt(&mut self, new_prompt: PromptType) -> io::Result<()> {
                    self.clear_prompt()?;
                    self.prompt_type = new_prompt;
                    self.draw_prompt_suffix()
                }

                /// Draws a portion of the buffer, starting from the given cursor position
                pub fn draw_buffer(&mut self, pos: usize) -> io::Result<()> {
                    let (_, col) = self.line_col(pos);

                    let styles = self.highlighter.as_ref().map(|h|
                        h.highlight(&self.buffer)
                    ).unwrap_or_default();

                    let buf_slice = self.buffer[pos..].to_owned();

                    self.draw_text_impl(col, &buf_slice, Display{
                        allow_tab: true,
                        allow_newline: true,
                        .. Display::default()
                    }, false, &styles, pos)?;

                    Ok(())
                }

                /// Draw some text with the cursor beginning at the given column.
                fn draw_text(&mut self, start_col: usize, text: &str) -> io::Result<()> {
                    self.draw_text_impl(start_col, text, Display{
                        allow_newline: true,
                        .. Display::default()
                    }, false, &[], 0)
                }

                fn draw_raw_prompt(&mut self, text: &str, styles: Vec<(Range<usize>, Style)>) -> io::Result<()> {
                    self.draw_text_impl(0, text, Display{
                        allow_tab: true,
                        allow_newline: true,
                        allow_escape: true,
                    }, true, &styles, 0)
                }

                fn draw_text_impl(&mut self, start_col: usize, text: &str, disp: Display,
                        handle_invisible: bool, styles: &[(Range<usize>, Style)], text_offset: usize) -> io::Result<()> {
                    let width = self.screen_size.columns;
                    let mut col = start_col;
                    let mut out = String::with_capacity(text.len());

                    let mut current_style = &Style::Default;
                    let mut style_iter = styles.iter().peekable();
                    let mut current_text_byte = 0;

                    let mut clear = false;
                    let mut hidden = false;

                    for ch in text.chars() {
                        if handle_invisible && ch == START_INVISIBLE {
                            hidden = true;
                        } else if handle_invisible && ch == END_INVISIBLE {
                            hidden = false;
                        } else if hidden {
                            // Render the character, but assume it has 0 width.
                            out.push(ch);
                            current_text_byte += ch.len_utf8();
                        } else {
                            // Determine style for the current character
                            let absolute_byte_pos = text_offset + current_text_byte;
                            // Advance style iterator past ranges that end before the current position
                            while let Some((range, _)) = style_iter.peek() {
                                if range.end <= absolute_byte_pos {
                                    style_iter.next();
                                } else {
                                    break;
                                }
                            }

                            // Find the style that applies to the current position
                            let new_style = style_iter.peek()
                                .filter(|(range, _)| range.start <= absolute_byte_pos)
                                .map(|(_, style)| style)
                                .unwrap_or(&Style::Default);

                            // Apply style change if needed
                            if new_style != current_style {
                                if current_style != &Style::Default {
                                    out.push_str(RESET_STYLE); // Reset previous style
                                }
                                if let Style::AnsiColor(ansi_code) = new_style {
                                    out.push_str(ansi_code); // Apply new style
                                }
                                current_style = new_style;
                            }

                            // Apply style if changed
                            for ch in display(ch, disp) {
                                if ch == '\t' {
                                    let n = TAB_STOP - (col % TAB_STOP);

                                    if col + n > width {
                                        let pre = width - col;
                                        out.extend(repeat(' ').take(pre));
                                        out.push_str(" \r");
                                        out.extend(repeat(' ').take(n - pre));
                                        col = n - pre;
                                    } else {
                                        out.extend(repeat(' ').take(n));
                                        col += n;

                                        if col == width {
                                            out.push_str(" \r");
                                            col = 0;
                                        }
                                    }
                                } else if ch == '\n' {
                                    if !clear {
                                        self.term.write(&out)?;
                                        out.clear();
                                        self.term.clear_to_screen_end()?;
                                        clear = true;
                                    }

                                    out.push('\n');
                                    col = 0;
                                } else if is_combining_mark(ch) {
                                    out.push(ch);
                                } else if is_wide(ch) {
                                    if col == width - 1 {
                                        out.push_str("  \r");
                                        out.push(ch);
                                        col = 2;
                                    } else {
                                        out.push(ch);
                                        col += 2;
                                    }
                                } else {
                                    out.push(ch);
                                    col += 1;

                                    if col == width {
                                        // Space pushes the cursor to the next line,
                                        // CR brings back to the start of the line.
                                        out.push_str(" \r");
                                        col = 0;
                                    }
                                }
                            }
                            current_text_byte += ch.len_utf8(); // Advance byte counter *after* processing character
                        }
                    }

                    // Ensure style is reset at the end
                    if current_style != &Style::Default {
                        // Check if the last applied style was actually from the styles vec
                        let last_applied_style = styles.iter().rev().find(|(range, _)| range.start < text_offset + text.len());
                        match last_applied_style {
                            Some((_, Style::Default)) => {}, // Already default
                            Some((_, Style::AnsiColor(_))) => out.push_str(RESET_STYLE),
                            None if !styles.is_empty() => out.push_str(RESET_STYLE), // Reset if styles were provided but didn't cover the end
                            _ => {} // No styles or last was default
                        }
                    }

                    if col == width {
                        out.push_str(" \r");
                    }

                    self.term.write(&out)
                }

                pub fn set_buffer(&mut self, buf: &str) -> io::Result<()> {
                    self.expire_blink()?;

                    self.move_to(0)?;
                    self.buffer.clear();
                    self.buffer.push_str(buf);
                    self.new_buffer()
                }

                pub fn set_cursor(&mut self, pos: usize) -> io::Result<()> {
                    self.expire_blink()?;

                    if !self.buffer.is_char_boundary(pos) {
                        panic!("invalid cursor position {} in buffer {:?}",
                            pos, self.buffer);
                    }

                    self.move_to(pos)
                }

                pub fn set_cursor_mode(&mut self, mode: CursorMode) -> io::Result<()> {
                    self.term.set_cursor_mode(mode)
                }

                pub fn history_len(&self) -> usize {
                    self.history.len()
                }

                pub fn history_size(&self) -> usize {
                    self.history_size
                }

                pub fn set_history_size(&mut self, n: usize) {
                    self.history_size = n;
                    self.truncate_history(n);
                }

                pub fn write_str(&mut self, s: &str) -> io::Result<()> {
                    self.term.write(s)
                }

                pub fn start_history_search(&mut self, reverse: bool) -> io::Result<()> {
                    self.search_buffer = self.buffer[..self.cursor].to_owned();

                    self.continue_history_search(reverse)
                }

                pub fn continue_history_search(&mut self, reverse: bool) -> io::Result<()> {
                    if let Some(idx) = self.find_history_search(reverse) {
                        let original_cursor = self.cursor;
                        self.set_history_entry(Some(idx));

                        // Clear the old line content visually
                        self.clear_prompt()?;
                        // Redraw the prompt and the entire new buffer content
                        self.draw_prompt_suffix()?;
                        // Move the cursor back to its original position
                        self.move_to(original_cursor)?; // This updates self.cursor and moves physical cursor
                    }
                    Ok(())
                }

                pub fn info(&self) -> String {
                    format!(
                        "buffer: {:?}, cursor: {} hindex: {:?} pmt_suffix_len: {} pmt_type: {:?} search_buffer: {:?} last_s: {:?} prompt_p: {:?} ({}) prompt_s: {:?} ({})",
                        self.buffer, self.cursor, self.history_index,
                        self.prompt_suffix_len, self.prompt_type, self.search_buffer,
                        self.last_search, self.prompt_prefix, self.prompt_prefix_len,
                        self.prompt_suffix, self.prompt_suffix_len,
                    )
                }

                fn find_history_search(&self, reverse: bool) -> Option<usize> {
                    let len = self.history.len();
                    let idx = self.history_index.unwrap_or(len);

                    if reverse {
                        self.history.iter().rev().skip(len - idx)
                            .position(|ent| ent.starts_with(&self.search_buffer))
                            .map(|pos| idx - (pos + 1))
                    } else {
                        self.history.iter().skip(idx + 1)
                            .position(|ent| ent.starts_with(&self.search_buffer))
                            .map(|pos| idx + (pos + 1))
                    }
                }

                pub fn start_search_history(&mut self, reverse: bool) -> io::Result<()> {
                    self.reverse_search = reverse;
                    self.search_failed = false;
                    self.search_buffer.clear();
                    self.prev_history = self.history_index;
                    self.prev_cursor = self.cursor;

                    self.redraw_prompt(PromptType::Search)
                }

                pub fn continue_search_history(&mut self, reverse: bool) -> io::Result<()> {
                    self.reverse_search = reverse;
                    self.search_failed = false;

                    {
                        let data = &mut *self.data;
                        data.search_buffer.clone_from(&data.last_search);
                    }

                    self.search_history_step()
                }

                pub fn end_search_history(&mut self) -> io::Result<()> {
                    self.redraw_prompt(PromptType::Normal)
                }

                pub fn abort_search_history(&mut self) -> io::Result<()> {
                    self.clear_prompt()?;

                    let ent = self.prev_history;
                    self.set_history_entry(ent);
                    self.cursor = self.prev_cursor;

                    self.prompt_type = PromptType::Normal;
                    self.draw_prompt_suffix()
                }

                fn show_search_match(&mut self, next_match: Option<(Option<usize>, usize)>)
                        -> io::Result<()> {
                    self.clear_prompt()?;

                    if let Some((idx, pos)) = next_match {
                        self.search_failed = false;
                        self.set_history_entry(idx);
                        self.cursor = pos;
                    } else {
                        self.search_failed = true;
                    }


                    self.prompt_type = PromptType::Search;
                    self.draw_prompt_suffix()
                }

                pub fn search_history_update(&mut self) -> io::Result<()> {
                    // Search for the next match, perhaps including the current position
                    let next_match = if self.reverse_search {
                        self.search_history_backward(&self.search_buffer, true)
                    } else {
                        self.search_history_forward(&self.search_buffer, true)
                    };

                    self.show_search_match(next_match)
                }

                fn search_history_step(&mut self) -> io::Result<()> {
                    if self.search_buffer.is_empty() {
                        return self.redraw_prompt(PromptType::Search);
                    }

                    // Search for the next match
                    let next_match = if self.reverse_search {
                        self.search_history_backward(&self.search_buffer, false)
                    } else {
                        self.search_history_forward(&self.search_buffer, false)
                    };

                    self.show_search_match(next_match)
                }

                fn search_history_backward(&self, s: &str, include_cur: bool)
                        -> Option<(Option<usize>, usize)> {
                    let mut idx = self.history_index;
                    let mut pos = Some(self.cursor);

                    if include_cur && !self.search_failed {
                        if let Some(p) = pos {
                            if self.get_history(idx).is_char_boundary(p + s.len()) {
                                pos = Some(p + s.len());
                            }
                        }
                    }

                    loop {
                        let line = self.get_history(idx);

                        match line[..pos.unwrap_or(line.len())].rfind(s) {
                            Some(found) => {
                                pos = Some(found);
                                break;
                            }
                            None => {
                                match idx {
                                    Some(0) => return None,
                                    Some(n) => {
                                        idx = Some(n - 1);
                                        pos = None;
                                    }
                                    None => {
                                        if self.history.is_empty() {
                                            return None;
                                        } else {
                                            idx = Some(self.history.len() - 1);
                                            pos = None;
                                        }
                                    }
                                }
                            }
                        }
                    }

                    pos.map(|pos| (idx, pos))
                }

                fn search_history_forward(&self, s: &str, include_cur: bool)
                        -> Option<(Option<usize>, usize)> {
                    let mut idx = self.history_index;
                    let mut pos = Some(self.cursor);

                    if !include_cur {
                        if let Some(p) = pos {
                            pos = Some(forward_char(1, self.get_history(idx), p));
                        }
                    }

                    loop {
                        let line = self.get_history(idx);

                        match line[pos.unwrap_or(0)..].find(s) {
                            Some(found) => {
                                pos = pos.map(|n| n + found).or(Some(found));
                                break;
                            }
                            None => {
                                if let Some(n) = idx {
                                    if n + 1 == self.history.len() {
                                        idx = None;
                                    } else {
                                        idx = Some(n + 1);
                                    }
                                    pos = None;
                                } else {
                                    return None;
                                }
                            }
                        }
                    }

                    pos.map(|pos| (idx, pos))
                }

                pub fn add_history(&mut self, line: String) {
                    if self.history.len() == self.history_size {
                        self.history.pop_front();
                    }

                    self.history.push_back(line);
                    self.history_new_entries = self.history.len()
                        .min(self.history_new_entries + 1);
                }

                pub fn add_history_unique(&mut self, line: String) {
                    let is_duplicate = self.history.back().map_or(false, |ent| *ent == line);

                    if !is_duplicate {
                        self.add_history(line);
                    }
                }

                pub fn clear_history(&mut self) {
                    self.truncate_history(0);
                    self.history_new_entries = 0;
                }

                pub fn remove_history(&mut self, n: usize) {
                    if n < self.history.len() {
                        let first_new = self.history.len() - self.history_new_entries;

                        if n >= first_new {
                            self.history_new_entries -= 1;
                        }

                        self.history.remove(n);
                    }
                }

                pub fn truncate_history(&mut self, n: usize) {
                    let len = self.history.len();

                    if n < len {
                        let _ = self.history.drain(..len - n);
                        self.history_new_entries = self.history_new_entries.max(n);
                    }
                }

                pub fn next_history(&mut self, n: usize) -> io::Result<()> {
                    if let Some(old) = self.history_index {
                        let new = old.saturating_add(n);

                        if new >= self.history.len() {
                            self.select_history_entry(None)?;
                        } else {
                            self.select_history_entry(Some(new))?;
                        }
                    }

                    Ok(())
                }

                pub fn prev_history(&mut self, n: usize) -> io::Result<()> {
                    if !self.history.is_empty() && self.history_index != Some(0) {
                        let new = if let Some(old) = self.history_index {
                            old.saturating_sub(n)
                        } else {
                            self.history.len().saturating_sub(n)
                        };

                        self.select_history_entry(Some(new))?;
                    }

                    Ok(())
                }

                pub fn select_history_entry(&mut self, new: Option<usize>) -> io::Result<()> {
                    if new != self.history_index {
                        self.move_to(0)?;
                        self.set_history_entry(new);
                        self.new_buffer()?;
                    }

                    Ok(())
                }

                pub fn set_history_entry(&mut self, new: Option<usize>) {
                    let old = self.history_index;

                    if old != new {
                        let data = &mut *self.data;
                        data.history_index = new;

                        if let Some(old) = old {
                            data.history[old].clone_from(&data.buffer);
                        } else {
                            swap(&mut data.buffer, &mut data.backup_buffer);
                        }

                        if let Some(new) = new {
                            data.buffer.clone_from(&data.history[new]);
                        } else {
                            data.buffer.clear();
                            swap(&mut data.buffer, &mut data.backup_buffer);
                        }
                    }
                }

                fn get_history(&self, n: Option<usize>) -> &str {
                    if self.history_index == n {
                        &self.buffer
                    } else if let Some(n) = n {
                        &self.history[n]
                    } else {
                        &self.backup_buffer
                    }
                }

                pub fn backward_char(&mut self, n: usize) -> io::Result<()> {
                    let pos = backward_char(n, &self.buffer, self.cursor);
                    self.move_to(pos)
                }

                pub fn forward_char(&mut self, n: usize) -> io::Result<()> {
                    let pos = forward_char(n, &self.buffer, self.cursor);
                    self.move_to(pos)
                }

                pub fn backward_search_char(&mut self, n: usize, ch: char) -> io::Result<()> {
                    if let Some(pos) = backward_search_char(n, &self.buffer, self.cursor, ch) {
                        self.move_to(pos)?;
                    }

                    Ok(())
                }

                pub fn forward_search_char(&mut self, n: usize, ch: char) -> io::Result<()> {
                    if let Some(pos) = forward_search_char(n, &self.buffer, self.cursor, ch) {
                        self.move_to(pos)?;
                    }

                    Ok(())
                }

                /// Deletes a range from the buffer; the cursor is moved to the end
                /// of the given range.
                pub fn delete_range<R: RangeArgument<usize>>(&mut self, range: R) -> io::Result<()> {
                    let start = range.start().cloned().unwrap_or(0);
                    let end = range.end().cloned().unwrap_or_else(|| self.buffer.len());

                    // Move to the start of the deletion range
                    self.move_to(start)?;

                    // Remove the characters in the range
                    let _ = self.buffer.drain(start..end);

                    // Move physical cursor to the beginning of the editable area
                    let current_internal_cursor = self.cursor; // Save internal cursor state
                    self.move_to(0)?; // Move physical cursor to start of input area
                    self.cursor = current_internal_cursor; // Restore internal cursor state

                    // Redraw the entire buffer from position 0 with updated highlighting
                    self.draw_buffer(0)?;

                    // Clear any leftover characters from the previous render
                    self.term.clear_to_screen_end()?;

                    // Update internal cursor state to the deletion point
                    self.cursor = start;

                    // Move physical cursor from the end of the drawn buffer back to deletion point
                    let len = self.buffer.len();
                    self.move_from(len)?;

                    Ok(())
                }

                pub fn insert_str(&mut self, s: &str) -> io::Result<()> {
                    let original_cursor = self.cursor;
                    self.buffer.insert_str(original_cursor, s);
                    let new_cursor = original_cursor + s.len();

                    // Move physical cursor to the beginning of the editable area (position 0 relative to prompt suffix)
                    // Need to use move_rel carefully or move_to(0) which recalculates absolute position.
                    // Let's recalculate using move_to(0).
                    let current_internal_cursor = self.cursor; // Save internal cursor state before move_to potentially changes it
                    self.move_to(0)?; // Move physical cursor to the start of the input area
                    self.cursor = current_internal_cursor; // Restore internal cursor state

                    // Redraw the entire buffer from position 0 with updated highlighting
                    self.draw_buffer(0)?; // This draws the text and leaves the physical cursor at the end


                    // Clear any leftover characters from the previous render (if the line got shorter)
                    // Although in insert_str it only gets longer or stays same. Still good practice.
                    self.term.clear_to_screen_end()?;

                    // Update the internal cursor state to the correct position after insertion
                    self.cursor = new_cursor;

                    // Move the physical cursor from the end of the drawn buffer
                    // back to the correct internal cursor position.
                    let len = self.buffer.len();
                    self.move_from(len)?;

                    Ok(())
                }

                pub fn transpose_range(&mut self, src: Range<usize>, dest: Range<usize>)
                        -> io::Result<()> {
                    // Ranges must not overlap
                    assert!(src.end <= dest.start || src.start >= dest.end);

                    // Final cursor position
                    let final_cur = if src.start < dest.start {
                        dest.end
                    } else {
                        dest.start + (src.end - src.start)
                    };

                    let (left, right) = if src.start < dest.start {
                        (src, dest)
                    } else {
                        (dest, src)
                    };

                    self.move_to(left.start)?;

                    let a = self.buffer[left.clone()].to_owned();
                    let b = self.buffer[right.clone()].to_owned();

                    let _ = self.buffer.drain(right.clone());
                    self.buffer.insert_str(right.start, &a);

                    let _ = self.buffer.drain(left.clone());
                    self.buffer.insert_str(left.start, &b);

                    let cursor = self.cursor;
                    self.draw_buffer(cursor)?;
                    self.term.clear_to_screen_end()?;

                    self.cursor = final_cur;
                    let len = self.buffer.len();
                    self.move_from(len)
                }

                fn prompt_suffix_length(&self) -> usize {
                    match self.prompt_type {
                        PromptType::Normal => self.prompt_suffix_len,
                        PromptType::Number => {
                            let n = number_len(self.input_arg.to_i32());
                            PROMPT_NUM_PREFIX + PROMPT_NUM_SUFFIX + n
                        }
                        PromptType::Search => {
                            let mut prefix = PROMPT_SEARCH_PREFIX;

                            if self.reverse_search {
                                prefix += PROMPT_SEARCH_REVERSE_PREFIX;
                            }
                            if self.search_failed {
                                prefix += PROMPT_SEARCH_FAILED_PREFIX;
                            }

                            let n = self.display_size(&self.search_buffer, prefix);
                            prefix + n + PROMPT_SEARCH_SUFFIX
                        }
                        PromptType::CompleteIntro(n) => complete_intro(n).len(),
                        PromptType::CompleteMore => COMPLETE_MORE.len(),
                    }
                }

                fn line_col(&self, pos: usize) -> (usize, usize) {
                    let prompt_len = self.prompt_suffix_length();

                    match self.prompt_type {
                        PromptType::CompleteIntro(_) |
                        PromptType::CompleteMore => {
                            let width = self.screen_size.columns;
                            (prompt_len / width, prompt_len % width)
                        }
                        _ => self.line_col_with(pos, &self.buffer, prompt_len)
                    }
                }

                fn line_col_with(&self, pos: usize, buf: &str, start_col: usize) -> (usize, usize) {
                    let width = self.screen_size.columns;
                    if width == 0 {
                        return (0, 0);
                    }

                    let n = start_col + self.display_size(&buf[..pos], start_col);

                    (n / width, n % width)
                }

                pub fn clear_screen(&mut self) -> io::Result<()> {
                    self.term.clear_screen()?;
                    self.draw_prompt()?;

                    Ok(())
                }

                pub fn clear_to_screen_end(&mut self) -> io::Result<()> {
                    self.term.clear_to_screen_end()
                }

                /// Draws a new buffer on the screen. Cursor position is assumed to be `0`.
                pub fn new_buffer(&mut self) -> io::Result<()> {
                    self.draw_buffer(0)?;
                    self.cursor = self.buffer.len();

                    self.term.clear_to_screen_end()?;

                    Ok(())
                }

                pub fn clear_full_prompt(&mut self) -> io::Result<()> {
                    let prefix_lines = self.prompt_prefix_len / self.screen_size.columns;
                    let (line, _) = self.line_col(self.cursor);
                    self.term.move_up(prefix_lines + line)?;
                    self.term.move_to_first_column()?;
                    self.term.clear_to_screen_end()
                }

                pub(crate) fn clear_prompt(&mut self) -> io::Result<()> {
                    let (line, _) = self.line_col(self.cursor);

                    self.term.move_up(line)?;
                    self.term.move_to_first_column()?;
                    self.term.clear_to_screen_end()
                }

                /// Move back to true cursor position from some other position
                pub fn move_from(&mut self, pos: usize) -> io::Result<()> {
                    let (lines, cols) = self.move_delta(pos, self.cursor, &self.buffer);
                    self.move_rel(lines, cols)
                }

                pub fn move_to(&mut self, pos: usize) -> io::Result<()> {
                    if pos != self.cursor {
                        let (lines, cols) = self.move_delta(self.cursor, pos, &self.buffer);
                        self.move_rel(lines, cols)?;
                        self.cursor = pos;
                    }

                    Ok(())
                }

                pub fn move_to_end(&mut self) -> io::Result<()> {
                    let pos = self.buffer.len();
                    self.move_to(pos)
                }

                pub fn move_right(&mut self, n: usize) -> io::Result<()> {
                    self.term.move_right(n)
                }

                /// Moves from `old` to `new` cursor position, using the given buffer
                /// as current input.
                fn move_delta(&self, old: usize, new: usize, buf: &str) -> (isize, isize) {
                    let prompt_len = self.prompt_suffix_length();
                    let (old_line, old_col) = self.line_col_with(old, buf, prompt_len);
                    let (new_line, new_col) = self.line_col_with(new, buf, prompt_len);

                    (new_line as isize - old_line as isize,
                    new_col as isize - old_col as isize)
                }

                fn move_rel(&mut self, lines: isize, cols: isize) -> io::Result<()> {
                    if lines > 0 {
                        self.term.move_down(lines as usize)?;
                    } else if lines < 0 {
                        self.term.move_up((-lines) as usize)?;
                    }

                    if cols > 0 {
                        self.term.move_right(cols as usize)?;
                    } else if cols < 0 {
                        self.term.move_left((-cols) as usize)?;
                    }

                    Ok(())
                }

                pub fn reset_data(&mut self) {
                    self.data.reset_data();
                }

                pub fn set_digit_from_char(&mut self, ch: char) {
                    let digit = match ch {
                        '-' => Digit::NegNone,
                        '0' ..= '9' => Digit::from(ch),
                        _ => Digit::None
                    };

                    self.input_arg = digit;
                    self.explicit_arg = true;
                }
            }

            #[derive(Copy, Clone, Debug)]
            struct Blink {
                pos: usize,
                expiry: Instant,
            }

            impl<'a, 'b: 'a, Term: 'b + Terminal> Writer<'a, 'b, Term> {
                fn new(mut write: WriterImpl<'a, 'b, Term>, clear: bool) -> io::Result<Self> {
                    write.expire_blink()?;

                    if write.is_prompt_drawn {
                        if clear {
                            write.clear_full_prompt()?;
                        } else {
                            write.move_to_end()?;
                            write.write_str("\n")?;
                        }
                    }

                    Ok(Writer{write})
                }

                pub(crate) fn with_lock(write: WriteLock<'b, Term>, clear: bool) -> io::Result<Self> {
                    Writer::new(WriterImpl::Mutex(write), clear)
                }

                pub(crate) fn with_ref(write: &'a mut WriteLock<'b, Term>, clear: bool) -> io::Result<Self> {
                    Writer::new(WriterImpl::MutRef(write), clear)
                }

                /// Returns an iterator over history entries.
                pub fn history(&self) -> HistoryIter {
                    self.write.history()
                }

                /// Writes some text to the terminal device.
                ///
                /// Before the `Writer` is dropped, any output written should be followed
                /// by a newline. A newline is automatically written if the `writeln!`
                /// macro is used.
                pub fn write_str(&mut self, s: &str) -> io::Result<()> {
                    self.write.write_str(s)
                }

                /// Writes formatted text to the terminal display.
                ///
                /// This method enables `Interface` to be used as the receiver to
                /// the [`writeln!`] macro.
                ///
                /// If the text contains any unprintable characters (e.g. escape sequences),
                /// those characters will be escaped before printing.
                ///
                /// [`read_line`]: ../interface/struct.Interface.html#method.read_line
                /// [`writeln!`]: https://doc.rust-lang.org/std/macro.writeln.html
                pub fn write_fmt(&mut self, args: fmt::Arguments) -> io::Result<()> {
                    let s = args.to_string();
                    self.write_str(&s)
                }
            }

            impl<'a, 'b: 'a, Term: 'b + Terminal> Drop for Writer<'a, 'b, Term> {
                fn drop(&mut self) {
                    if self.write.is_prompt_drawn {
                        // There's not really anything useful to be done with this error.
                        let _ = self.write.draw_prompt();
                    }
                }
            }

            impl<'a, Term: 'a + Terminal> Deref for WriteLock<'a, Term> {
                type Target = Write;

                fn deref(&self) -> &Write {
                    &self.data
                }
            }

            impl<'a, Term: 'a + Terminal> DerefMut for WriteLock<'a, Term> {
                fn deref_mut(&mut self) -> &mut Write {
                    &mut self.data
                }
            }

            impl Write {
                pub fn new(screen_size: Size) -> Write {
                    Write{
                        buffer: String::new(),
                        backup_buffer: String::new(),
                        cursor: 0,
                        blink: None,

                        history: VecDeque::new(),
                        history_index: None,
                        history_size: MAX_HISTORY,
                        history_new_entries: 0,

                        is_prompt_drawn: false,

                        prompt_prefix: String::new(),
                        prompt_prefix_len: 0,
                        prompt_suffix: String::new(),
                        prompt_suffix_len: 0,

                        prompt_type: PromptType::Normal,

                        reverse_search: false,
                        search_failed: false,
                        search_buffer: String::new(),
                        last_search: String::new(),
                        prev_history: None,
                        prev_cursor: !0,

                        input_arg: Digit::None,
                        explicit_arg: false,

                        screen_size,
                    }
                }

                pub fn history(&self) -> HistoryIter {
                    HistoryIter(self.history.iter())
                }

                pub fn new_history(&self) -> Skip<HistoryIter> {
                    let first_new = self.history.len() - self.history_new_entries;
                    self.history().skip(first_new)
                }

                pub fn new_history_entries(&self) -> usize {
                    self.history_new_entries
                }

                pub fn reset_data(&mut self) {
                    self.buffer.clear();
                    self.backup_buffer.clear();
                    self.cursor = 0;
                    self.history_index = None;

                    self.prompt_type = PromptType::Normal;

                    self.input_arg = Digit::None;
                    self.explicit_arg = false;
                }

                pub fn reset_new_history(&mut self) {
                    self.history_new_entries = 0;
                }

                pub fn set_buffer(&mut self, buf: &str) {
                    self.buffer.clear();
                    self.buffer.push_str(buf);
                    self.cursor = buf.len();
                }

                pub fn set_cursor(&mut self, pos: usize) {
                    if !self.buffer.is_char_boundary(pos) {
                        panic!("invalid cursor position {} in buffer {:?}",
                            pos, self.buffer);
                    }

                    self.cursor = pos;
                }

                pub fn set_prompt(&mut self, prompt: &str) {
                    let (pre, suf) = match prompt.rfind('\n') {
                        Some(pos) => (&prompt[..pos + 1], &prompt[pos + 1..]),
                        None => (&prompt[..0], prompt)
                    };

                    self.prompt_prefix = pre.to_owned();
                    self.prompt_suffix = suf.to_owned();

                    let pre_virt = filter_visible(pre);
                    self.prompt_prefix_len = self.display_size(&pre_virt, 0);

                    let suf_virt = filter_visible(suf);
                    self.prompt_suffix_len = self.display_size(&suf_virt, 0);
                }

                pub fn display_size(&self, s: &str, start_col: usize) -> usize {
                    let width = self.screen_size.columns;
                    let mut col = start_col;

                    let disp = Display{
                        allow_tab: true,
                        allow_newline: true,
                        .. Display::default()
                    };

                    for ch in filter_visible(s).chars().flat_map(|ch| display(ch, disp)) {
                        let n = match ch {
                            '\n' => width - (col % width),
                            '\t' => TAB_STOP - (col % TAB_STOP),
                            ch if is_combining_mark(ch) => 0,
                            ch if is_wide(ch) => {
                                if col % width == width - 1 {
                                    // Can't render a fullwidth character into last column
                                    3
                                } else {
                                    2
                                }
                            }
                            _ => 1
                        };

                        col += n;
                    }

                    col - start_col
                }
            }

            /// Maximum value of digit input
            const NUMBER_MAX: i32 = 1_000_000;

            #[derive(Copy, Clone, Debug)]
            pub(crate) enum Digit {
                None,
                NegNone,
                Num(i32),
                NegNum(i32),
            }

            impl Digit {
                pub fn input(&mut self, n: i32) {
                    match *self {
                        Digit::None => *self = Digit::Num(n),
                        Digit::NegNone => *self = Digit::NegNum(n),
                        Digit::Num(ref mut m) | Digit::NegNum(ref mut m) => {
                            *m *= 10;
                            *m += n;
                        }
                    }
                }

                pub fn is_out_of_bounds(&self) -> bool {
                    match *self {
                        Digit::Num(n) | Digit::NegNum(n) if n > NUMBER_MAX => true,
                        _ => false
                    }
                }

                pub fn to_i32(&self) -> i32 {
                    match *self {
                        Digit::None => 1,
                        Digit::NegNone => -1,
                        Digit::Num(n) => n,
                        Digit::NegNum(n) => -n,
                    }
                }
            }

            impl From<char> for Digit {
                /// Convert a decimal digit character to a `Digit` value.
                ///
                /// The input must be in the range `'0' ..= '9'`.
                fn from(ch: char) -> Digit {
                    let n = (ch as u8) - b'0';
                    Digit::Num(n as i32)
                }
            }

            #[derive(Copy, Clone, Debug, Eq, PartialEq)]
            pub(crate) enum PromptType {
                Normal,
                Number,
                Search,
                CompleteIntro(usize),
                CompleteMore,
            }

            impl PromptType {
                pub(crate) fn is_normal(&self) -> bool {
                    *self == PromptType::Normal
                }
            }

            impl<'a, 'b, Term: 'b + Terminal> Deref for WriterImpl<'a, 'b, Term> {
                type Target = WriteLock<'b, Term>;

                fn deref(&self) -> &WriteLock<'b, Term> {
                    match *self {
                        WriterImpl::Mutex(ref m) => m,
                        WriterImpl::MutRef(ref m) => m,
                    }
                }
            }

            impl<'a, 'b: 'a, Term: 'b + Terminal> DerefMut for WriterImpl<'a, 'b, Term> {
                fn deref_mut(&mut self) -> &mut WriteLock<'b, Term> {
                    match *self {
                        WriterImpl::Mutex(ref mut m) => m,
                        WriterImpl::MutRef(ref mut m) => m,
                    }
                }
            }

            /// Iterator over `Interface` history entries
            pub struct HistoryIter<'a>(vec_deque::Iter<'a, String>);

            impl<'a> ExactSizeIterator for HistoryIter<'a> {}

            impl<'a> Iterator for HistoryIter<'a> {
                type Item = &'a str;

                #[inline]
                fn next(&mut self) -> Option<&'a str> {
                    self.0.next().map(|s| &s[..])
                }

                #[inline]
                fn nth(&mut self, n: usize) -> Option<&'a str> {
                    self.0.nth(n).map(|s| &s[..])
                }

                #[inline]
                fn size_hint(&self) -> (usize, Option<usize>) {
                    self.0.size_hint()
                }
            }

            impl<'a> DoubleEndedIterator for HistoryIter<'a> {
                #[inline]
                fn next_back(&mut self) -> Option<&'a str> {
                    self.0.next_back().map(|s| &s[..])
                }
            }

            #[derive(Copy, Clone, Debug, Eq, PartialEq)]
            pub(crate) enum DisplaySequence {
                Char(char),
                Escape(char),
                End,
            }

            impl Iterator for DisplaySequence {
                type Item = char;

                fn next(&mut self) -> Option<char> {
                    use self::DisplaySequence::*;

                    let (res, next) = match *self {
                        Char(ch) => (ch, End),
                        Escape(ch) => ('^', Char(ch)),
                        End => return None
                    };

                    *self = next;
                    Some(res)
                }

                fn size_hint(&self) -> (usize, Option<usize>) {
                    use self::DisplaySequence::*;

                    let n = match *self {
                        Char(_) => 1,
                        Escape(_) => 2,
                        End => 0,
                    };

                    (n, Some(n))
                }
            }

            #[derive(Copy, Clone, Debug, Default)]
            pub(crate) struct Display {
                allow_tab: bool,
                allow_newline: bool,
                allow_escape: bool,
            }

            pub(crate) fn display(ch: char, style: Display) -> DisplaySequence {
                match ch {
                    '\t' if style.allow_tab => DisplaySequence::Char(ch),
                    '\n' if style.allow_newline => DisplaySequence::Char(ch),
                    ESCAPE if style.allow_escape => DisplaySequence::Char(ch),
                    '\0' => DisplaySequence::Escape('@'),
                    RUBOUT => DisplaySequence::Escape('?'),
                    ch if is_ctrl(ch) => DisplaySequence::Escape(unctrl(ch)),
                    ch => DisplaySequence::Char(ch)
                }
            }

            pub(crate) fn display_str<'a>(s: &'a str, style: Display) -> Cow<'a, str> {
                if s.chars().all(|ch| display(ch, style) == DisplaySequence::Char(ch)) {
                    Borrowed(s)
                } else {
                    Owned(s.chars().flat_map(|ch| display(ch, style)).collect())
                }
            }

            fn complete_intro(n: usize) -> String {
                format!("Display all {} possibilities? (y/n)", n)
            }

            fn number_len(n: i32) -> usize {
                match n {
                    -1_000_000              => 8,
                    -  999_999 ..= -100_000 => 7,
                    -   99_999 ..= - 10_000 => 6,
                    -    9_999 ..= -  1_000 => 5,
                    -      999 ..= -    100 => 4,
                    -       99 ..= -     10 => 3,
                    -        9 ..= -      1 => 2,
                            0 ..=        9 => 1,
                            10 ..=       99 => 2,
                        100 ..=      999 => 3,
                        1_000 ..=    9_999 => 4,
                        10_000 ..=   99_999 => 5,
                    100_000 ..=  999_999 => 6,
                    1_000_000              => 7,
                    _ => unreachable!()
                }
            }
        }
        
        pub mod system
        {
            pub mod unix
            {
                /*!
                Unix platform support */
                use ::
                {
                    *,
                };
                /*
                pub use self::terminal::terminal_read;
                */
                pub mod path
                {
                    /*!
                    */
                    use ::
                    {
                        *,
                    };
                    /*
                    use std::env::var_os;
                    use std::path::PathBuf;
                    use dirs::home_dir;
                    */
                    pub fn env_init_file() -> Option<PathBuf> {
                        var_os("INPUTRC").map(PathBuf::from)
                    }

                    pub fn system_init_file() -> Option<PathBuf> {
                        Some(PathBuf::from("/etc/inputrc"))
                    }

                    pub fn user_init_file() -> Option<PathBuf> {
                        home_dir().map(|p| p.join(".inputrc"))
                    }
                }

                pub mod terminal
                {
                    /*!
                    */
                    use ::
                    {
                        *,
                    };
                    /*
                    use std::io;
                    use std::time::Duration;

                    use mortal::{Event, TerminalReadGuard};
                    use mortal::unix::TerminalExt;

                    use crate::terminal::RawRead;
                    */
                    pub fn terminal_read(term: &mut TerminalReadGuard, buf: &mut Vec<u8>) -> io::Result<RawRead>
                    {
                        let mut buffer = [0; 1024];

                        match term.read_raw(&mut buffer, Some(Duration::new(0, 0)))? {
                            None => Ok(RawRead::Bytes(0)),
                            Some(Event::Raw(n)) => {
                                buf.extend(&buffer[..n]);
                                Ok(RawRead::Bytes(n))
                            }
                            Some(Event::Resize(size)) => Ok(RawRead::Resize(size)),
                            Some(Event::Signal(sig)) => Ok(RawRead::Signal(sig)),
                            _ => unreachable!()
                        }
                    }
                }
            }
            
            pub mod windows
            {
                /*!
                */
                use ::
                {
                    *,
                };
                /*
                */
            }
        }
        
        #[cfg( unix    )] pub use self::system::unix as sys;
        #[cfg( windows )] pub use self::system::windows as sys;
    }
    /// Load an `Obj` from a file.
    pub fn load_from_file( path:&str ) -> ParseResult<Obj>
    {
        object_file( path )
    }
    /// Load an `Obj` from a &str.
    pub fn load_from_str(contents: &str) -> ParseResult<Obj>
    {
        object_from_str(contents)
    }
    /// Parses given file as an `Obj`.
   
    pub fn object_file(path: &str) -> ParseResult<Obj>
    {
        let stream = CharStream::from_file(path)?;
        parse_obj_stream(stream, &mut (HashMap::new(), HashSet::new()))
    }
   
    fn parse_obj_file_includes(path: &str, included: &mut IncludedMap) -> ParseResult<Obj> {
        let stream = CharStream::from_file(path)?;
        parse_obj_stream(stream, included)
    }
    /// Parses given &str as an `Obj`.
   
    pub fn object_from_str(contents: &str) -> ParseResult<Obj>
    {
        let contents = String::from(contents);
        let stream = CharStream::from_string(contents)?;
        parse_obj_stream(stream, &mut (HashMap::new(), HashSet::new()))
    }
    /// Parses an Obj given a character stream.
    #[inline] fn parse_obj_stream(mut stream: CharStream, mut included: &mut IncludedMap) -> ParseResult<Obj> {
        let mut obj: ObjMap = HashMap::new();
       
        if !find_char(stream.clone()) {
            return Ok(Obj::from_map_unchecked(obj));
        }

        let mut globals: GlobalMap = HashMap::new();
        let mut parent = None;

       
        while parse_field_value_pair(
            &mut stream,
            &mut obj,
            &mut globals,
            &mut included,
            &mut parent,
            1,
            None,
        )? {}

        Ok(match parent {
            Some(parent) => Obj::from_map_with_parent_unchecked(obj, parent),
            None => Obj::from_map_unchecked(obj),
        })
    }
   
    fn parse_obj
    (
        mut stream: &mut CharStream,
        globals: &mut GlobalMap,
        mut included: &mut IncludedMap,
        depth: usize,
    ) -> ParseResult<Value> 
    {
       
        if depth > MAX_DEPTH {
            return parse_err(stream.file(), MaxDepth(stream.line(), stream.col()));
        }

       
        let ch = stream.next().unwrap();
        assert_eq!(ch, '{');
       
        if !find_char(stream.clone()) {
            return parse_err(stream.file(), UnexpectedEnd(stream.line()));
        }

        let mut obj: ObjMap = HashMap::new();
        let mut parent = None;

       
        while parse_field_value_pair
        (
            &mut stream,
            &mut obj,
            globals,
            &mut included,
            &mut parent,
            depth,
            Some('}'),
        )? {}

        let obj = match parent 
        {
            Some(parent) => Obj::from_map_with_parent_unchecked(obj, parent),
            None => Obj::from_map_unchecked(obj),
        };
        Ok(obj.into())
    }
    /// Parses a field/value pair.
    #[inline] pub fn parse_field_value_pair
    (
        mut stream: &mut CharStream,
        obj: &mut ObjMap,
        mut globals: &mut GlobalMap,
        mut included: &mut IncludedMap,
        parent: &mut Option<Obj>,
        depth: usize,
        cur_brace: Option<char>,
    ) -> ParseResult<bool> 
    {
       
        let peek = stream.peek().unwrap();
        
        if peek == '}' && cur_brace.is_some() 
        {
            let _ = stream.next();
            return Ok(false);
        }
        
        else if is::end_delimiter(peek) 
        {
            return parse_err(
                stream.file(),
                InvalidClosingBracket(cur_brace, peek, stream.line(), stream.col()),
            );
        }

       
        let (field_line, field_col) = (stream.line(), stream.col());

       
        let (field, is_global, is_parent) = parse_field(stream.clone(), field_line, field_col)?;

        if !is_global && !is_parent && obj.contains_key(&field) {
            return parse_err(stream.file(), DuplicateField(field, field_line, field_col));
        } else if is_parent && parent.is_some() {
            return parse_err(
                stream.file(),
                DuplicateField("^".into(), field_line, field_col),
            );
        }

       
        if !find_char(stream.clone()) {
            return parse_err(stream.file(), UnexpectedEnd(stream.line()));
        }

       
        let (value_line, value_col) = (stream.line(), stream.col());
        let value = parse_value(
            &mut stream,
            obj,
            &mut globals,
            &mut included,
            value_line,
            value_col,
            depth,
            cur_brace,
            true,
        )?;
       
        if is_global {
            if globals.contains_key(&field) {
                return parse_err(stream.file(), DuplicateGlobal(field, field_line, field_col));
            }
            globals.insert(field, value);
        } else if is_parent {
            let par = value
                .get_obj()
                .map_err(|e| ParseError::from_over(&e, stream.file(), value_line, value_col))?;
            *parent = Some(par);
        } else {
            obj.insert(field, value);
        }

       
        if !find_char(stream.clone()) {
            match cur_brace {
                Some(_) => return parse_err(stream.file(), UnexpectedEnd(stream.line())),
                None => return Ok(false),
            }
        }

        Ok(true)
    }
   
    fn parse_arr_file(path: &str, mut included: &mut IncludedMap) -> ParseResult<Arr> {
        let mut stream = CharStream::from_file(path)?;

        let obj: ObjMap = HashMap::new();
        let mut globals: GlobalMap = HashMap::new();

        let mut vec = Vec::new();
        let mut tcur = Type::Any;
        let mut has_any = true;

        loop {
           
            if !find_char(stream.clone()) {
                break;
            }
           
            let (value_line, value_col) = (stream.line(), stream.col());
            let value = parse_value(
                &mut stream,
                &obj,
                &mut globals,
                &mut included,
                value_line,
                value_col,
                1,
                None,
                true,
            )?;

            let tnew = value.get_type();

            if has_any {
                match Type::most_specific(&tcur, &tnew) {
                    Some((t, any)) => {
                        tcur = t;
                        has_any = any;
                    }
                    None => {
                        return parse_err(
                            stream.file(),
                            ExpectedType(tcur, tnew, value_line, value_col),
                        );
                    }
                }
            } else if tcur != tnew {
                return parse_err(
                    stream.file(),
                    ExpectedType(tcur, tnew, value_line, value_col),
                );
            }
            vec.push(value);
        }

        let arr = Arr::from_vec_unchecked(vec, tcur);

        Ok(arr)
    }
   
    fn parse_arr
    (
        mut stream: &mut CharStream,
        obj: &ObjMap,
        mut globals: &mut GlobalMap,
        mut included: &mut IncludedMap,
        depth: usize,
    ) -> ParseResult<Value> 
    {
       
        if depth > MAX_DEPTH 
        {
            return parse_err(stream.file(), MaxDepth(stream.line(), stream.col()));
        }

       
        let ch = stream.next().unwrap();
        assert_eq!(ch, '[');

        let mut vec = Vec::new();
        let mut tcur = Type::Any;
        let mut has_any = true;

        loop 
        {
           
            if !find_char(stream.clone()) 
            {
                return parse_err(stream.file(), UnexpectedEnd(stream.line()));
            }
            let peek = stream.peek().unwrap();
            if peek == ']' 
            {
                let _ = stream.next();
                break;
            } 
            
            else if is::end_delimiter(peek) 
            {
                return parse_err(
                    stream.file(),
                    InvalidClosingBracket(Some(']'), peek, stream.line(), stream.col()),
                );
            }
           
            let (value_line, value_col) = (stream.line(), stream.col());
            let value = parse_value(
                &mut stream,
                obj,
                &mut globals,
                &mut included,
                value_line,
                value_col,
                depth,
                Some(']'),
                true,
            )?;

            let tnew = value.get_type();

            if has_any {
                match Type::most_specific(&tcur, &tnew) {
                    Some((t, any)) => {
                        tcur = t;
                        has_any = any;
                    }
                    None => {
                        return parse_err(
                            stream.file(),
                            ExpectedType(tcur, tnew, value_line, value_col),
                        );
                    }
                }
            } else if tcur != tnew {
                return parse_err(
                    stream.file(),
                    ExpectedType(tcur, tnew, value_line, value_col),
                );
            }
            vec.push(value);
        }

        let arr = Arr::from_vec_unchecked(vec, tcur);

        Ok(arr.into())
    }
   
    fn parse_tup_file(path: &str, mut included: &mut IncludedMap) -> ParseResult<Tup> {
        let mut stream = CharStream::from_file(path)?;

        let mut vec: Vec<Value> = Vec::new();
        let obj: ObjMap = HashMap::new();
        let mut globals: GlobalMap = HashMap::new();

        loop {
           
            if !find_char(stream.clone()) {
                break;
            }
           
            let (value_line, value_col) = (stream.line(), stream.col());
            let value = parse_value(
                &mut stream,
                &obj,
                &mut globals,
                &mut included,
                value_line,
                value_col,
                1,
                None,
                true,
            )?;

            vec.push(value);
        }

        Ok(vec.into())
    }
   
    fn parse_tup
    (
        mut stream: &mut CharStream,
        obj: &ObjMap,
        mut globals: &mut GlobalMap,
        mut included: &mut IncludedMap,
        depth: usize,
    ) -> ParseResult<Value> 
    {        
        if depth > MAX_DEPTH 
        {
            return parse_err(stream.file(), MaxDepth(stream.line(), stream.col()));
        }
        
        let ch = stream.next().unwrap();
        assert_eq!(ch, '(');

        let mut vec = Vec::new();

        loop 
        {
            if !find_char(stream.clone()) 
            {
                return parse_err(stream.file(), UnexpectedEnd(stream.line()));
            }
            let peek = stream.peek().unwrap();
            
            if peek == ')' 
            {
                let _ = stream.next();
                break;
            } 
            
            else if is::end_delimiter(peek)
            {
                return parse_err(
                    stream.file(),
                    InvalidClosingBracket(Some(')'), peek, stream.line(), stream.col()),
                );
            }
           
            let (value_line, value_col) = (stream.line(), stream.col());
            let value = parse_value
            (
                &mut stream,
                obj,
                &mut globals,
                &mut included,
                value_line,
                value_col,
                depth,
                Some(')'),
                true,
            )?;

            vec.push(value);
        }

        let tup = Tup::from_vec(vec);

        Ok(tup.into())
    }
   
    fn parse_field
    (
        mut stream: CharStream,
        line: usize,
        col: usize,
    ) -> ParseResult<(String, bool, bool)> 
    {
        let mut field = String::new();
        let mut first = true;
        let mut is_global = false;

        let ch = stream.peek().unwrap();
        
        if ch == '@' {
            let ch = stream.next().unwrap();
            is_global = true;
            field.push(ch);
        }

        while let Some(ch) = stream.next() 
        {
            match ch {
                ':' if !first => {
                    break;
                }
                ch if Obj::is_valid_field_char(ch, first) => field.push(ch),
                ch => {
                    return parse_err(
                        stream.file(),
                        InvalidFieldChar(ch, stream.line(), stream.col() - 1),
                    );
                }
            }
            first = false;
        }
       
        match field.as_str() 
        {
            _field_str if is::reserved(_field_str) => 
            {
                parse_err(stream.file(), InvalidFieldName(field.clone(), line, col))
            }
            "^" => Ok((field.clone(), false, true)),
            bad if bad.starts_with('^') => 
            {
                parse_err(stream.file(), InvalidFieldName(field.clone(), line, col))
            }
            _ => Ok((field.clone(), is_global, false)),
        }
    }
   
    fn parse_value
    (
        mut stream: &mut CharStream,
        obj: &ObjMap,
        mut globals: &mut GlobalMap,
        mut included: &mut IncludedMap,
        line: usize,
        col: usize,
        depth: usize,
        cur_brace: Option<char>,
        is_first: bool,
    ) -> ParseResult<Value> 
    {
       
        let res = match stream.peek().unwrap() 
        {
            '"' => parse_str(&mut stream)?,
            '\'' => parse_char(&mut stream)?,
            '{' => parse_obj(&mut stream, &mut globals, included, depth + 1)?,
            '[' => parse_arr(&mut stream, obj, &mut globals, included, depth + 1)?,
            '(' => parse_tup(&mut stream, obj, &mut globals, included, depth + 1)?,
            '@' => parse_variable(
                &mut stream,
                obj,
                globals,
                included,
                line,
                col,
                depth,
                cur_brace,
            )?,
            '<' => parse_include(&mut stream, obj, &mut globals, &mut included, depth + 1)?,
            ch @ '+' | ch @ '-' => {
                parse_unary_op(&mut stream, obj, globals, included, depth, cur_brace, ch)?
            }
            ch if is::numeric_char(ch) => parse_numeric(&mut stream, line, col)?,
            ch if Obj::is_valid_field_char(ch, true) => parse_variable(
                &mut stream,
                obj,
                globals,
                included,
                line,
                col,
                depth,
                cur_brace,
            )?,
            ch => {
                return parse_err(stream.file(), InvalidValueChar(ch, line, col));
            }
        };
       
        if is_first 
        {
            let mut val_deque: VecDeque<(Value, usize, usize)> = VecDeque::new();
            let mut op_deque: VecDeque<char> = VecDeque::new();
            val_deque.push_back((res, line, col));

            loop 
            {
                match stream.peek()
                {
                    Some(ch) if is::operator(ch) => 
                    {
                        let _ = stream.next();
                        if stream.peek().is_none() {
                            return parse_err(stream.file(), UnexpectedEnd(stream.line()));
                        }
                        let (line2, col2) = (stream.line(), stream.col());

                       
                        let val2 = parse_value(
                            &mut stream,
                            obj,
                            &mut globals,
                            &mut included,
                            line2,
                            col2,
                            depth,
                            cur_brace,
                            false,
                        )?;

                        if is::priority_operator(ch) 
                        {
                            let (val1, line1, col1) = val_deque.pop_back().unwrap();
                            let res = binary_op_on_values(stream, val1, val2, ch, line2, col2)?;
                            val_deque.push_back((res, line1, col1));
                        }
                        
                        else
                        {
                            val_deque.push_back((val2, line2, col2));
                            op_deque.push_back(ch);
                        }
                    }
                    _ => break,
                }
            }
           
            check_value_end(stream, cur_brace)?;

            let (mut val1, _, _) = val_deque.pop_front().unwrap();
            while !op_deque.is_empty() {
                let (val2, line2, col2) = val_deque.pop_front().unwrap();
                val1 = binary_op_on_values(
                    stream,
                    val1,
                    val2,
                    op_deque.pop_front().unwrap(),
                    line2,
                    col2,
                )?;
            }
            Ok(val1)
        } 

        else 
        {
            Ok(res)
        }
    }

    fn parse_unary_op
    (
        mut stream: &mut CharStream,
        obj: &ObjMap,
        mut globals: &mut GlobalMap,
        mut included: &mut IncludedMap,
        depth: usize,
        cur_brace: Option<char>,
        ch: char,
    ) -> ParseResult<Value> 
    {
        let _ = stream.next();
        let line = stream.line();
        let col = stream.col();

        let res = match stream.peek() {
            Some(_) => parse_value(
                &mut stream,
                obj,
                &mut globals,
                &mut included,
                line,
                col,
                depth + 1,
                cur_brace,
                false,
            )?,
            None => return parse_err(stream.file(), UnexpectedEnd(line)),
        };
        unary_op_on_value(stream, res, ch, line, col)
    }
   
    fn parse_numeric(stream: &mut CharStream, line: usize, col: usize) -> ParseResult<Value> 
    {
        let mut s1 = String::new();
        let mut s2 = String::new();
        let mut dec = false;
        let mut under = false;

        while let Some(ch) = stream.peek() {
            match ch {
                ch if is::value_end_char(ch) => break,
                ch if is::digit(ch) => {
                    if !dec {
                        s1.push(ch);
                    } else {
                        s2.push(ch);
                    }
                }
                '.' | ',' => {
                    if !dec {
                        dec = true;
                    } else {
                        return parse_err(
                            stream.file(),
                            InvalidValueChar(ch, stream.line(), stream.col()),
                        );
                    }
                }
                '_' => {
                    if !under {
                        under = true;
                    } else {
                        return parse_err(
                            stream.file(),
                            InvalidValueChar(ch, stream.line(), stream.col()),
                        );
                    }
                }
                _ => {
                    return parse_err(
                        stream.file(),
                        InvalidValueChar(ch, stream.line(), stream.col()),
                    );
                }
            }
            if ch != '_' {
                under = false;
            }
            let _ = stream.next();
        }

        if dec {
           
            if s1.is_empty() && s2.is_empty() {
                return parse_err(stream.file(), InvalidNumeric(line, col));
            }
            let whole: BigInt = if s1.is_empty() {
                0u8.into()
            } else {
                s1.parse()?
            };

           
            let s2 = s2.trim_end_matches('0');

            let (decimal, dec_len): (BigInt, usize) = if s2.is_empty() {
                (0u8.into(), 1)
            } else {
                (s2.parse()?, s2.len())
            };

            let f = frac_from_whole_and_dec(whole, decimal, dec_len);
            Ok(f.into())
        } else {
           
            if s1.is_empty() {
                return parse_err(stream.file(), InvalidNumeric(line, col));
            }
            let i: BigInt = s1.parse()?;
            Ok(i.into())
        }
    }
   
    fn parse_variable
    (
        mut stream: &mut CharStream,
        obj: &ObjMap,
        mut globals: &mut GlobalMap,
        mut included: &mut IncludedMap,
        line: usize,
        col: usize,
        depth: usize,
        cur_brace: Option<char>,
    ) -> ParseResult<Value> 
    {
        let mut var = String::new();
        let mut is_global = false;
        let mut dot = false;
        let mut dot_global = false;

        let ch = stream.peek().unwrap();
        
        if ch == '@' {
            let ch = stream.next().unwrap();
            is_global = true;
            var.push(ch);
        }

        while let Some(ch) = stream.peek() 
        {
            match ch 
            {
                '.' => {
                    let _ = stream.next();
                    match stream.peek() {
                        Some('@') => dot_global = true,
                        Some(ch) if Obj::is_valid_field_char(ch, true) || is::numeric_char(ch) => (),
                        Some(ch) => {
                            return parse_err(
                                stream.file(),
                                InvalidValueChar(ch, stream.line(), stream.col()),
                            );
                        }
                        None => return parse_err(stream.file(), UnexpectedEnd(stream.line())),
                    }
                    dot = true;
                    break;
                }
                ch if is::value_end_char(ch) => break,
                ch if Obj::is_valid_field_char(ch, false) => {
                    let _ = stream.next();
                    var.push(ch);
                }
                ch => {
                    return parse_err(
                        stream.file(),
                        InvalidValueChar(ch, stream.line(), stream.col()),
                    );
                }
            }
        }

        let mut value = match var.as_str() 
        {
            "null" => Value::Null,
            "true" => Value::Bool(true),
            "false" => Value::Bool(false),

            "Obj" => Value::Obj(OBJ_SENTINEL.clone()),
            "Str" => Value::Obj(STR_SENTINEL.clone()),
            "Arr" => Value::Obj(ARR_SENTINEL.clone()),
            "Tup" => Value::Obj(TUP_SENTINEL.clone()),

            var @ "@" => return parse_err(stream.file(), InvalidValue(var.into(), line, col)),
            
            var if is_global => 
            {
               
                match globals.get(var) {
                    Some(value) => value.clone(),
                    None => {
                        let var = String::from(var);
                        return parse_err(stream.file(), GlobalNotFound(var, line, col));
                    }
                }
            }
            
            var => 
            {
               
                match obj.get(var) {
                    Some(value) => value.clone(),
                    None => {
                        let var = String::from(var);
                        return parse_err(stream.file(), VariableNotFound(var, line, col));
                    }
                }
            }
        };

        if dot 
        {
            value = match value 
            {
                Value::Arr(arr) => {
                    let (line, col) = (stream.line(), stream.col());
                    let value = parse_value(
                        &mut stream,
                        obj,
                        &mut globals,
                        &mut included,
                        line,
                        col,
                        depth + 1,
                        cur_brace,
                        false,
                    )?;

                    match value {
                        Value::Int(int) => match int.to_usize() {
                            Some(index) => arr
                                .get(index)
                                .map_err(|e| ParseError::from_over(&e, stream.file(), line, col))?,
                            None => return parse_err(stream.file(), InvalidIndex(int, line, col)),
                        },
                        _ => {
                            return parse_err(
                                stream.file(),
                                ExpectedType(Type::Int, value.get_type(), line, col),
                            );
                        }
                    }
                }
                Value::Tup(tup) => {
                    let (line, col) = (stream.line(), stream.col());
                    let value = parse_value(
                        &mut stream,
                        obj,
                        &mut globals,
                        &mut included,
                        line,
                        col,
                        depth + 1,
                        cur_brace,
                        false,
                    )?;

                    match value {
                        Value::Int(int) => match int.to_usize() {
                            Some(index) => tup
                                .get(index)
                                .map_err(|e| ParseError::from_over(&e, stream.file(), line, col))?,
                            None => return parse_err(stream.file(), InvalidIndex(int, line, col)),
                        },
                        _ => {
                            return parse_err(
                                stream.file(),
                                ExpectedType(Type::Int, value.get_type(), line, col),
                            );
                        }
                    }
                }
                Value::Obj(obj) => {
                    let (line, col) = (stream.line(), stream.col());

                    if dot_global {
                        return parse_err(stream.file(), InvalidValueChar('@', line, col));
                    }
                    parse_variable(
                        &mut stream,
                        obj.map_ref(),
                        globals,
                        included,
                        line,
                        col,
                        depth + 1,
                        cur_brace,
                    )?
                }
                _ => return parse_err(stream.file(), InvalidDot(value.get_type(), line, col)),
            }
        }

        Ok(value)
    }
   
    fn parse_char(stream: &mut CharStream) -> ParseResult<Value> 
    {
        let ch = stream.next().unwrap();
        assert_eq!(ch, '\'');

        let (escape, mut ch) = match stream.next() 
        {
            Some('\\') => (true, '\0'),
            Some(ch) if ch == '\n' || ch == '\r' || ch == '\t' => {
                return parse_err(
                    stream.file(),
                    InvalidValueChar(ch, stream.line(), stream.col() - 1),
                );
            }
            Some(ch) => (false, ch),
            None => return parse_err(stream.file(), UnexpectedEnd(stream.line())),
        };

        if escape 
        {
            ch = match stream.next() 
            {
                Some(ch) => match get::escaped_character(ch)
                {
                    Some(ch) => ch,
                    None => {
                        return parse_err(
                            stream.file(),
                            InvalidEscapeChar(ch, stream.line(), stream.col() - 1),
                        );
                    }
                },

                None => return parse_err(stream.file(), UnexpectedEnd(stream.line())),
            }
        }

        match stream.next() 
        {
            Some('\'') => (),
            Some(ch) => {
                return parse_err(
                    stream.file(),
                    InvalidValueChar(ch, stream.line(), stream.col() - 1),
                );
            }
            None => return parse_err(stream.file(), UnexpectedEnd(stream.line())),
        }

        Ok(ch.into())
    }

    fn parse_str_file(path: &str) -> ParseResult<String> 
    {
       
        let s = str::read_from_file(path)?.replace("\r\n", "\n");

        Ok(s)
    }
   
    fn parse_str(stream: &mut CharStream) -> ParseResult<Value> 
    {
        let ch = stream.next().unwrap();
        assert_eq!(ch, '"');

        let mut s = String::new();
        let mut escape = false;

        loop 
        {
            match stream.next() {
                Some(ch) => {
                    if escape {
                        match get::escaped_character(ch) {
                            Some(ch) => s.push(ch),
                            None => {
                                return parse_err(
                                    stream.file(),
                                    InvalidEscapeChar(ch, stream.line(), stream.col() - 1),
                                );
                            }
                        }
                        escape = false;
                    } else {
                        match ch {
                            '"' => break,
                            '\\' => escape = true,
                            _ => s.push(ch),
                        }
                    }
                }
                None => return parse_err(stream.file(), UnexpectedEnd(stream.line())),
            }
        }

       
        let s = s.replace("\r\n", "\n");

        Ok(s.into())
    }

    fn parse_include
    (
        mut stream: &mut CharStream,
        obj: &ObjMap,
        mut globals: &mut GlobalMap,
        mut included: &mut IncludedMap,
        depth: usize,
    ) -> ParseResult<Value> 
    {
        enum IncludeType {
            Obj,
            Str,
            Arr,
            Tup,
        }

       
        if depth > MAX_DEPTH {
            return parse_err(stream.file(), MaxDepth(stream.line(), stream.col()));
        }

        let ch = stream.next().unwrap();
        assert_eq!(ch, '<');
       
        if !find_char(stream.clone()) {
            return parse_err(stream.file(), UnexpectedEnd(stream.line()));
        }

        let (mut line, mut col) = (stream.line(), stream.col());
        let mut value = parse_value(
            &mut stream,
            obj,
            &mut globals,
            &mut included,
            line,
            col,
            depth,
            Some('>'),
            true,
        )?;

        let mut include_type = IncludeType::Obj;
        let mut parse_again = true;
        match value {
            Value::Obj(ref obj) if obj.ptr_eq(&OBJ_SENTINEL) => include_type = IncludeType::Obj,
            Value::Obj(ref obj) if obj.ptr_eq(&STR_SENTINEL) => include_type = IncludeType::Str,
            Value::Obj(ref obj) if obj.ptr_eq(&ARR_SENTINEL) => include_type = IncludeType::Arr,
            Value::Obj(ref obj) if obj.ptr_eq(&TUP_SENTINEL) => include_type = IncludeType::Tup,
            Value::Str(_) => parse_again = false,
            _ => {
                return parse_err(
                    stream.file(),
                    InvalidIncludeToken(value.get_type(), line, col),
                );
            }
        }

        if parse_again {
           
            if !find_char(stream.clone()) {
                return parse_err(stream.file(), UnexpectedEnd(stream.line()));
            }
            line = stream.line();
            col = stream.col();
            value = parse_value(
                &mut stream,
                obj,
                &mut globals,
                &mut included,
                line,
                col,
                depth,
                Some('>'),
                true,
            )?;
        }

       
        if !find_char(stream.clone()) {
            return parse_err(stream.file(), UnexpectedEnd(stream.line()));
        }

        match stream.next().unwrap() {
            '>' => (),
            ch => {
                return parse_err(
                    stream.file(),
                    InvalidClosingBracket(Some('>'), ch, stream.line(), stream.col() - 1),
                );
            }
        }

       
        let include_file = match value {
            Value::Str(s) => s,
            _ => {
                return parse_err(
                    stream.file(),
                    ExpectedType(Type::Str, value.get_type(), line, col),
                );
            }
        };

        let pathbuf = match stream.file().as_ref() {
            Some(file) => Path::new(file)
                .parent()
                .unwrap()
                .join(Path::new(&include_file)),
            None => Path::new(&include_file).to_path_buf(),
        };
        let path = pathbuf.as_path();
        
        if !path.is_file() {
            return parse_err(stream.file(), InvalidIncludePath(include_file, line, col));
        }

       
        let path_str = match path.to_str() {
            Some(path) => path,
            None => return parse_err(stream.file(), InvalidIncludePath(include_file, line, col)),
        };

       
        let path = match path.canonicalize() {
            Ok(path) => path,
            Err(_) => return parse_err(stream.file(), InvalidIncludePath(include_file, line, col)),
        };
        let full_path_str = match path.to_str() {
            Some(path) => path,
            None => return parse_err(stream.file(), InvalidIncludePath(include_file, line, col)),
        };

       
        let storing = if let Some(file) = stream.file() {
            let full_file = String::from(Path::new(&file).canonicalize().unwrap().to_str().unwrap());
            included.1.insert(full_file.clone());
            Some(full_file)
        } else {
            None
        };
        
        if included.1.contains(full_path_str) {
            return parse_err(stream.file(), CyclicInclude(include_file, line, col));
        }

       
        let value = if included.0.contains_key(full_path_str) {
            let value = &included.0[full_path_str];
            value.clone()
        } else {
            let value: Value = match include_type {
                IncludeType::Obj => parse_obj_file_includes(path_str, included)?.into(),
                IncludeType::Str => parse_str_file(path_str)?.into(),
                IncludeType::Arr => parse_arr_file(path_str, included)?.into(),
                IncludeType::Tup => parse_tup_file(path_str, included)?.into(),
            };
           
            included.0.insert(full_path_str.into(), value.clone());
            value
        };
       
        if let Some(file) = storing {
            included.1.remove(&file);
        }

        Ok(value)
    }
   
    fn unary_op_on_value
    (
        stream: &CharStream,
        val: Value,
        op: char,
        line: usize,
        col: usize,
    ) -> ParseResult<Value> 
    {
        use crate::types::Type::*;

        let t = val.get_type();

        Ok(match op {
            '+' => match t {
                Int | Frac => val,
                _ => return parse_err(stream.file(), UnaryOperatorError(t, op, line, col)),
            },
            '-' => match t {
                Int => (-val.get_int().unwrap()).into(),
                Frac => (-val.get_frac().unwrap()).into(),
                _ => return parse_err(stream.file(), UnaryOperatorError(t, op, line, col)),
            },
            _ => return parse_err(stream.file(), UnaryOperatorError(t, op, line, col)),
        })
    }
   
    fn binary_op_on_values
    (
        stream: &CharStream,
        mut val1: Value,
        mut val2: Value,
        op: char,
        line: usize,
        col: usize,
    ) -> ParseResult<Value> 
    {
        use crate::types::Type::*;

        let (mut type1, mut type2) = (val1.get_type(), val2.get_type());
       
        if type1 == Int && type2 == Frac {
            val1 = Value::Frac(BigRational::new(val1.get_int().unwrap(), 1.into()));
            type1 = Frac;
        } else if type1 == Frac && type2 == Int {
            val2 = Value::Frac(BigRational::new(val2.get_int().unwrap(), 1.into()));
            type2 = Frac;
        }

        Ok(match op {
            '+' => {
                match type1 {
                    Int if type2 == Int => (val1.get_int().unwrap() + val2.get_int().unwrap()).into(),
                    Frac if type2 == Frac => {
                        (val1.get_frac().unwrap() + val2.get_frac().unwrap()).into()
                    }
                    Char if type2 == Char => {
                        let mut s = String::with_capacity(2);
                        s.push(val1.get_char().unwrap());
                        s.push(val2.get_char().unwrap());
                        s.into()
                    }
                    Char if type2 == Str => {
                        let str2 = val2.get_str().unwrap();
                        let mut s = String::with_capacity(1 + str2.len());
                        s.push(val1.get_char().unwrap());
                        s.push_str(&str2);
                        s.into()
                    }
                    Str if type2 == Char => {
                        let str1 = val1.get_str().unwrap();
                        let mut s = String::with_capacity(str1.len() + 1);
                        s.push_str(&str1);
                        s.push(val2.get_char().unwrap());
                        s.into()
                    }
                    Str if type2 == Str => {
                        let str1 = val1.get_str().unwrap();
                        let str2 = val2.get_str().unwrap();
                        let mut s = String::with_capacity(str1.len() + str2.len());
                        s.push_str(&str1);
                        s.push_str(&str2);
                        s.into()
                    }
                    Arr(_) => {
                        match Type::most_specific(&type1, &type2) {
                            Some((t, _)) => {
                                let (arr1, arr2) = (val1.get_arr().unwrap(), val2.get_arr().unwrap());
                                let (mut vec1, mut vec2) =
                                    (arr1.vec_ref().clone(), arr2.vec_ref().clone());

                                let mut vec = Vec::with_capacity(vec1.len() + vec2.len());
                                vec.append(&mut vec1);
                                vec.append(&mut vec2);

                               
                                let arr = if let Arr(ref t) = t {
                                   
                                    arrays::Arr::from_vec_unchecked(vec, t.deref().clone())
                                } else {
                                    panic!("Logic error")
                                };

                                arr.into()
                            }
                            None => {
                                return parse_err(
                                    stream.file(),
                                    BinaryOperatorError(type1, type2, op, line, col),
                                );
                            }
                        }
                    }
                    _ => {
                        return parse_err(
                            stream.file(),
                            BinaryOperatorError(type1, type2, op, line, col),
                        );
                    }
                }
            }
            '-' => match type1 {
                Int if type2 == Int => (val1.get_int().unwrap() - val2.get_int().unwrap()).into(),
                Frac if type2 == Frac => (val1.get_frac().unwrap() - val2.get_frac().unwrap()).into(),
                _ => {
                    return parse_err(
                        stream.file(),
                        BinaryOperatorError(type1, type2, op, line, col),
                    );
                }
            },
            '*' => match type1 {
                Int if type2 == Int => (val1.get_int().unwrap() * val2.get_int().unwrap()).into(),
                Frac if type2 == Frac => (val1.get_frac().unwrap() * val2.get_frac().unwrap()).into(),
                _ => {
                    return parse_err(
                        stream.file(),
                        BinaryOperatorError(type1, type2, op, line, col),
                    );
                }
            },
            '/' => match type1 {
                Int if type2 == Int => {
                    let (int1, int2) = (val1.get_int().unwrap(), val2.get_int().unwrap());
                    if int2.is_zero() {
                        return parse_err(stream.file(), InvalidNumeric(line, col));
                    }
                    BigRational::new(int1, int2).into()
                }
                Frac if type2 == Frac => {
                    let (frac1, frac2) = (val1.get_frac().unwrap(), val2.get_frac().unwrap());
                    if frac2.is_zero() {
                        return parse_err(stream.file(), InvalidNumeric(line, col));
                    }
                    (frac1 / frac2).into()
                }
                _ => {
                    return parse_err(
                        stream.file(),
                        BinaryOperatorError(type1, type2, op, line, col),
                    );
                }
            },
            '%' => match type1 {
                Int if type2 == Int => {
                    let int2 = val2.get_int().unwrap();
                    if int2.is_zero() {
                        return parse_err(stream.file(), InvalidNumeric(line, col));
                    }
                    (val1.get_int().unwrap() % int2).into()
                }
                _ => {
                    return parse_err(
                        stream.file(),
                        BinaryOperatorError(type1, type2, op, line, col),
                    );
                }
            },
            _ => {
                return parse_err(
                    stream.file(),
                    BinaryOperatorError(type1, type2, op, line, col),
                );
            }
        })
    }
   
    fn find_char(mut stream: CharStream) -> bool 
    {
        while let Some(ch) = stream.peek() {
            match ch {
                '#' => {
                   
                    loop {
                        let ch = stream.next();
                        if ch.is_none() {
                            return false;
                        }
                        if ch.unwrap() == '\n' {
                            break;
                        }
                    }
                }
                ch if ch.is_whitespace() => {
                    let _ = stream.next();
                }
                _ => return true,
            }
        }

        false
    }
   
    fn check_value_end(stream: &CharStream, cur_brace: Option<char>) -> ParseResult<()> 
    {
        match stream.peek()
        {
            Some(ch) => match ch
            {
                ch if is::value_end_char(ch) =>
                {
                    if is::end_delimiter(ch) && Some(ch) != cur_brace
                    {
                        parse_err
                        (
                            stream.file(),
                            InvalidClosingBracket(cur_brace, ch, stream.line(), stream.col()),
                        )
                    }
                    
                    else
                    {
                        Ok(())
                    }
                }
                ch => parse_err
                (
                    stream.file(),
                    InvalidValueChar(ch, stream.line(), stream.col()),
                ),
            },
            None => Ok(()),
        }
    }
}

pub mod path
{
    pub use std::path::{ * };
}

pub mod primitive
{
    pub use std::primitive::{ * };
}

pub mod process
{
    pub use std::process::{ * };

    pub mod macros
    {
        use ::
        {
            cmp::{ Ordering },
            error::{ Error },
            fmt::{ self, Debug, Display },
            hash::{ Hash, Hasher },
            ops::{ Range, RangeBounds },
            path::{ PathBuf },
            *,
        };
        /*
            use ::process::macros::extra::DelimSpan;
            use ::process::macros::marker::{ProcMacroAutoTraits, MARKER};
            use ::cmp::Ordering;
            use ::fmt::{self, Debug, Display};
            use ::hash::{Hash, Hasher};
            use ::ops::Range;
            use ::ops::RangeBounds;
            use ::str::FromStr;
            use ::error::Error;
            use ::ffi::CStr;
            use ::path::PathBuf;
            pub use ::process::macros::location::LineColumn;
        */        
        pub mod detection
        {
            use ::
            {
                sync::
                {
                    atomic::{ AtomicUsize, Ordering },
                    Once
                },
                *,
            };
            /*
            */
            static WORKS: AtomicUsize = AtomicUsize::new(0);
            static INIT: Once = Once::new();

            pub fn inside_proc_macro() -> bool
            {
                match WORKS.load(Ordering::Relaxed)
                {
                    1 => return false,
                    2 => return true,
                    _ =>
                    {}
                }
                INIT.call_once(initialize);
                inside_proc_macro()
            }
            pub fn force_fallback() { WORKS.store(1, Ordering::Relaxed); }
            pub fn unforce_fallback() { initialize(); }
            
            #[allow(deprecated)]
            fn initialize()
            {
                use ::panic::{self, PanicInfo};

                type PanicHook = dyn Fn(&PanicInfo) + Sync + Send + 'static;

                let null_hook: Box<PanicHook> = Box::new(|_panic_info| { /* ignore */ });
                let sanity_check = &*null_hook as *const PanicHook;
                let original_hook = panic::take_hook();
                panic::set_hook(null_hook);

                let works = panic::catch_unwind(proc_macro::Span::call_site).is_ok();
                WORKS.store(works as usize + 1, Ordering::Relaxed);

                let hopefully_null_hook = panic::take_hook();
                panic::set_hook(original_hook);
                if sanity_check != &*hopefully_null_hook
                {
                    panic!("observed race condition in process::macros::inside_proc_macro");
                }
            }
        }

        pub mod extra
        {
            use ::
            {
                fmt::{ self, Debug },
                process::macros::
                {
                    fallback, imp, Span, 
                },
                marker::{ ProcMacroAutoTraits, MARKER },
                *,
            };
            /*
            */
            /// Invalidate any `process::macros::Span` that exist on the current thread.
            pub fn invalidate_current_thread_spans()
            {
                ::process::macros::imp::invalidate_current_thread_spans();
            }
            /// An object that holds a [`Group`]'s `span_open()` and `span_close()` together
            /// in a more compact representation than holding those 2 spans individually.
            #[derive(Copy, Clone)]
            pub struct DelimSpan 
            {
                inner: DelimSpanEnum,
                _marker: ProcMacroAutoTraits,
            }
            #[derive(Copy, Clone)]
            enum DelimSpanEnum 
            {
                    Compiler {
                    join: proc_macro::Span,
                    open: proc_macro::Span,
                    close: proc_macro::Span,
                },
                Fallback(fallback::Span),
            }
            impl DelimSpan
            {
                pub fn new(group: &imp::Group) -> Self
               
                {
                    let inner = match group
                    {
                        imp::Group::Compiler(group) => DelimSpanEnum::Compiler
                        {
                            join: group.span(),
                            open: group.span_open(),
                            close: group.span_close(),
                        },
                        imp::Group::Fallback(group) => DelimSpanEnum::Fallback(group.span()),
                    };

                    DelimSpan
                    {
                        inner,
                        _marker: marker::MARKER,
                    }
                }
                /// Returns a span covering the entire delimited group.
                pub fn join( &self ) -> Span
                {
                    match &self.inner
                    {
                        DelimSpanEnum::Compiler { join, .. } => Span::_new(imp::Span::Compiler(*join)),
                        DelimSpanEnum::Fallback(span) => Span::_new_fallback(*span),
                    }
                }
                /// Returns a span for the opening punctuation of the group only.
                pub fn open( &self ) -> Span
                {
                    match &self.inner
                    {
                        DelimSpanEnum::Compiler { open, .. } => Span::_new(imp::Span::Compiler(*open)),
                        DelimSpanEnum::Fallback(span) => Span::_new_fallback(span.first_byte()),
                    }
                }
                /// Returns a span for the closing punctuation of the group only.
                pub fn close( &self ) -> Span
                {
                    match &self.inner
                    {
                        DelimSpanEnum::Compiler { close, .. } => Span::_new(imp::Span::Compiler(*close)),
                        DelimSpanEnum::Fallback(span) => Span::_new_fallback(span.last_byte()),
                    }
                }
            }
            impl Debug for DelimSpan           
            {
                fn fmt( &self, f: &mut fmt::Formatter) -> fmt::Result
                {
                    Debug::fmt(&self.join(), f)
                }
            }
        }
        
        pub mod fallback
        {
            use ::
            {
                cell::{ RefCell },
                collections::{ BTreeMap },
                convert::{ TryFrom },
                cmp::{ Ordering },
                fmt::{ self, Debug, Display, Write },
                ffi::{ CStr },
                mem::{ ManuallyDrop },
                ops::{ Range, RangeBounds },
                path::{ PathBuf },
                process::macros::
                {
                    location::LineColumn,
                    parse::{self, Cursor},
                    rcvec::{RcVec, RcVecBuilder, RcVecIntoIter, RcVecMut},
                    imp, Delimiter, Spacing, TokenTree,
                },
                str::{ FromStr },
                *,
            };
            /*
            */
            macro_rules! suffixed_numbers
            {
                ($($name:ident => $kind:ident,)*) => 
                ($(
                    pub fn $name(n: $kind) -> Literal 
                    {
                        Literal::_new(format!(concat!("{}", stringify!($kind)), n))
                    }
                )*)
            }
            macro_rules! unsuffixed_numbers
            {
                ($($name:ident => $kind:ident,)*) => 
                ($(
                    pub fn $name(n: $kind) -> Literal { Literal::_new(n.to_string()) }
                )*)
            }
            /// Force use of proc-macro2's fallback for now, even if the compiler's implementation is available.
            pub fn force()
            {
                ::process::macros::detection::force_fallback();
            }
            /// Resume using the compiler's implementation of the proc macro API if it is available.
            pub fn unforce()
            {
                ::process::macros::detection::unforce_fallback();
            }
            #[derive(Clone)]
            pub struct TokenStream 
            {
                inner: RcVec<TokenTree>,
            }
            #[derive(Debug)]
            pub struct LexError 
            {
                pub span: Span,
            }
            impl LexError           
            {
                pub fn span( &self ) -> Span { self.span }
                pub fn call_site() -> Self
                {
                    LexError
                    {
                        span: Span::call_site(),
                    }
                }
            }
            impl TokenStream
            {
                pub fn new() -> Self
                {
                    TokenStream
                    {
                        inner: RcVecBuilder::new().build(),
                    }
                }
                pub fn from_str_checked(src: &str) -> Result<Self, LexError>
               
                {
                    let mut cursor = get_cursor(src);
                    const BYTE_ORDER_MARK: &str = "\u{feff}";
                    if cursor.starts_with(BYTE_ORDER_MARK) {
                        cursor = cursor.advance(BYTE_ORDER_MARK.len());
                    }
                    parse::token_stream(cursor)
                }
                
                pub fn from_str_unchecked(src: &str) -> Self {
                    Self::from_str_checked(src).unwrap()
                }
                pub fn is_empty( &self ) -> bool
                {
                    self.inner.len() == 0
                }
                fn take_inner( self ) -> RcVecBuilder<TokenTree>
                {
                    let nodrop = ManuallyDrop::new( self );
                    unsafe { ptr::read(&nodrop.inner) }.make_owned()
                }
            }
            fn push_token_from_proc_macro(mut vec: RcVecMut<TokenTree>, token: TokenTree)
            {
                match token
                {
                    TokenTree::Literal
                    (
                        ::process::macros::Literal
                        {
                            inner: ::process::macros::imp::Literal::Fallback(literal),
                            _marker: marker::ProcMacroAutoTraits(_),
                        }
                    ) if literal.repr.starts_with('-') =>
                    {
                        push_negative_literal(vec, literal);
                    }
                    _ => vec.push(token),
                }
                #[cold] fn push_negative_literal(mut vec: RcVecMut<TokenTree>, mut literal: Literal)
                {
                    literal.repr.remove(0);
                    let mut punct = ::process::macros::Punct::new('-', Spacing::Alone);
                    punct.set_span(::process::macros::Span::_new_fallback(literal.span));
                    vec.push(TokenTree::Punct(punct));
                    vec.push(TokenTree::Literal(::process::macros::Literal::_new_fallback(literal)));
                }
            }
            
            impl Drop for TokenStream           
            {
                fn drop( &mut self )
                {
                    let mut stack = Vec::new();
                    let mut current = match self.inner.get_mut() {
                        Some(inner) => inner.take().into_iter(),
                        None => return,
                    };
                    loop {
                        while let Some(token) = current.next() {
                            let group = match token {
                                TokenTree::Group(group) => group.inner,
                                _ => continue,
                            };
                                            let group = match group {
                                ::process::macros::imp::Group::Fallback(group) => group,
                                ::process::macros::imp::Group::Compiler(_) => continue,
                            };
                            let mut group = group;
                            if let Some(inner) = group.stream.inner.get_mut() {
                                stack.push(current);
                                current = inner.take().into_iter();
                            }
                        }
                        match stack.pop() {
                            Some(next) => current = next,
                            None => return,
                        }
                    }
                }
            }
            pub struct TokenStreamBuilder {
                inner: RcVecBuilder<TokenTree>,
            }
            impl TokenStreamBuilder
            {
                pub fn new() -> Self {
                    TokenStreamBuilder {
                        inner: RcVecBuilder::new(),
                    }
                }
                pub fn with_capacity(cap: usize) -> Self {
                    TokenStreamBuilder {
                        inner: RcVecBuilder::with_capacity(cap),
                    }
                }
                pub fn push_token_from_parser(&mut self, tt: TokenTree) {
                    self.inner.push(tt);
                }
                pub fn build( self ) -> TokenStream {
                    TokenStream {
                        inner: self.inner.build(),
                    }
                }
            }
            
            fn get_cursor(src: &str) -> Cursor<'_>
            {
                SOURCE_MAP.with(|sm|
               
                {
                    let mut sm = sm.borrow_mut();
                    let span = sm.add_file(src);
                    Cursor {
                        rest: src,
                        off: span.lo,
                    }
                })
            }
            impl Display for LexError
            {
                fn fmt( &self, f: &mut fmt::Formatter) -> fmt::Result
                {    f.write_str("cannot parse string into token stream")
                }
            }
            impl Display for TokenStream
            {
                fn fmt( &self, f: &mut fmt::Formatter) -> fmt::Result
                {
                    let mut joint = false;
                    for (i, tt) in self.inner.iter().enumerate() {
                        if i != 0 && !joint {
                            write!(f, " ")?;
                        }
                        joint = false;
                        match tt {
                            TokenTree::Group(tt) => Display::fmt(tt, f),
                            TokenTree::Ident(tt) => Display::fmt(tt, f),
                            TokenTree::Punct(tt) =>
                    {
                                joint = tt.spacing() == Spacing::Joint;
                                Display::fmt(tt, f)
                            }
                            TokenTree::Literal(tt) => Display::fmt(tt, f),
                        }?;
                    }
                    Ok(())
                }
            }
            impl Debug for TokenStream
            {
                fn fmt( &self, f: &mut fmt::Formatter) -> fmt::Result
                {    f.write_str("TokenStream ")?;
                    f.debug_list().entries(self.clone()).finish()
                }
            }
            
            impl From<proc_macro::TokenStream> for TokenStream
            {
                fn from(inner: proc_macro::TokenStream) -> Self {
                    TokenStream::from_str_unchecked(&inner.to_string())
                }
            }
            
            impl From<TokenStream> for proc_macro::TokenStream
            {
                fn from(inner: TokenStream) -> Self {
                    proc_macro::TokenStream::from_str_unchecked(&inner.to_string())
                }
            }
            impl From<TokenTree> for TokenStream
            {
                fn from(tree: TokenTree) -> Self
                {
                    let mut stream = RcVecBuilder::new();
                    push_token_from_proc_macro(stream.as_mut(), tree);
                    TokenStream {
                        inner: stream.build(),
                    }
                }
            }
            impl iter::FromIterator<TokenTree> for TokenStream
            {
                fn from_iter<I: IntoIterator<Item = TokenTree>>(tokens: I) -> Self
                {
                    let mut stream = TokenStream::new();
                    stream.extend(tokens);
                    stream
                }
            }
            impl iter::FromIterator<TokenStream> for TokenStream
            {
                fn from_iter<I: IntoIterator<Item = TokenStream>>(streams: I) -> Self
                {
                    let mut v = RcVecBuilder::new();

                    for stream in streams {
                        v.extend(stream.take_inner());
                    }
                    TokenStream { inner: v.build() }
                }
            }
            impl Extend<TokenTree> for TokenStream
            {
                fn extend<I: IntoIterator<Item = TokenTree>>(&mut self, tokens: I)
                {
                    let mut vec = self.inner.make_mut();
                    tokens
                        .into_iter()
                        .for_each(|token| push_token_from_proc_macro(vec.as_mut(), token));
                }
            }
            impl Extend<TokenStream> for TokenStream
            {
                fn extend<I: IntoIterator<Item = TokenStream>>(&mut self, streams: I) {
                    self.inner.make_mut().extend(streams.into_iter().flatten());
                }
            }
            pub type TokenTreeIter = RcVecIntoIter<TokenTree>;

            impl IntoIterator for TokenStream {
                type Item = TokenTree;
                type IntoIter = TokenTreeIter;
                fn into_iter( self ) -> TokenTreeIter {
                    self.take_inner().into_iter()
                }
            }
            thread_local! {
                static SOURCE_MAP: RefCell<SourceMap> = RefCell::new(SourceMap {
                   
                   
                    files: vec![FileInfo {
                        source_text: String::new(),
                        span: Span { lo: 0, hi: 0 },
                        lines: vec![0],
                        char_index_to_byte_offset: BTreeMap::new(),
                    }],
                });
            }
            pub fn invalidate_current_thread_spans() {
                #[cfg(not(fuzzing))]
                SOURCE_MAP.with(|sm| sm.borrow_mut().files.truncate(1));
            }
            struct FileInfo {
                source_text: String,
                span: Span,
                lines: Vec<usize>,
                char_index_to_byte_offset: BTreeMap<usize, usize>,
            }
            impl FileInfo
            {
                fn offset_line_column( &self, offset: usize) -> LineColumn {
                    assert!(self.span_within(Span {
                        lo: offset as u32,
                        hi: offset as u32,
                    }));
                    let offset = offset - self.span.lo as usize;
                    match self.lines.binary_search(&offset) {
                        Ok(found) => LineColumn {
                            line: found + 1,
                            column: 0,
                        },
                        Err(idx) => LineColumn {
                            line: idx,
                            column: offset - self.lines[idx - 1],
                        },
                    }
                }
                fn span_within( &self, span: Span) -> bool
        {
                    span.lo >= self.span.lo && span.hi <= self.span.hi
                }
                fn byte_range(&mut self, span: Span) -> Range<usize>
                {
                    let lo_char = (span.lo - self.span.lo) as usize;

                   
                   
                   
                    let (&last_char_index, &last_byte_offset) = self
                        .char_index_to_byte_offset
                        .range(..=lo_char)
                        .next_back()
                        .unwrap_or((&0, &0));

                    let lo_byte = if last_char_index == lo_char {
                        last_byte_offset
                    } else {
                        let total_byte_offset = match self.source_text[last_byte_offset..]
                            .char_indices()
                            .nth(lo_char - last_char_index)
                        {
                            Some((additional_offset, _ch)) => last_byte_offset + additional_offset,
                            None => self.source_text.len(),
                        };
                        self.char_index_to_byte_offset
                            .insert(lo_char, total_byte_offset);
                        total_byte_offset
                    };

                    let trunc_lo = &self.source_text[lo_byte..];
                    let char_len = (span.hi - span.lo) as usize;
                    lo_byte..match trunc_lo.char_indices().nth(char_len) {
                        Some((offset, _ch)) => lo_byte + offset,
                        None => self.source_text.len(),
                    }
                }
                fn source_text(&mut self, span: Span) -> String
                {
                    let byte_range = self.byte_range(span);
                    self.source_text[byte_range].to_owned()
                }
            }
            /// Computes the offsets of each line in the given source string and the total number of characters
            fn lines_offsets(s: &str) -> (usize, Vec<usize>)
            {
                let mut lines = vec![0];
                let mut total = 0;

                for ch in s.chars() {
                    total += 1;
                    if ch == '\n' {
                        lines.push(total);
                    }
                }
                (total, lines)
            }
            struct SourceMap {
                files: Vec<FileInfo>,
            }
            impl SourceMap
            {
                fn next_start_pos( &self ) -> u32 {

                   
                   
                    self.files.last().unwrap().span.hi + 1
                }
                fn add_file(&mut self, src: &str) -> Span
                {
                    let (len, lines) = lines_offsets(src);
                    let lo = self.next_start_pos();
                    let span = Span {
                        lo,
                        hi: lo + (len as u32),
                    };

                    self.files.push(FileInfo {
                        source_text: src.to_owned(),
                        span,
                        lines,
                       
                        char_index_to_byte_offset: BTreeMap::new(),
                    });

                    span
                }
                fn find( &self, span: Span) -> usize {
                    match self.files.binary_search_by(|file| {
                        if file.span.hi < span.lo {
                            Ordering::Less
                        } else if file.span.lo > span.hi {
                            Ordering::Greater
                        } else {
                            assert!(file.span_within(span));
                            Ordering::Equal
                        }
                    }) {
                        Ok(i) => i,
                        Err(_) => unreachable!("Invalid span with no related FileInfo!"),
                    }
                }
                fn filepath( &self, span: Span) -> String
                {
                    let i = self.find(span);
                    if i == 0 {
                        "<unspecified>".to_owned()
                    } else {
                        format!("<parsed string {}>", i)
                    }
                }
                fn fileinfo( &self, span: Span) -> &FileInfo
                {
                    let i = self.find(span);
                    &self.files[i]
                }
                fn fileinfo_mut(&mut self, span: Span) -> &mut FileInfo
                {
                    let i = self.find(span);
                    &mut self.files[i]
                }
            }
            #[derive(Clone, Copy, PartialEq, Eq)]
            pub struct Span {
                    pub lo: u32,
                    pub hi: u32,
            }
            impl Span 
            {
                pub fn call_site() -> Self {
                    Span { lo: 0, hi: 0 }
                }
                pub fn mixed_site() -> Self {
                    Span::call_site()
                }
                
                pub fn def_site() -> Self {
                    Span::call_site()
                }
                pub fn resolved_at( &self, _other: Span) -> Span {
                    *self
                }
                pub fn located_at( &self, other: Span) -> Span {
                    other
                }
                pub fn byte_range( &self ) -> Range<usize>
                    {
                    #[cfg(fuzzing)]
                    return 0..0;

                    #[cfg(not(fuzzing))]
                    {
                        if self.is_call_site() {
                            0..0
                        } else {
                            SOURCE_MAP.with(|sm| sm.borrow_mut().fileinfo_mut(*self).byte_range(*self))
                        }
                    }
                }
                pub fn start( &self ) -> LineColumn {
                    #[cfg(fuzzing)]
                    return LineColumn { line: 0, column: 0 };

                    #[cfg(not(fuzzing))]
                    SOURCE_MAP.with(|sm| {
                        let sm = sm.borrow();
                        let fi = sm.fileinfo(*self);
                        fi.offset_line_column(self.lo as usize)
                    })
                }
                pub fn end( &self ) -> LineColumn {
                    #[cfg(fuzzing)]
                    return LineColumn { line: 0, column: 0 };

                    #[cfg(not(fuzzing))]
                    SOURCE_MAP.with(|sm| {
                        let sm = sm.borrow();
                        let fi = sm.fileinfo(*self);
                        fi.offset_line_column(self.hi as usize)
                    })
                }
                pub fn file( &self ) -> String {
                    #[cfg(fuzzing)]
                    return "<unspecified>".to_owned();

                    #[cfg(not(fuzzing))]
                    SOURCE_MAP.with(|sm| {
                        let sm = sm.borrow();
                        sm.filepath(*self)
                    })
                }
                pub fn local_file( &self ) -> Option<PathBuf>
                    {
                    None
                }
                pub fn join( &self, other: Span) -> Option<Span>
                    {
                    #[cfg(fuzzing)]
                    return {
                        let _ = other;
                        None
                    };

                    #[cfg(not(fuzzing))]
                    SOURCE_MAP.with(|sm| {
                        let sm = sm.borrow();
                       
                        if !sm.fileinfo(*self).span_within(other) {
                            return None;
                        }
                        Some(Span {
                            lo: cmp::min(self.lo, other.lo),
                            hi: cmp::max(self.hi, other.hi),
                        })
                    })
                }
                
                pub fn source_text( &self ) -> Option<String>
                    {
                    #[cfg(fuzzing)]
                    return None;

                    #[cfg(not(fuzzing))]
                    {
                        if self.is_call_site() {
                            None
                        } else {
                            Some(SOURCE_MAP.with(|sm| sm.borrow_mut().fileinfo_mut(*self).source_text(*self)))
                        }
                    }
                }
                
                pub fn first_byte( self ) -> Self {
                    Span {
                        lo: self.lo,
                        hi: cmp::min(self.lo.saturating_add(1), self.hi),
                    }
                }
                pub fn last_byte( self ) -> Self {
                    Span {
                        lo: cmp::max(self.hi.saturating_sub(1), self.lo),
                        hi: self.hi,
                    }
                }
                
                fn is_call_site( &self ) -> bool
        {
                    self.lo == 0 && self.hi == 0
                }
            }
            impl Debug for Span
            {
                fn fmt( &self, f: &mut fmt::Formatter) -> fmt::Result
                {            return write!(f, "bytes({}..{})", self.lo, self.hi);

                }
            }
            pub fn debug_span_field_if_nontrivial(debug: &mut fmt::DebugStruct, span: Span) {
                    {
                    if span.is_call_site() {
                        return;
                    }
                }
                if cfg!(span_locations) {
                    debug.field("span", &span);
                }
            }
            #[derive(Clone)]
            pub struct Group {
                delimiter: Delimiter,
                stream: TokenStream,
                span: Span,
            }
            impl Group
            {
                pub fn new(delimiter: Delimiter, stream: TokenStream) -> Self {
                    Group {
                        delimiter,
                        stream,
                        span: Span::call_site(),
                    }
                }
                pub fn delimiter( &self ) -> Delimiter {
                    self.delimiter
                }
                pub fn stream( &self ) -> TokenStream {
                    self.stream.clone()
                }
                pub fn span( &self ) -> Span {
                    self.span
                }
                pub fn span_open( &self ) -> Span {
                    self.span.first_byte()
                }
                pub fn span_close( &self ) -> Span {
                    self.span.last_byte()
                }
                pub fn set_span(&mut self, span: Span) {
                    self.span = span;
                }
            }
            impl Display for Group 
            {
               
               
               
               
               
               
               
                fn fmt( &self, f: &mut fmt::Formatter) -> fmt::Result
                {
                    let (open, close) = match self.delimiter {
                        Delimiter::Parenthesis => ("(", ")"),
                        Delimiter::Brace => ("{ ", "}"),
                        Delimiter::Bracket => ("[", "]"),
                        Delimiter::None => ("", ""),
                    };

                    f.write_str(open)?;
                    Display::fmt(&self.stream, f)?;
                    /*
                    if self.delimiter == Delimiter::Brace && !self.stream.inner.is_empty() {
                        f.write_str(" ")?;
                    } */
                    f.write_str(close)?;

                    Ok(())
                }
            }
            impl Debug for Group
            {
                fn fmt( &self, fmt: &mut fmt::Formatter) -> fmt::Result
                {
                    let mut debug = fmt.debug_struct("Group");
                    debug.field("delimiter", &self.delimiter);
                    debug.field("stream", &self.stream);
                    debug_span_field_if_nontrivial(&mut debug, self.span);
                    debug.finish()
                }
            }
            #[derive(Clone)]
            pub struct Ident 
            {
                sym: Box<str>,
                span: Span,
                raw: bool,
            }
            impl Ident 
            {
                #[track_caller]
                pub fn new_checked(string: &str, span: Span) -> Self {
                    validate_ident(string);
                    Ident::new_unchecked(string, span)
                }
                pub fn new_unchecked(string: &str, span: Span) -> Self {
                    Ident {
                        sym: Box::from(string),
                        span,
                        raw: false,
                    }
                }
                #[track_caller]
                pub fn new_raw_checked(string: &str, span: Span) -> Self {
                    validate_ident_raw(string);
                    Ident::new_raw_unchecked(string, span)
                }
                pub fn new_raw_unchecked(string: &str, span: Span) -> Self {
                    Ident {
                        sym: Box::from(string),
                        span,
                        raw: true,
                    }
                }
                pub fn span( &self ) -> Span {
                    self.span
                }
                pub fn set_span(&mut self, span: Span) {
                    self.span = span;
                }
            }
            #[track_caller] fn validate_ident(string: &str) {
                if string.is_empty() {
                    panic!("Ident is not allowed to be empty; use Option<Ident>");
                }
                if string.bytes().all(|digit| b'0' <= digit && digit <= b'9') {
                    panic!("Ident cannot be a number; use Literal instead");
                }
                fn ident_ok(string: &str) -> bool
                {
                    let mut chars = string.chars();
                    let first = chars.next().unwrap();
                    if !::is::ident_start(first) {
                        return false;
                    }
                    for ch in chars {
                        if !::is::ident_continue(ch) {
                            return false;
                        }
                    }
                    true
                }
                if !ident_ok(string) {
                    panic!("{:?} is not a valid Ident", string);
                }
            }
            #[track_caller] fn validate_ident_raw(string: &str) {
                validate_ident(string);

                match string {
                    "_" | "super" | "self" | "Self" | "crate" =>
                    {
                        panic!("`r#{}` cannot be a raw identifier", string);
                    }
                    _ =>
                    {}
                }
            }
            impl PartialEq for Ident
            {
                fn eq( &self, other: &Ident) -> bool
        {
                    self.sym == other.sym && self.raw == other.raw
                }
            }
            
            impl<T> PartialEq<T> for Ident where
            T: ?Sized + AsRef<str>
            {
                fn eq( &self, other: &T) -> bool
                {
                    let other = other.as_ref();
                    if self.raw {
                        other.starts_with("r#") && *self.sym == other[2..]
                    } else {
                        *self.sym == *other
                    }
                }
            }
            impl Display for Ident
            {
                fn fmt( &self, f: &mut fmt::Formatter) -> fmt::Result
                {    if self.raw {
                        f.write_str("r#")?;
                    }
                    Display::fmt(&self.sym, f)
                }
            }
            
            impl Debug for Ident
            {
                fn fmt( &self, f: &mut fmt::Formatter) -> fmt::Result
               
                {
                    let mut debug = f.debug_struct("Ident");
                    debug.field("sym", &format_args!("{}", self));
                    debug_span_field_if_nontrivial(&mut debug, self.span);
                    debug.finish()
                }
            }
            #[derive(Clone)]
            pub struct Literal {
                pub repr: String,
                span: Span,
            }
            impl Literal
            {
                pub fn _new(repr: String) -> Self {
                    Literal {
                        repr,
                        span: Span::call_site(),
                    }
                }
                pub fn from_str_checked(repr: &str) -> Result<Self, LexError>
                {
                    let mut cursor = get_cursor(repr);
                            let lo = cursor.off;

                    let negative = cursor.starts_with_char('-');
                    if negative {
                        cursor = cursor.advance(1);
                        if !cursor.starts_with_fn(|ch| ch.is_ascii_digit()) {
                            return Err(LexError::call_site());
                        }
                    }
                    if let Ok((rest, mut literal)) = parse::literal(cursor) {
                        if rest.is_empty() {
                            if negative {
                                literal.repr.insert(0, '-');
                            }
                            literal.span = Span {
                                                    lo,
                                                    hi: rest.off,
                            };
                            return Ok(literal);
                        }
                    }
                    Err(LexError::call_site())
                }
                pub unsafe fn from_str_unchecked(repr: &str) -> Self {
                    Literal::_new(repr.to_owned())
                }
                suffixed_numbers! {
                    u8_suffixed => u8,
                    u16_suffixed => u16,
                    u32_suffixed => u32,
                    u64_suffixed => u64,
                    u128_suffixed => u128,
                    usize_suffixed => usize,
                    i8_suffixed => i8,
                    i16_suffixed => i16,
                    i32_suffixed => i32,
                    i64_suffixed => i64,
                    i128_suffixed => i128,
                    isize_suffixed => isize,

                    f32_suffixed => f32,
                    f64_suffixed => f64,
                }
                unsuffixed_numbers! {
                    u8_unsuffixed => u8,
                    u16_unsuffixed => u16,
                    u32_unsuffixed => u32,
                    u64_unsuffixed => u64,
                    u128_unsuffixed => u128,
                    usize_unsuffixed => usize,
                    i8_unsuffixed => i8,
                    i16_unsuffixed => i16,
                    i32_unsuffixed => i32,
                    i64_unsuffixed => i64,
                    i128_unsuffixed => i128,
                    isize_unsuffixed => isize,
                }
                pub fn f32_unsuffixed(f: f32) -> Literal
                {
                    let mut s = f.to_string();
                    if !s.contains('.') {
                        s.push_str(".0");
                    }
                    Literal::_new(s)
                }
                pub fn f64_unsuffixed(f: f64) -> Literal
                {
                    let mut s = f.to_string();
                    if !s.contains('.') {
                        s.push_str(".0");
                    }
                    Literal::_new(s)
                }
                pub fn string(string: &str) -> Literal
                {
                    let mut repr = String::with_capacity(string.len() + 2);
                    repr.push('"');
                    escape_utf8(string, &mut repr);
                    repr.push('"');
                    Literal::_new(repr)
                }
                pub fn character(ch: char) -> Literal
                {
                    let mut repr = String::new();
                    repr.push('\'');
                    if ch == '"' {
                       
                        repr.push(ch);
                    } else {
                        repr.extend(ch.escape_debug());
                    }
                    repr.push('\'');
                    Literal::_new(repr)
                }
                pub fn byte_character(byte: u8) -> Literal
                {
                    let mut repr = "b'".to_string();
                    #[allow(clippy::match_overlapping_arm)]
                    match byte {
                        b'\0' => repr.push_str(r"\0"),
                        b'\t' => repr.push_str(r"\t"),
                        b'\n' => repr.push_str(r"\n"),
                        b'\r' => repr.push_str(r"\r"),
                        b'\'' => repr.push_str(r"\'"),
                        b'\\' => repr.push_str(r"\\"),
                        b'\x20'..=b'\x7E' => repr.push(byte as char),
                        _ =>
                    {
                            let _ = write!(repr, r"\x{:02X}", byte);
                        }
                    }
                    repr.push('\'');
                    Literal::_new(repr)
                }
                pub fn byte_string(bytes: &[u8]) -> Literal
                {
                    let mut repr = "b\"".to_string();
                    let mut bytes = bytes.iter();
                    while let Some(&b) = bytes.next() {
                        #[allow(clippy::match_overlapping_arm)]
                        match b {
                            b'\0' => repr.push_str(match bytes.as_slice().first() {
                               
                                Some(b'0'..=b'7') => r"\x00",
                                _ => r"\0",
                            }),
                            b'\t' => repr.push_str(r"\t"),
                            b'\n' => repr.push_str(r"\n"),
                            b'\r' => repr.push_str(r"\r"),
                            b'"' => repr.push_str("\\\""),
                            b'\\' => repr.push_str(r"\\"),
                            b'\x20'..=b'\x7E' => repr.push(b as char),
                            _ =>
                    {
                                let _ = write!(repr, r"\x{:02X}", b);
                            }
                        }
                    }
                    repr.push('"');
                    Literal::_new(repr)
                }
                pub fn c_string(string: &CStr) -> Literal
                {
                    let mut repr = "c\"".to_string();
                    let mut bytes = string.to_bytes();
                    while !bytes.is_empty() {
                        let (valid, invalid) = match str::from_utf8(bytes) {
                            Ok(all_valid) =>
                    {
                                bytes = b"";
                                (all_valid, bytes)
                            }
                            Err(utf8_error) =>
                    {
                                let (valid, rest) = bytes.split_at(utf8_error.valid_up_to());
                                let valid = str::from_utf8(valid).unwrap();
                                let invalid = utf8_error
                                    .error_len()
                                    .map_or(rest, |error_len| &rest[..error_len]);
                                bytes = &bytes[valid.len() + invalid.len()..];
                                (valid, invalid)
                            }
                        };
                        escape_utf8(valid, &mut repr);
                        for &byte in invalid {
                            let _ = write!(repr, r"\x{:02X}", byte);
                        }
                    }
                    repr.push('"');
                    Literal::_new(repr)
                }
                pub fn span( &self ) -> Span {
                    self.span
                }
                pub fn set_span(&mut self, span: Span) {
                    self.span = span;
                }
                pub fn subspan<R: RangeBounds<usize>>( &self, range: R) -> Option<Span> 
                {
                    use ::ops::Bound;

                    let lo = match range.start_bound() {
                        Bound::Included(start) =>
                    {
                            let start = u32::try_from(*start).ok()?;
                            self.span.lo.checked_add(start)?
                        }
                        Bound::Excluded(start) =>
                    {
                            let start = u32::try_from(*start).ok()?;
                            self.span.lo.checked_add(start)?.checked_add(1)?
                        }
                        Bound::Unbounded => self.span.lo,
                    };
                    let hi = match range.end_bound() {
                        Bound::Included(end) =>
                    {
                            let end = u32::try_from(*end).ok()?;
                            self.span.lo.checked_add(end)?.checked_add(1)?
                        }
                        Bound::Excluded(end) =>
                    {
                            let end = u32::try_from(*end).ok()?;
                            self.span.lo.checked_add(end)?
                        }
                        Bound::Unbounded => self.span.hi,
                    };
                    if lo <= hi && hi <= self.span.hi {
                        Some(Span { lo, hi })
                    } else {
                        None
                    }
                }
            }
            impl Display for Literal
            {
                fn fmt( &self, f: &mut fmt::Formatter) -> fmt::Result
                {    Display::fmt(&self.repr, f)
                }
            }
            impl Debug for Literal
            {
                fn fmt( &self, fmt: &mut fmt::Formatter) -> fmt::Result
                {
                    let mut debug = fmt.debug_struct("Literal");
                    debug.field("lit", &format_args!("{}", self.repr));
                    debug_span_field_if_nontrivial(&mut debug, self.span);
                    debug.finish()
                }
            }
            
            pub trait FromStr2: FromStr<Err = proc_macro::LexError>
            {
                    fn valid(src: &str) -> bool;

                    fn from_str_checked(src: &str) -> Result<Self, imp::LexError>
                    {
                   
                   
                   
                    if !Self::valid(src) {
                        return Err(imp::LexError::CompilerPanic);
                    }
                   
                    match panic::catch_unwind(|| Self::from_str(src)) {
                        Ok(Ok(ok)) => Ok(ok),
                        Ok(Err(lex)) => Err(imp::LexError::Compiler(lex)),
                        Err(_panic) => Err(imp::LexError::CompilerPanic),
                    }
                }
                fn from_str_unchecked(src: &str) -> Self {
                    Self::from_str(src).unwrap()
                }
            }
            
            impl FromStr2 for proc_macro::TokenStream
            {
                fn valid(src: &str) -> bool 
                {
                    TokenStream::from_str_checked(src).is_ok()
                }
            }
            
            impl FromStr2 for proc_macro::Literal
            {
                fn valid(src: &str) -> bool 
                {
                    Literal::from_str_checked(src).is_ok()
                }
            }
            fn escape_utf8(string: &str, repr: &mut String)
            {
                let mut chars = string.chars();
                while let Some(ch) = chars.next() {
                    if ch == '\0' {
                        repr.push_str(
                            if chars
                                .as_str()
                                .starts_with(|next| '0' <= next && next <= '7')
                            {
                               
                                r"\x00"
                            } else {
                                r"\0"
                            },
                        );
                    } else if ch == '\'' {
                       
                        repr.push(ch);
                    } else {
                        repr.extend(ch.escape_debug());
                    }
                }
            }
        }
           
        pub mod imp
        {
            use ::
            {
                ffi::{ CStr },
                fmt::{ self, Debug, Display },
                ops::{ Range, RangeBounds },
                path::{ PathBuf },
                process::
                {
                    macros::
                    {
                        detection::inside_proc_macro,
                        fallback::{self, FromStr2 as _},
                        location::LineColumn,
                        probe::{ proc_macro_span, proc_macro_span_file, proc_macro_span_location },
                        Delimiter, Punct, Spacing, TokenTree,                        
                    },
                },
                *,
            };
            /*
            */
            #[derive(Clone)]
            pub enum TokenStream 
            {
                Compiler(DeferredTokenStream),
                Fallback(fallback::TokenStream),
            }
            #[derive(Clone)]
            pub struct DeferredTokenStream 
            {
                stream: proc_macro::TokenStream,
                extra: Vec<proc_macro::TokenTree>,
            }
            pub enum LexError
            {
                Compiler(proc_macro::LexError),
                Fallback(fallback::LexError),
                CompilerPanic,
            }
            #[cold] fn mismatch(line: u32) -> !
            {
                let backtrace = ::backtrace::Backtrace::force_capture();
                panic!("compiler/fallback mismatch L{}\n\n{}", line, backtrace)
            }
            impl DeferredTokenStream           
            {
                fn new(stream: proc_macro::TokenStream) -> Self
                {
                    DeferredTokenStream
                    {
                        stream,
                        extra: Vec::new(),
                    }
                }
                fn is_empty( &self ) -> bool { self.stream.is_empty() && self.extra.is_empty() }
                fn evaluate_now( &mut self )
                {
                    if !self.extra.is_empty() { self.stream.extend(self.extra.drain(..)); }
                }
                fn into_token_stream(mut self) -> proc_macro::TokenStream
                {
                    self.evaluate_now();
                    self.stream
                }
            }
            impl TokenStream           
            {
                pub fn new() -> Self
                {
                    if inside_proc_macro() {
                        TokenStream::Compiler(DeferredTokenStream::new(proc_macro::TokenStream::new()))
                    } else {
                        TokenStream::Fallback(fallback::TokenStream::new())
                    }
                }
                pub fn from_str_checked(src: &str) -> Result<Self, LexError>
                    {
                    if inside_proc_macro() {
                        Ok(TokenStream::Compiler(DeferredTokenStream::new(
                            proc_macro::TokenStream::from_str_checked(src)?,
                        )))
                    } else {
                        Ok(TokenStream::Fallback(
                            fallback::TokenStream::from_str_checked(src)?,
                        ))
                    }
                }
                pub fn is_empty( &self ) -> bool
                {
                    match self {
                        TokenStream::Compiler(tts) => tts.is_empty(),
                        TokenStream::Fallback(tts) => tts.is_empty(),
                    }
                }
                fn unwrap_nightly( self ) -> proc_macro::TokenStream
                {
                    match self {
                        TokenStream::Compiler(s) => s.into_token_stream(),
                        TokenStream::Fallback(_) => mismatch(line!()),
                    }
                }
                fn unwrap_stable( self ) -> fallback::TokenStream           
                {
                    match self {
                        TokenStream::Compiler(_) => mismatch(line!()),
                        TokenStream::Fallback(s) => s,
                    }
                }
            }
            impl Display for TokenStream                  
            {
                fn fmt( &self, f: &mut fmt::Formatter) -> fmt::Result
                {
                    match self {
                        TokenStream::Compiler(tts) => Display::fmt(&tts.clone().into_token_stream(), f),
                        TokenStream::Fallback(tts) => Display::fmt(tts, f),
                    }
                }
            }
            impl From<proc_macro::TokenStream> for TokenStream           
            {
                fn from(inner: proc_macro::TokenStream) -> Self
                {
                    TokenStream::Compiler(DeferredTokenStream::new(inner))
                }
            }
            impl From<TokenStream> for proc_macro::TokenStream           
            {
                fn from(inner: TokenStream) -> Self
                {
                    match inner {
                        TokenStream::Compiler(inner) => inner.into_token_stream(),
                        TokenStream::Fallback(inner) =>
                    {
                            proc_macro::TokenStream::from_str_unchecked(&inner.to_string())
                        }
                    }
                }
            }
            impl From<fallback::TokenStream> for TokenStream           
            {
                fn from(inner: fallback::TokenStream) -> Self
                {
                    TokenStream::Fallback(inner)
                }
            }
            
            fn into_compiler_token(token: TokenTree) -> proc_macro::TokenTree
            {
                match token {
                    TokenTree::Group(tt) => proc_macro::TokenTree::Group(tt.inner.unwrap_nightly()),
                    TokenTree::Punct(tt) =>
                    {
                        let spacing = match tt.spacing() {
                            Spacing::Joint => proc_macro::Spacing::Joint,
                            Spacing::Alone => proc_macro::Spacing::Alone,
                        };
                        let mut punct = proc_macro::Punct::new(tt.as_char(), spacing);
                        punct.set_span(tt.span().inner.unwrap_nightly());
                        proc_macro::TokenTree::Punct(punct)
                    }
                    TokenTree::Ident(tt) => proc_macro::TokenTree::Ident(tt.inner.unwrap_nightly()),
                    TokenTree::Literal(tt) => proc_macro::TokenTree::Literal(tt.inner.unwrap_nightly()),
                }
            }
            impl From<TokenTree> for TokenStream           
            {
                fn from(token: TokenTree) -> Self
                {
                    if inside_proc_macro() {
                        TokenStream::Compiler(DeferredTokenStream::new(proc_macro::TokenStream::from(
                            into_compiler_token(token),
                        )))
                    } else {
                        TokenStream::Fallback(fallback::TokenStream::from(token))
                    }
                }
            }
            impl iter::FromIterator<TokenTree> for TokenStream           
            {
                fn from_iter<I: IntoIterator<Item = TokenTree>>(trees: I) -> Self
                {
                    if inside_proc_macro() {
                        TokenStream::Compiler(DeferredTokenStream::new(
                            trees.into_iter().map(into_compiler_token).collect(),
                        ))
                    } else {
                        TokenStream::Fallback(trees.into_iter().collect())
                    }
                }
            }
            impl iter::FromIterator<TokenStream> for TokenStream
            {
                fn from_iter<I: IntoIterator<Item = TokenStream>>(streams: I) -> Self
               
                {
                    let mut streams = streams.into_iter();
                    match streams.next() {
                        Some(TokenStream::Compiler(mut first)) =>
                    {
                            first.evaluate_now();
                            first.stream.extend(streams.map(|s| match s {
                                TokenStream::Compiler(s) => s.into_token_stream(),
                                TokenStream::Fallback(_) => mismatch(line!()),
                            }));
                            TokenStream::Compiler(first)
                        }
                        Some(TokenStream::Fallback(mut first)) =>
                    {
                            first.extend(streams.map(|s| match s {
                                TokenStream::Fallback(s) => s,
                                TokenStream::Compiler(_) => mismatch(line!()),
                            }));
                            TokenStream::Fallback(first)
                        }
                        None => TokenStream::new(),
                    }
                }
            }
            impl Extend<TokenTree> for TokenStream           
            {
                fn extend<I: IntoIterator<Item = TokenTree>>(&mut self, stream: I)
                {
                    match self {
                        TokenStream::Compiler(tts) =>
                    {
                           
                            for token in stream {
                                tts.extra.push(into_compiler_token(token));
                            }
                        }
                        TokenStream::Fallback(tts) => tts.extend(stream),
                    }
                }
            }
            impl Extend<TokenStream> for TokenStream           
            {
                fn extend<I: IntoIterator<Item = TokenStream>>(&mut self, streams: I)
                {
                    match self {
                        TokenStream::Compiler(tts) =>
                    {
                            tts.evaluate_now();
                            tts.stream
                                .extend(streams.into_iter().map(TokenStream::unwrap_nightly));
                        }
                        TokenStream::Fallback(tts) =>
                    {
                            tts.extend(streams.into_iter().map(TokenStream::unwrap_stable));
                        }
                    }
                }
            }
            impl Debug for TokenStream           
            {
                fn fmt( &self, f: &mut fmt::Formatter) -> fmt::Result
                {
                    match self {
                        TokenStream::Compiler(tts) => Debug::fmt(&tts.clone().into_token_stream(), f),
                        TokenStream::Fallback(tts) => Debug::fmt(tts, f),
                    }
                }
            }
            impl LexError
            {
                pub fn span( &self ) -> Span
                {
                    match self {
                        LexError::Compiler(_) | LexError::CompilerPanic => Span::call_site(),
                        LexError::Fallback(e) => Span::Fallback(e.span()),
                    }
                }
            }
            impl From<proc_macro::LexError> for LexError           
            {
                fn from(e: proc_macro::LexError) -> Self
                {
                    LexError::Compiler(e)
                }
            }
            impl From<fallback::LexError> for LexError           
            {
                fn from(e: fallback::LexError) -> Self
                {
                    LexError::Fallback(e)
                }
            }
            impl Debug for LexError           
            {
                fn fmt( &self, f: &mut fmt::Formatter) -> fmt::Result
                {
                    match self {
                        LexError::Compiler(e) => Debug::fmt(e, f),
                        LexError::Fallback(e) => Debug::fmt(e, f),
                        LexError::CompilerPanic =>
                    {
                            let fallback = fallback::LexError::call_site();
                            Debug::fmt(&fallback, f)
                        }
                    }
                }
            }
            impl Display for LexError           
            {
                fn fmt( &self, f: &mut fmt::Formatter) -> fmt::Result
                {
                    match self {
                        LexError::Compiler(e) => Display::fmt(e, f),
                        LexError::Fallback(e) => Display::fmt(e, f),
                        LexError::CompilerPanic =>
                    {
                            let fallback = fallback::LexError::call_site();
                            Display::fmt(&fallback, f)
                        }
                    }
                }
            }
            #[derive(Clone)]
            pub enum TokenTreeIter 
            {
                Compiler(proc_macro::token_stream::IntoIter),
                Fallback(fallback::TokenTreeIter),
            }
            impl IntoIterator for TokenStream
            {
                type Item = TokenTree;
                type IntoIter = TokenTreeIter;
                fn into_iter( self ) -> TokenTreeIter
                {
                    match self {
                        TokenStream::Compiler(tts) =>
                    {
                            TokenTreeIter::Compiler(tts.into_token_stream().into_iter())
                        }
                        TokenStream::Fallback(tts) => TokenTreeIter::Fallback(tts.into_iter()),
                    }
                }
            }
            impl Iterator for TokenTreeIter
            {
                type Item = TokenTree;
                fn next( &mut self ) -> Option<TokenTree>
                {
                    let token = match self {
                        TokenTreeIter::Compiler(iter) => iter.next()?,
                        TokenTreeIter::Fallback(iter) => return iter.next(),
                    };
                    Some(match token {
                        proc_macro::TokenTree::Group(tt) =>
                    {
                            TokenTree::Group(::process::macros::Group::_new(Group::Compiler(tt)))
                        }
                        proc_macro::TokenTree::Punct(tt) =>
                    {
                            let spacing = match tt.spacing() {
                                proc_macro::Spacing::Joint => Spacing::Joint,
                                proc_macro::Spacing::Alone => Spacing::Alone,
                            };
                            let mut o = Punct::new(tt.as_char(), spacing);
                            o.set_span(::process::macros::Span::_new(Span::Compiler(tt.span())));
                            TokenTree::Punct(o)
                        }
                        proc_macro::TokenTree::Ident(s) =>
                    {
                            TokenTree::Ident(::process::macros::Ident::_new(Ident::Compiler(s)))
                        }
                        proc_macro::TokenTree::Literal(l) =>
                    {
                            TokenTree::Literal(::process::macros::Literal::_new(Literal::Compiler(l)))
                        }
                    })
                }
                fn size_hint( &self ) -> (usize, Option<usize>)
                {
                    match self {
                        TokenTreeIter::Compiler(tts) => tts.size_hint(),
                        TokenTreeIter::Fallback(tts) => tts.size_hint(),
                    }
                }
            }
            #[derive(Copy, Clone)]
            pub enum Span
            {
                Compiler(proc_macro::Span),
                Fallback(fallback::Span),
            }
            impl Span           
            {
                pub fn call_site() -> Self
                {
                    if inside_proc_macro() {
                        Span::Compiler(proc_macro::Span::call_site())
                    } else {
                        Span::Fallback(fallback::Span::call_site())
                    }
                }
                pub fn mixed_site() -> Self
                {
                    if inside_proc_macro() {
                        Span::Compiler(proc_macro::Span::mixed_site())
                    } else {
                        Span::Fallback(fallback::Span::mixed_site())
                    }
                }
                
                pub fn def_site() -> Self
                {
                    Span::Fallback(fallback::Span::def_site())
                    /*
                    if inside_proc_macro() {
                        Span::Compiler(proc_macro::Span::def_site())
                    } else {
                        Span::Fallback(fallback::Span::def_site())
                    } */
                }
                pub fn resolved_at( &self, other: Span) -> Span 
                {
                    match (self, other) {
                        (Span::Compiler(a), Span::Compiler(b)) => Span::Compiler(a.resolved_at(b)),
                        (Span::Fallback(a), Span::Fallback(b)) => Span::Fallback(a.resolved_at(b)),
                        (Span::Compiler(_), Span::Fallback(_)) => mismatch(line!()),
                        (Span::Fallback(_), Span::Compiler(_)) => mismatch(line!()),
                    }
                }
                pub fn located_at( &self, other: Span) -> Span 
                {
                    match (self, other) {
                        (Span::Compiler(a), Span::Compiler(b)) => Span::Compiler(a.located_at(b)),
                        (Span::Fallback(a), Span::Fallback(b)) => Span::Fallback(a.located_at(b)),
                        (Span::Compiler(_), Span::Fallback(_)) => mismatch(line!()),
                        (Span::Fallback(_), Span::Compiler(_)) => mismatch(line!()),
                    }
                }
                pub fn unwrap( self ) -> proc_macro::Span
                {
                    match self {
                        Span::Compiler(s) => s,
                        Span::Fallback(_) => panic!("proc_macro::Span is only available in procedural macros"),
                    }
                }
                pub fn byte_range( &self ) -> Range<usize>
                {
                    match self {
                        #[cfg(proc_macro_span)]
                        Span::Compiler(s) => proc_macro_span::byte_range(s),
                        #[cfg(not(proc_macro_span))]
                        Span::Compiler(_) => 0..0,
                        Span::Fallback(s) => s.byte_range(),
                    }
                }
                pub fn start( &self ) -> LineColumn
                {
                    match self {
                        #[cfg(proc_macro_span_location)]
                        Span::Compiler(s) => LineColumn {
                            line: proc_macro_span_location::line(s),
                            column: proc_macro_span_location::column(s).saturating_sub(1),
                        },
                        #[cfg(not(proc_macro_span_location))]
                        Span::Compiler(_) => LineColumn { line: 0, column: 0 },
                        Span::Fallback(s) => s.start(),
                    }
                }
                pub fn end( &self ) -> LineColumn
                {
                    match self {
                        #[cfg(proc_macro_span_location)]
                        Span::Compiler(s) =>
                    {
                            let end = proc_macro_span_location::end(s);
                            LineColumn {
                                line: proc_macro_span_location::line(&end),
                                column: proc_macro_span_location::column(&end).saturating_sub(1),
                            }
                        }
                        #[cfg(not(proc_macro_span_location))]
                        Span::Compiler(_) => LineColumn { line: 0, column: 0 },
                        Span::Fallback(s) => s.end(),
                    }
                }
                pub fn file( &self ) -> String
                {
                    match self {
                        #[cfg(proc_macro_span_file)]
                        Span::Compiler(s) => proc_macro_span_file::file(s),
                        #[cfg(not(proc_macro_span_file))]
                        Span::Compiler(_) => "<token stream>".to_owned(),
                        Span::Fallback(s) => s.file(),
                    }
                }
                pub fn local_file( &self ) -> Option<PathBuf>
                {
                    match self {
                        #[cfg(proc_macro_span_file)]
                        Span::Compiler(s) => proc_macro_span_file::local_file(s),
                        #[cfg(not(proc_macro_span_file))]
                        Span::Compiler(_) => None,
                        Span::Fallback(s) => s.local_file(),
                    }
                }
                pub fn join( &self, other: Span) -> Option<Span> 
               
                {
                    let ret = match (self, other) {
                        #[cfg(proc_macro_span)]
                        (Span::Compiler(a), Span::Compiler(b)) => Span::Compiler(proc_macro_span::join(a, b)?),
                        (Span::Fallback(a), Span::Fallback(b)) => Span::Fallback(a.join(b)?),
                        _ => return None,
                    };
                    Some(ret)
                }
                
                pub fn eq( &self, other: &Span) -> bool 
                {
                    match (self, other)
                    {
                        //(Span::Compiler(a), Span::Compiler(b)) => a.eq(b),
                        (Span::Fallback(a), Span::Fallback(b)) => a.eq(b),
                        _ => false,
                    }
                }
                pub fn source_text( &self ) -> Option<String>
                {
                    match self {
                        #[cfg(not(no_source_text))]
                        Span::Compiler(s) => s.source_text(),
                        #[cfg(no_source_text)]
                        Span::Compiler(_) => None,
                        Span::Fallback(s) => s.source_text(),
                    }
                }
                fn unwrap_nightly( self ) -> proc_macro::Span
                {
                    match self {
                        Span::Compiler(s) => s,
                        Span::Fallback(_) => mismatch(line!()),
                    }
                }
            }
            impl From<proc_macro::Span> for ::process::macros::Span           
            {
                fn from(proc_span: proc_macro::Span) -> Self
                {
                    ::process::macros::Span::_new(Span::Compiler(proc_span))
                }
            }
            impl From<fallback::Span> for Span           
            {
                fn from(inner: fallback::Span) -> Self
                {
                    Span::Fallback(inner)
                }
            }
            impl Debug for Span           
            {
                fn fmt( &self, f: &mut fmt::Formatter) -> fmt::Result
                {
                    match self {
                        Span::Compiler(s) => Debug::fmt(s, f),
                        Span::Fallback(s) => Debug::fmt(s, f),
                    }
                }
            }
            pub fn debug_span_field_if_nontrivial(debug: &mut fmt::DebugStruct, span: Span)
            {
                match span {
                    Span::Compiler(s) =>
                    {
                        debug.field("span", &s);
                    }
                    Span::Fallback(s) => fallback::debug_span_field_if_nontrivial(debug, s),
                }
            }
            #[derive(Clone)]
            pub enum Group
            {
                Compiler(proc_macro::Group),
                Fallback(fallback::Group),
            }
            impl Group           
            {
                pub fn new(delimiter: Delimiter, stream: TokenStream) -> Self
                {
                    match stream {
                        TokenStream::Compiler(tts) =>
                    {
                            let delimiter = match delimiter {
                                Delimiter::Parenthesis => proc_macro::Delimiter::Parenthesis,
                                Delimiter::Bracket => proc_macro::Delimiter::Bracket,
                                Delimiter::Brace => proc_macro::Delimiter::Brace,
                                Delimiter::None => proc_macro::Delimiter::None,
                            };
                            Group::Compiler(proc_macro::Group::new(delimiter, tts.into_token_stream()))
                        }
                        TokenStream::Fallback(stream) =>
                    {
                            Group::Fallback(fallback::Group::new(delimiter, stream))
                        }
                    }
                }
                pub fn delimiter( &self ) -> Delimiter
                {
                    match self {
                        Group::Compiler(g) => match g.delimiter() {
                            proc_macro::Delimiter::Parenthesis => Delimiter::Parenthesis,
                            proc_macro::Delimiter::Bracket => Delimiter::Bracket,
                            proc_macro::Delimiter::Brace => Delimiter::Brace,
                            proc_macro::Delimiter::None => Delimiter::None,
                        },
                        Group::Fallback(g) => g.delimiter(),
                    }
                }
                pub fn stream( &self ) -> TokenStream
                {
                    match self {
                        Group::Compiler(g) => TokenStream::Compiler(DeferredTokenStream::new(g.stream())),
                        Group::Fallback(g) => TokenStream::Fallback(g.stream()),
                    }
                }
                pub fn span( &self ) -> Span
                {
                    match self {
                        Group::Compiler(g) => Span::Compiler(g.span()),
                        Group::Fallback(g) => Span::Fallback(g.span()),
                    }
                }
                pub fn span_open( &self ) -> Span
                {
                    match self {
                        Group::Compiler(g) => Span::Compiler(g.span_open()),
                        Group::Fallback(g) => Span::Fallback(g.span_open()),
                    }
                }
                pub fn span_close( &self ) -> Span
                {
                    match self {
                        Group::Compiler(g) => Span::Compiler(g.span_close()),
                        Group::Fallback(g) => Span::Fallback(g.span_close()),
                    }
                }
                pub fn set_span(&mut self, span: Span )
                {
                    match (self, span) {
                        (Group::Compiler(g), Span::Compiler(s)) => g.set_span(s),
                        (Group::Fallback(g), Span::Fallback(s)) => g.set_span(s),
                        (Group::Compiler(_), Span::Fallback(_)) => mismatch(line!()),
                        (Group::Fallback(_), Span::Compiler(_)) => mismatch(line!()),
                    }
                }
                fn unwrap_nightly( self ) -> proc_macro::Group
                {
                    match self {
                        Group::Compiler(g) => g,
                        Group::Fallback(_) => mismatch(line!()),
                    }
                }
            }
            impl From<fallback::Group> for Group           
            {
                fn from(g: fallback::Group) -> Self
                {
                    Group::Fallback(g)
                }
            }
            impl Display for Group           
            {
                fn fmt( &self, formatter: &mut fmt::Formatter) -> fmt::Result
                {
                    match self {
                        Group::Compiler(group) => Display::fmt(group, formatter),
                        Group::Fallback(group) => Display::fmt(group, formatter),
                    }
                }
            }
            impl Debug for Group           
            {
                fn fmt( &self, formatter: &mut fmt::Formatter) -> fmt::Result
                {
                    match self {
                        Group::Compiler(group) => Debug::fmt(group, formatter),
                        Group::Fallback(group) => Debug::fmt(group, formatter),
                    }
                }
            }
            #[derive(Clone)]
            pub enum Ident
            {
                Compiler(proc_macro::Ident),
                Fallback(fallback::Ident),
            }
            impl Ident 
            {
                #[track_caller]
                pub fn new_checked(string: &str, span: Span) -> Self
                {
                    match span {
                        Span::Compiler(s) => Ident::Compiler(proc_macro::Ident::new(string, s)),
                        Span::Fallback(s) => Ident::Fallback(fallback::Ident::new_checked(string, s)),
                    }
                }
                #[track_caller]
                pub fn new_raw_checked(string: &str, span: Span) -> Self
                {
                    match span {
                        Span::Compiler(s) => Ident::Compiler(proc_macro::Ident::new_raw(string, s)),
                        Span::Fallback(s) => Ident::Fallback(fallback::Ident::new_raw_checked(string, s)),
                    }
                }
                pub fn span( &self ) -> Span
                {
                    match self {
                        Ident::Compiler(t) => Span::Compiler(t.span()),
                        Ident::Fallback(t) => Span::Fallback(t.span()),
                    }
                }
                pub fn set_span(&mut self, span: Span )
                {
                    match (self, span) {
                        (Ident::Compiler(t), Span::Compiler(s)) => t.set_span(s),
                        (Ident::Fallback(t), Span::Fallback(s)) => t.set_span(s),
                        (Ident::Compiler(_), Span::Fallback(_)) => mismatch(line!()),
                        (Ident::Fallback(_), Span::Compiler(_)) => mismatch(line!()),
                    }
                }
                fn unwrap_nightly( self ) -> proc_macro::Ident
                {
                    match self {
                        Ident::Compiler(s) => s,
                        Ident::Fallback(_) => mismatch(line!()),
                    }
                }
            }
            impl From<fallback::Ident> for Ident           
            {
                fn from(inner: fallback::Ident) -> Self
                {
                    Ident::Fallback(inner)
                }
            }
            impl PartialEq for Ident           
            {
                fn eq( &self, other: &Ident) -> bool
        {
                    match (self, other) {
                        (Ident::Compiler(t), Ident::Compiler(o)) => t.to_string() == o.to_string(),
                        (Ident::Fallback(t), Ident::Fallback(o)) => t == o,
                        (Ident::Compiler(_), Ident::Fallback(_)) => mismatch(line!()),
                        (Ident::Fallback(_), Ident::Compiler(_)) => mismatch(line!()),
                    }
                }
            }
            
            impl<T> PartialEq<T> for Ident where
            T: ?Sized + AsRef<str>
            {
                fn eq( &self, other: &T) -> bool
                {
                    let other = other.as_ref();
                    match self {
                        Ident::Compiler(t) => t.to_string() == other,
                        Ident::Fallback(t) => t == other,
                    }
                }
            }
            impl Display for Ident           
            {
                fn fmt( &self, f: &mut fmt::Formatter) -> fmt::Result
                {
                    match self {
                        Ident::Compiler(t) => Display::fmt(t, f),
                        Ident::Fallback(t) => Display::fmt(t, f),
                    }
                }
            }
            impl Debug for Ident           
            {
                fn fmt( &self, f: &mut fmt::Formatter) -> fmt::Result
                {
                    match self {
                        Ident::Compiler(t) => Debug::fmt(t, f),
                        Ident::Fallback(t) => Debug::fmt(t, f),
                    }
                }
            }
            #[derive(Clone)]
            pub enum Literal 
            {
                Compiler(proc_macro::Literal),
                Fallback(fallback::Literal),
            }
            macro_rules! suffixed_numbers 
            {
                ($($name:ident => $kind:ident,)*) => ($(
                    pub fn $name(n: $kind) -> Literal {
                        if inside_proc_macro() {
                            Literal::Compiler(proc_macro::Literal::$name(n))
                        } else {
                            Literal::Fallback(fallback::Literal::$name(n))
                        }
                    }
                )*)
            }
            macro_rules! unsuffixed_integers 
            {
                ($($name:ident => $kind:ident,)*) => ($(
                    pub fn $name(n: $kind) -> Literal {
                        if inside_proc_macro() {
                            Literal::Compiler(proc_macro::Literal::$name(n))
                        } else {
                            Literal::Fallback(fallback::Literal::$name(n))
                        }
                    }
                )*)
            }
            impl Literal
            {
                pub fn from_str_checked(repr: &str) -> Result<Self, LexError>
                    {
                    if inside_proc_macro() {
                        let literal = proc_macro::Literal::from_str_checked(repr)?;
                        Ok(Literal::Compiler(literal))
                    } else {
                        let literal = fallback::Literal::from_str_checked(repr)?;
                        Ok(Literal::Fallback(literal))
                    }
                }
                pub unsafe fn from_str_unchecked(repr: &str) -> Self
                {
                    if inside_proc_macro() {
                        Literal::Compiler(proc_macro::Literal::from_str_unchecked(repr))
                    } else {
                        Literal::Fallback(unsafe { fallback::Literal::from_str_unchecked(repr) })
                    }
                }
                suffixed_numbers! {
                    u8_suffixed => u8,
                    u16_suffixed => u16,
                    u32_suffixed => u32,
                    u64_suffixed => u64,
                    u128_suffixed => u128,
                    usize_suffixed => usize,
                    i8_suffixed => i8,
                    i16_suffixed => i16,
                    i32_suffixed => i32,
                    i64_suffixed => i64,
                    i128_suffixed => i128,
                    isize_suffixed => isize,

                    f32_suffixed => f32,
                    f64_suffixed => f64,
                }
                unsuffixed_integers! {
                    u8_unsuffixed => u8,
                    u16_unsuffixed => u16,
                    u32_unsuffixed => u32,
                    u64_unsuffixed => u64,
                    u128_unsuffixed => u128,
                    usize_unsuffixed => usize,
                    i8_unsuffixed => i8,
                    i16_unsuffixed => i16,
                    i32_unsuffixed => i32,
                    i64_unsuffixed => i64,
                    i128_unsuffixed => i128,
                    isize_unsuffixed => isize,
                }
                pub fn f32_unsuffixed(f: f32) -> Literal {
                    if inside_proc_macro() {
                        Literal::Compiler(proc_macro::Literal::f32_unsuffixed(f))
                    } else {
                        Literal::Fallback(fallback::Literal::f32_unsuffixed(f))
                    }
                }
                pub fn f64_unsuffixed(f: f64) -> Literal {
                    if inside_proc_macro() {
                        Literal::Compiler(proc_macro::Literal::f64_unsuffixed(f))
                    } else {
                        Literal::Fallback(fallback::Literal::f64_unsuffixed(f))
                    }
                }
                pub fn string(string: &str) -> Literal {
                    if inside_proc_macro() {
                        Literal::Compiler(proc_macro::Literal::string(string))
                    } else {
                        Literal::Fallback(fallback::Literal::string(string))
                    }
                }
                pub fn character(ch: char) -> Literal {
                    if inside_proc_macro() {
                        Literal::Compiler(proc_macro::Literal::character(ch))
                    } else {
                        Literal::Fallback(fallback::Literal::character(ch))
                    }
                }
                pub fn byte_character(byte: u8) -> Literal {
                    if inside_proc_macro() {
                        Literal::Compiler({
                            #[cfg(not(no_literal_byte_character))]
                            {
                                proc_macro::Literal::byte_character(byte)
                            }
                            #[cfg(no_literal_byte_character)]
                            {
                                let fallback = fallback::Literal::byte_character(byte);
                                proc_macro::Literal::from_str_unchecked(&fallback.repr)
                            }
                        })
                    } else {
                        Literal::Fallback(fallback::Literal::byte_character(byte))
                    }
                }
                pub fn byte_string(bytes: &[u8]) -> Literal {
                    if inside_proc_macro() {
                        Literal::Compiler(proc_macro::Literal::byte_string(bytes))
                    } else {
                        Literal::Fallback(fallback::Literal::byte_string(bytes))
                    }
                }
                pub fn c_string(string: &CStr) -> Literal {
                    if inside_proc_macro() {
                        Literal::Compiler({
                            #[cfg(not(no_literal_c_string))]
                            {
                                proc_macro::Literal::c_string(string)
                            }
                            #[cfg(no_literal_c_string)]
                            {
                                let fallback = fallback::Literal::c_string(string);
                                proc_macro::Literal::from_str_unchecked(&fallback.repr)
                            }
                        })
                    } else {
                        Literal::Fallback(fallback::Literal::c_string(string))
                    }
                }
                pub fn span( &self ) -> Span
                {
                    match self {
                        Literal::Compiler(lit) => Span::Compiler(lit.span()),
                        Literal::Fallback(lit) => Span::Fallback(lit.span()),
                    }
                }
                pub fn set_span(&mut self, span: Span )
                {
                    match (self, span) {
                        (Literal::Compiler(lit), Span::Compiler(s)) => lit.set_span(s),
                        (Literal::Fallback(lit), Span::Fallback(s)) => lit.set_span(s),
                        (Literal::Compiler(_), Span::Fallback(_)) => mismatch(line!()),
                        (Literal::Fallback(_), Span::Compiler(_)) => mismatch(line!()),
                    }
                }
                pub fn subspan<R: RangeBounds<usize>>( &self, range: R) -> Option<Span>
                {
                    match self {
                        #[cfg(proc_macro_span)]
                        Literal::Compiler(lit) => proc_macro_span::subspan(lit, range).map(Span::Compiler),
                        #[cfg(not(proc_macro_span))]
                        Literal::Compiler(_lit) => None,
                        Literal::Fallback(lit) => lit.subspan(range).map(Span::Fallback),
                    }
                }
                fn unwrap_nightly( self ) -> proc_macro::Literal
                {
                    match self {
                        Literal::Compiler(s) => s,
                        Literal::Fallback(_) => mismatch(line!()),
                    }
                }
            }
            impl From<fallback::Literal> for Literal           
            {
                fn from(s: fallback::Literal) -> Self
                {
                    Literal::Fallback(s)
                }
            }
            impl Display for Literal           
            {
                fn fmt( &self, f: &mut fmt::Formatter) -> fmt::Result
                {
                    match self {
                        Literal::Compiler(t) => Display::fmt(t, f),
                        Literal::Fallback(t) => Display::fmt(t, f),
                    }
                }
            }
            impl Debug for Literal           
            {
                fn fmt( &self, f: &mut fmt::Formatter) -> fmt::Result
                {
                    match self {
                        Literal::Compiler(t) => Debug::fmt(t, f),
                        Literal::Fallback(t) => Debug::fmt(t, f),
                    }
                }
            }
            
            pub fn invalidate_current_thread_spans()
            {
                if inside_proc_macro()
                {
                    panic!
                    (
                        "process::macros::extra::invalidate_current_thread_spans is not available in procedural macros"
                    );
                }
                
                else
                {
                    ::process::macros::fallback::invalidate_current_thread_spans();
                }
            }
        }
        
        pub mod location
        {
            use ::
            {
                cmp::{ Ordering },
                *,
            };
            /*
            */
            /// A line-column pair representing the start or end of a `Span`.
            #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash)]
            pub struct LineColumn 
            {
                /// The 1-indexed line in the source file on which the span starts or ends (inclusive).
                pub line: usize,
                /// The 0-indexed column (in UT8) in the source file on which the span starts or ends (inclusive).
                pub column: usize,
            }
            impl Ord for LineColumn
            {
                fn cmp( &self, other: &Self) -> Ordering
                {
                    self.line
                    .cmp(&other.line)
                    .then(self.column.cmp(&other.column))
                }
            }
            impl PartialOrd for LineColumn
            {
                fn partial_cmp( &self, other: &Self) -> Option<Ordering>
                {
                    Some(self.cmp(other))
                }
            }
        }
        /**
        A wrapper around the procedural macro API of the compiler's [`proc_macro`] crate.*/
        pub mod parse
        {
            use ::
            {
                process::
                {
                    macros::
                    {
                        fallback::
                        {
                            self, Group, Ident, LexError, Literal, Span, TokenStream, TokenStreamBuilder,
                        },
                        Delimiter, Punct, Spacing, TokenTree,
                    },
                },
                str::{ Bytes, CharIndices, Chars },
                *,
            };
            /*
            */
            /// Rustc's representation of a macro expansion error in expression position or type position.
            pub const ERROR: &str = "(/*ERROR*/)";

            pub type PResult<'a, O> = Result<(Cursor<'a>, O), Reject>;

            #[derive(Copy, Clone, Eq, PartialEq)]
            pub struct Cursor<'a> 
            {
                pub rest: &'a str,
                    pub off: u32,
            }
            
            impl<'a> Cursor<'a>
            {
                pub fn advance( &self, bytes: usize) -> Cursor<'a>
                {
                    let (_front, rest) = self.rest.split_at(bytes);
                    Cursor {
                        rest,
                                    off: self.off + _front.chars().count() as u32,
                    }
                }
                pub fn starts_with( &self, s: &str) -> bool
        {
                    self.rest.starts_with(s)
                }
                pub fn starts_with_char( &self, ch: char) -> bool
        {
                    self.rest.starts_with(ch)
                }
                pub fn starts_with_fn<Pattern>( &self, f: Pattern) -> bool
                where
                    Pattern: FnMut(char) -> bool,
                {
                    self.rest.starts_with(f)
                }
                pub fn is_empty( &self ) -> bool
        {
                    self.rest.is_empty()
                }
                fn len( &self ) -> usize {
                    self.rest.len()
                }
                fn as_bytes( &self ) -> &'a [u8] {
                    self.rest.as_bytes()
                }
                fn bytes( &self ) -> Bytes<'a>
                    {
                    self.rest.bytes()
                }
                fn chars( &self ) -> Chars<'a>
                    {
                    self.rest.chars()
                }
                fn char_indices( &self ) -> CharIndices<'a>
                    {
                    self.rest.char_indices()
                }
                fn parse( &self, tag: &str) -> Result<Cursor<'a>, Reject>
                    {
                    if self.starts_with(tag) {
                        Ok(self.advance(tag.len()))
                    } else {
                        Err(Reject)
                    }
                }
            }
            pub struct Reject;
            
            fn skip_whitespace(input: Cursor) -> Cursor
            {
                let mut s = input;

                while !s.is_empty()
               
                {
                    let byte = s.as_bytes()[0];
                    
                    if byte == b'/'
                    {
                        if s.starts_with("//")
                            && (!s.starts_with("///") || s.starts_with("////"))
                            && !s.starts_with("//!")
                        {
                            let (cursor, _) = take_until_newline_or_eof(s);
                            s = cursor;
                            continue;
                        } else if s.starts_with("/**/") {
                            s = s.advance(4);
                            continue;
                        } else if s.starts_with("/*")
                            && (!s.starts_with("/**") || s.starts_with("/***"))
                            && !s.starts_with("/*!")
                        {
                            match block_comment(s) {
                                Ok((rest, _)) =>
                    {
                                    s = rest;
                                    continue;
                                }
                                Err(Reject) => return s,
                            }
                        }
                    }
                    
                    match byte
                    {
                        b' ' | 0x09..=0x0d =>
                        {
                            s = s.advance(1);
                            continue;
                        }
                        b if b.is_ascii() =>
                    {}
                        _ =>
                        {
                            let ch = s.chars().next().unwrap();

                            if is::whitespace(ch)
                            {
                                s = s.advance(ch.len_utf8());
                                continue;
                            }
                        }
                    }
                    return s;
                }
                s
            }
            fn block_comment(input: Cursor<'_>) -> PResult<'_, &str>
            {
                if !input.starts_with("/*") {
                    return Err(Reject);
                }
                let mut depth = 0usize;
                let bytes = input.as_bytes();
                let mut i = 0usize;
                let upper = bytes.len() - 1;

                while i < upper {
                    if bytes[i] == b'/' && bytes[i + 1] == b'*' {
                        depth += 1;
                        i += 1;
                    } else if bytes[i] == b'*' && bytes[i + 1] == b'/' {
                        depth -= 1;
                        if depth == 0 {
                            return Ok((input.advance(i + 2), &input.rest[..i + 2]));
                        }
                        i += 1;
                    }
                    i += 1;
                }
                Err(Reject)
            }
            fn word_break(input: Cursor) -> Result<Cursor, Reject>
            {
                match input.chars().next() {
                    Some(ch) if is::ident_continue(ch) => Err(Reject),
                    Some(_) | None => Ok(input),
                }
            }
            pub fn token_stream(mut input: Cursor) -> Result<TokenStream, LexError>
            {
                let mut trees = TokenStreamBuilder::new();
                let mut stack = Vec::new();

                loop {
                    input = skip_whitespace(input);

                    if let Ok((rest, ())) = doc_comment(input, &mut trees) {
                        input = rest;
                        continue;
                    }
                            let lo = input.off;

                    let first = match input.bytes().next() {
                        Some(first) => first,
                        None => match stack.last() {
                            None => return Ok(trees.build()),
                                            Some((lo, _frame)) =>
                    {
                                return Err(LexError {
                                    span: Span { lo: *lo, hi: *lo },
                                })
                            }
                        },
                    };

                    if let Some(open_delimiter) = match first {
                        b'(' if !input.starts_with(ERROR) => Some(Delimiter::Parenthesis),
                        b'[' => Some(Delimiter::Bracket),
                        b'{' => Some(Delimiter::Brace),
                        _ => None,
                    } {
                        input = input.advance(1);
                        let frame = (open_delimiter, trees);
                                    let frame = (lo, frame);
                        stack.push(frame);
                        trees = TokenStreamBuilder::new();
                    } else if let Some(close_delimiter) = match first {
                        b')' => Some(Delimiter::Parenthesis),
                        b']' => Some(Delimiter::Bracket),
                        b'}' => Some(Delimiter::Brace),
                        _ => None,
                    } {
                        let frame = match stack.pop() {
                            Some(frame) => frame,
                            None => return Err(lex_error(input)),
                        };
                                    let (lo, frame) = frame;
                        let (open_delimiter, outer) = frame;
                        if open_delimiter != close_delimiter {
                            return Err(lex_error(input));
                        }
                        input = input.advance(1);
                        let mut g = Group::new(open_delimiter, trees.build());
                        g.set_span(Span {
                                            lo,
                                            hi: input.off,
                        });
                        trees = outer;
                        trees.push_token_from_parser(TokenTree::Group(::process::macros::Group::_new_fallback(g)));
                    } else {
                        let (rest, mut tt) = match leaf_token(input) {
                            Ok((rest, tt)) => (rest, tt),
                            Err(Reject) => return Err(lex_error(input)),
                        };
                        tt.set_span(::process::macros::Span::_new_fallback(Span {
                                            lo,
                                            hi: rest.off,
                        }));
                        trees.push_token_from_parser(tt);
                        input = rest;
                    }
                }
            }
            fn lex_error(cursor: Cursor) -> LexError
            {
                LexError
                {
                    span: Span
                    {
                        lo:cursor.off,
                        hi:cursor.off,
                    },
                }
            }
            fn leaf_token(input: Cursor) -> PResult<TokenTree>
            {
                if let Ok((input, l)) = literal(input) {
                   
                    Ok((input, TokenTree::Literal(::process::macros::Literal::_new_fallback(l))))
                } else if let Ok((input, p)) = punct(input) {
                    Ok((input, TokenTree::Punct(p)))
                } else if let Ok((input, i)) = ident(input) {
                    Ok((input, TokenTree::Ident(i)))
                } else if input.starts_with(ERROR)
                {
                    let rest = input.advance(ERROR.len());
                    let repr = ::process::macros::Literal::_new_fallback(Literal::_new(ERROR.to_owned()));
                    Ok((rest, TokenTree::Literal(repr)))
                } else {
                    Err(Reject)
                }
            }
            fn ident(input: Cursor) -> PResult<::process::macros::Ident>
            {
                if [
                    "r\"", "r#\"", "r##", "b\"", "b\'", "br\"", "br#", "c\"", "cr\"", "cr#",
                ]
                .iter()
                .any(|prefix| input.starts_with(prefix))
                {
                    Err(Reject)
                } else {
                    ident_any(input)
                }
            }
            fn ident_any(input: Cursor) -> PResult<::process::macros::Ident>
            {
                let raw = input.starts_with("r#");
                let rest = input.advance((raw as usize) << 1);

                let (rest, sym) = ident_not_raw(rest)?;

                if !raw
                {
                    let ident =
                        ::process::macros::Ident::_new_fallback(Ident::new_unchecked(sym, fallback::Span::call_site()));
                    return Ok((rest, ident));
                }
                match sym {
                    "_" | "super" | "self" | "Self" | "crate" => return Err(Reject),
                    _ =>
                    {}
                }
                let ident =
                    ::process::macros::Ident::_new_fallback(Ident::new_raw_unchecked(sym, fallback::Span::call_site()));
                Ok((rest, ident))
            }
            fn ident_not_raw(input: Cursor<'_>) -> PResult<'_, &str>
            {
                let mut chars = input.char_indices();

                match chars.next() {
                    Some((_, ch)) if is::ident_start(ch) =>
                    {}
                    _ => return Err(Reject),
                }
                let mut end = input.len();
                for (i, ch) in chars {
                    if !is::ident_continue(ch) {
                        end = i;
                        break;
                    }
                }
                Ok((input.advance(end), &input.rest[..end]))
            }
            pub fn literal(input: Cursor) -> PResult<Literal>
            {
                let rest = literal_nocapture(input)?;
                let end = input.len() - rest.len();
                Ok((rest, Literal::_new(input.rest[..end].to_string())))
            }
            fn literal_nocapture(input: Cursor) -> Result<Cursor, Reject>
            {
                if let Ok(ok) = string(input) {
                    Ok(ok)
                } else if let Ok(ok) = byte_string(input) {
                    Ok(ok)
                } else if let Ok(ok) = c_string(input) {
                    Ok(ok)
                } else if let Ok(ok) = byte(input) {
                    Ok(ok)
                } else if let Ok(ok) = character(input) {
                    Ok(ok)
                } else if let Ok(ok) = float(input) {
                    Ok(ok)
                } else if let Ok(ok) = int(input) {
                    Ok(ok)
                } else {
                    Err(Reject)
                }
            }
            fn literal_suffix(input: Cursor) -> Cursor
            {
                match ident_not_raw(input) {
                    Ok((input, _)) => input,
                    Err(Reject) => input,
                }
            }
            fn string(input: Cursor) -> Result<Cursor, Reject>
            {
                if let Ok(input) = input.parse("\"") {
                    cooked_string(input)
                } else if let Ok(input) = input.parse("r") {
                    raw_string(input)
                } else {
                    Err(Reject)
                }
            }
            fn cooked_string(mut input: Cursor) -> Result<Cursor, Reject>
            {
                let mut chars = input.char_indices();

                while let Some((i, ch)) = chars.next( )
                {
                    match ch {
                        '"' =>
                    {
                            let input = input.advance(i + 1);
                            return Ok(literal_suffix(input));
                        }
                        '\r' => match chars.next() {
                            Some((_, '\n')) =>
                    {}
                            _ => break,
                        },
                        '\\' => match chars.next() {
                            Some((_, 'x')) =>
                    {
                                backslash_x_char(&mut chars)?;
                            }
                            Some((_, 'n' | 'r' | 't' | '\\' | '\'' | '"' | '0')) =>
                    {}
                            Some((_, 'u')) =>
                    {
                                backslash_u(&mut chars)?;
                            }
                            Some((newline, ch @ ('\n' | '\r'))) =>
                    {
                                input = input.advance(newline + 1);
                                trailing_backslash(&mut input, ch as u8)?;
                                chars = input.char_indices();
                            }
                            _ => break,
                        },
                        _ch =>
                    {}
                    }
                }
                Err(Reject)
            }
            fn raw_string(input: Cursor) -> Result<Cursor, Reject>
            {
                let (input, delimiter) = delimiter_of_raw_string(input)?;
                let mut bytes = input.bytes().enumerate();
                while let Some((i, byte)) = bytes.next( )
                {
                    match byte {
                        b'"' if input.rest[i + 1..].starts_with(delimiter) =>
                    {
                            let rest = input.advance(i + 1 + delimiter.len());
                            return Ok(literal_suffix(rest));
                        }
                        b'\r' => match bytes.next() {
                            Some((_, b'\n')) =>
                    {}
                            _ => break,
                        },
                        _ =>
                    {}
                    }
                }
                Err(Reject)
            }
            fn byte_string(input: Cursor) -> Result<Cursor, Reject>
            {
                if let Ok(input) = input.parse("b\"") {
                    cooked_byte_string(input)
                } else if let Ok(input) = input.parse("br") {
                    raw_byte_string(input)
                } else {
                    Err(Reject)
                }
            }
            fn cooked_byte_string(mut input: Cursor) -> Result<Cursor, Reject>
            {
                let mut bytes = input.bytes().enumerate();
                while let Some((offset, b)) = bytes.next( )
                {
                    match b {
                        b'"' =>
                    {
                            let input = input.advance(offset + 1);
                            return Ok(literal_suffix(input));
                        }
                        b'\r' => match bytes.next() {
                            Some((_, b'\n')) =>
                    {}
                            _ => break,
                        },
                        b'\\' => match bytes.next() {
                            Some((_, b'x')) =>
                    {
                                backslash_x_byte(&mut bytes)?;
                            }
                            Some((_, b'n' | b'r' | b't' | b'\\' | b'0' | b'\'' | b'"')) =>
                    {}
                            Some((newline, b @ (b'\n' | b'\r'))) =>
                    {
                                input = input.advance(newline + 1);
                                trailing_backslash(&mut input, b)?;
                                bytes = input.bytes().enumerate();
                            }
                            _ => break,
                        },
                        b if b.is_ascii() =>
                    {}
                        _ => break,
                    }
                }
                Err(Reject)
            }
            fn delimiter_of_raw_string(input: Cursor<'_>) -> PResult<'_, &str>
            {
                for (i, byte) in input.bytes().enumerate( )
                {
                    match byte {
                        b'"' =>
                    {
                            if i > 255 {
                               
                                return Err(Reject);
                            }
                            return Ok((input.advance(i + 1), &input.rest[..i]));
                        }
                        b'#' =>
                    {}
                        _ => break,
                    }
                }
                Err(Reject)
            }
            fn raw_byte_string(input: Cursor) -> Result<Cursor, Reject>
            {
                let (input, delimiter) = delimiter_of_raw_string(input)?;
                let mut bytes = input.bytes().enumerate();
                while let Some((i, byte)) = bytes.next( )
                {
                    match byte {
                        b'"' if input.rest[i + 1..].starts_with(delimiter) =>
                    {
                            let rest = input.advance(i + 1 + delimiter.len());
                            return Ok(literal_suffix(rest));
                        }
                        b'\r' => match bytes.next() {
                            Some((_, b'\n')) =>
                    {}
                            _ => break,
                        },
                        other =>
                    {
                            if !other.is_ascii() {
                                break;
                            }
                        }
                    }
                }
                Err(Reject)
            }
            fn c_string(input: Cursor) -> Result<Cursor, Reject>
            {
                if let Ok(input) = input.parse("c\"") {
                    cooked_c_string(input)
                } else if let Ok(input) = input.parse("cr") {
                    raw_c_string(input)
                } else {
                    Err(Reject)
                }
            }
            fn raw_c_string(input: Cursor) -> Result<Cursor, Reject>
            {
                let (input, delimiter) = delimiter_of_raw_string(input)?;
                let mut bytes = input.bytes().enumerate();
                while let Some((i, byte)) = bytes.next( )
                {
                    match byte {
                        b'"' if input.rest[i + 1..].starts_with(delimiter) =>
                    {
                            let rest = input.advance(i + 1 + delimiter.len());
                            return Ok(literal_suffix(rest));
                        }
                        b'\r' => match bytes.next() {
                            Some((_, b'\n')) =>
                    {}
                            _ => break,
                        },
                        b'\0' => break,
                        _ =>
                    {}
                    }
                }
                Err(Reject)
            }
            fn cooked_c_string(mut input: Cursor) -> Result<Cursor, Reject>
            {
                let mut chars = input.char_indices();

                while let Some((i, ch)) = chars.next( )
                {
                    match ch {
                        '"' =>
                    {
                            let input = input.advance(i + 1);
                            return Ok(literal_suffix(input));
                        }
                        '\r' => match chars.next() {
                            Some((_, '\n')) =>
                    {}
                            _ => break,
                        },
                        '\\' => match chars.next() {
                            Some((_, 'x')) =>
                    {
                                backslash_x_nonzero(&mut chars)?;
                            }
                            Some((_, 'n' | 'r' | 't' | '\\' | '\'' | '"')) =>
                    {}
                            Some((_, 'u')) =>
                    {
                                if backslash_u(&mut chars)? == '\0' {
                                    break;
                                }
                            }
                            Some((newline, ch @ ('\n' | '\r'))) =>
                    {
                                input = input.advance(newline + 1);
                                trailing_backslash(&mut input, ch as u8)?;
                                chars = input.char_indices();
                            }
                            _ => break,
                        },
                        '\0' => break,
                        _ch =>
                    {}
                    }
                }
                Err(Reject)
            }
            fn byte(input: Cursor) -> Result<Cursor, Reject>
            {
                let input = input.parse("b'")?;
                let mut bytes = input.bytes().enumerate();
                let ok = match bytes.next().map(|(_, b)| b) {
                    Some(b'\\') => match bytes.next().map(|(_, b)| b) {
                        Some(b'x') => backslash_x_byte(&mut bytes).is_ok(),
                        Some(b'n' | b'r' | b't' | b'\\' | b'0' | b'\'' | b'"') => true,
                        _ => false,
                    },
                    b => b.is_some(),
                };
                if !ok {
                    return Err(Reject);
                }
                let (offset, _) = bytes.next().ok_or(Reject)?;
                if !input.chars().as_str().is_char_boundary(offset) {
                    return Err(Reject);
                }
                let input = input.advance(offset).parse("'")?;
                Ok(literal_suffix(input))
            }
            fn character(input: Cursor) -> Result<Cursor, Reject>
            {
                let input = input.parse("'")?;
                let mut chars = input.char_indices();
                let ok = match chars.next().map(|(_, ch)| ch) {
                    Some('\\') => match chars.next().map(|(_, ch)| ch) {
                        Some('x') => backslash_x_char(&mut chars).is_ok(),
                        Some('u') => backslash_u(&mut chars).is_ok(),
                        Some('n' | 'r' | 't' | '\\' | '0' | '\'' | '"') => true,
                        _ => false,
                    },
                    ch => ch.is_some(),
                };
                if !ok {
                    return Err(Reject);
                }
                let (idx, _) = chars.next().ok_or(Reject)?;
                let input = input.advance(idx).parse("'")?;
                Ok(literal_suffix(input))
            }
            
            fn backslash_x_char<I>(chars: &mut I) -> Result<(), Reject> where
            I: Iterator<Item = (usize, char)>,
            {
                let _ = match chars.next()
                {
                    Some((_, ch)) => match ch
                    {
                        '0'..='7' => ch,
                        _ => return Err(Reject),
                    },
                    None => todo!(),
                };

                let _ = match chars.next()
                {
                    Some((_, ch)) => match ch
                    {
                        '0'..='9' | 'a'..='f' | 'A'..='F' => ch,
                        _ => return Err(Reject),
                    },
                    None => todo!(),
                };

                Ok(())
            } 

            fn backslash_x_byte<I>(chars: &mut I) -> Result<(), Reject> where
            I: Iterator<Item = (usize, u8)>,
            {
                /*
                ($chars:ident @ $pat:pat) =>
                {
                    match $chars.next()
                    {
                        Some((_, ch)) => match ch
                        {
                            $pat => ch,
                            _ => return Err(Reject),
                        },
                        None => return Err(Reject),
                    }
                };
                */
                let _ = match chars.next()
                {
                    Some((_, ch)) => match ch
                    {
                        b'0'..=b'9' | b'a'..=b'f' | b'A'..=b'F' => ch,
                        _ => return Err(Reject),
                    },
                    None => return Err(Reject),
                };

                let _ = match chars.next()
                {
                    Some((_, ch)) => match ch
                    {
                        b'0'..=b'9' | b'a'..=b'f' | b'A'..=b'F' => ch,
                        _ => return Err(Reject),
                    },
                    None => return Err(Reject),
                };

                Ok(())
            }
            fn backslash_x_nonzero<I>(chars: &mut I) -> Result<(), Reject> where
            I: Iterator<Item = (usize, char)>,
            {
                let first = match chars.next()
                {
                    Some((_, ch)) => match ch
                    {
                        '0'..='9' | 'a'..='f' | 'A'..='F' => ch,
                        _ => return Err(Reject),
                    },
                    None => return Err(Reject),
                };
                
                let second = match chars.next()
                {
                    Some((_, ch)) => match ch
                    {
                        '0'..='9' | 'a'..='f' | 'A'..='F' => ch,
                        _ => return Err(Reject),
                    },
                    None => return Err(Reject),
                };
                
                if first == '0' && second == '0' {
                    Err(Reject)
                } else {
                    Ok(())
                }
            }
            fn backslash_u<I>(chars: &mut I) -> Result<char, Reject> where
            I: Iterator<Item = (usize, char)>,
            {
                let _ = match chars.next()
                {
                    Some((_, ch)) => match ch
                    {
                        '{' => ch,
                        _ => return Err(Reject),
                    },
                    None => todo!(),
                };

                let mut value = 0;
                let mut len = 0;
                for (_, ch) in chars
                {
                    let digit = match ch {
                        '0'..='9' => ch as u8 - b'0',
                        'a'..='f' => 10 + ch as u8 - b'a',
                        'A'..='F' => 10 + ch as u8 - b'A',
                        '_' if len > 0 => continue,
                        '}' if len > 0 => return char::from_u32(value).ok_or(Reject),
                        _ => break,
                    };
                    if len == 6 {
                        break;
                    }
                    value *= 0x10;
                    value += u32::from(digit);
                    len += 1;
                }
                Err(Reject)
            }
            fn trailing_backslash(input: &mut Cursor, mut last: u8) -> Result<(), Reject>
            {
                let mut whitespace = input.bytes().enumerate();
                loop {
                    if last == b'\r' && whitespace.next().map_or(true, |(_, b)| b != b'\n') {
                        return Err(Reject);
                    }
                    match whitespace.next() {
                        Some((_, b @ (b' ' | b'\t' | b'\n' | b'\r'))) =>
                    {
                            last = b;
                        }
                        Some((offset, _)) =>
                    {
                            *input = input.advance(offset);
                            return Ok(());
                        }
                        None => return Err(Reject),
                    }
                }
            }
            fn float(input: Cursor) -> Result<Cursor, Reject>
            {
                let mut rest = float_digits(input)?;
                if let Some(ch) = rest.chars().next() {
                    if is::ident_start(ch) {
                        rest = ident_not_raw(rest)?.0;
                    }
                }
                word_break(rest)
            }
            fn float_digits(input: Cursor) -> Result<Cursor, Reject>
            {
                let mut chars = input.chars().peekable();
                match chars.next() {
                    Some(ch) if '0' <= ch && ch <= '9' =>
                    {}
                    _ => return Err(Reject),
                }
                let mut len = 1;
                let mut has_dot = false;
                let mut has_exp = false;
                while let Some(&ch) = chars.peek( )
                {
                    match ch {
                        '0'..='9' | '_' =>
                    {
                            chars.next();
                            len += 1;
                        }
                        '.' =>
                    {
                            if has_dot {
                                break;
                            }
                            chars.next();
                            if chars
                                .peek()
                                .map_or(false, |&ch| ch == '.' || is::ident_start(ch))
                            {
                                return Err(Reject);
                            }
                            len += 1;
                            has_dot = true;
                        }
                        'e' | 'E' =>
                    {
                            chars.next();
                            len += 1;
                            has_exp = true;
                            break;
                        }
                        _ => break,
                    }
                }
                if !(has_dot || has_exp) {
                    return Err(Reject);
                }
                if has_exp
                {
                    let token_before_exp = if has_dot {
                        Ok(input.advance(len - 1))
                    } else {
                        Err(Reject)
                    };
                    let mut has_sign = false;
                    let mut has_exp_value = false;
                    while let Some(&ch) = chars.peek() {
                        match ch {
                            '+' | '-' =>
                    {
                                if has_exp_value {
                                    break;
                                }
                                if has_sign {
                                    return token_before_exp;
                                }
                                chars.next();
                                len += 1;
                                has_sign = true;
                            }
                            '0'..='9' =>
                    {
                                chars.next();
                                len += 1;
                                has_exp_value = true;
                            }
                            '_' =>
                    {
                                chars.next();
                                len += 1;
                            }
                            _ => break,
                        }
                    }
                    if !has_exp_value {
                        return token_before_exp;
                    }
                }
                Ok(input.advance(len))
            }
            fn int(input: Cursor) -> Result<Cursor, Reject>
            {
                let mut rest = digits(input)?;
                if let Some(ch) = rest.chars().next() {
                    if is::ident_start(ch) {
                        rest = ident_not_raw(rest)?.0;
                    }
                }
                word_break(rest)
            }
            fn digits(mut input: Cursor) -> Result<Cursor, Reject>
            {
                let base = if input.starts_with("0x") {
                    input = input.advance(2);
                    16
                } else if input.starts_with("0o") {
                    input = input.advance(2);
                    8
                } else if input.starts_with("0b") {
                    input = input.advance(2);
                    2
                } else {
                    10
                };

                let mut len = 0;
                let mut empty = true;
                for b in input.bytes( )
                {
                    match b {
                        b'0'..=b'9' =>
                    {
                            let digit = (b - b'0') as u64;
                            if digit >= base {
                                return Err(Reject);
                            }
                        }
                        b'a'..=b'f' =>
                    {
                            let digit = 10 + (b - b'a') as u64;
                            if digit >= base {
                                break;
                            }
                        }
                        b'A'..=b'F' =>
                    {
                            let digit = 10 + (b - b'A') as u64;
                            if digit >= base {
                                break;
                            }
                        }
                        b'_' =>
                    {
                            if empty && base == 10 {
                                return Err(Reject);
                            }
                            len += 1;
                            continue;
                        }
                        _ => break,
                    }
                    len += 1;
                    empty = false;
                }
                if empty {
                    Err(Reject)
                } else {
                    Ok(input.advance(len))
                }
            }
            fn punct(input: Cursor) -> PResult<Punct>
            {
                let (rest, ch) = punct_char(input)?;
                if ch == '\''
                {
                    let (after_lifetime, _ident) = ident_any(rest)?;
                    if after_lifetime.starts_with_char('\'')
                        || (after_lifetime.starts_with_char('#') && !rest.starts_with("r#"))
                    {
                        Err(Reject)
                    } else {
                        Ok((rest, Punct::new('\'', Spacing::Joint)))
                    }
                } else
                {
                    let kind = match punct_char(rest) {
                        Ok(_) => Spacing::Joint,
                        Err(Reject) => Spacing::Alone,
                    };
                    Ok((rest, Punct::new(ch, kind)))
                }
            }
            fn punct_char(input: Cursor) -> PResult<char>
            {
                if input.starts_with("//") || input.starts_with("/*") {
                   
                    return Err(Reject);
                }
                let mut chars = input.chars();
                let first = match chars.next() {
                    Some(ch) => ch,
                    None =>
                    {
                        return Err(Reject);
                    }
                };
                let recognized = "~!@#$%^&*-=+|;:,<.>/?'";
                if recognized.contains(first) {
                    Ok((input.advance(first.len_utf8()), first))
                } else {
                    Err(Reject)
                }
            }
            fn doc_comment<'a>(input: Cursor<'a>, trees: &mut TokenStreamBuilder) -> PResult<'a, ()>
            {
                let lo = input.off;
                let (rest, (comment, inner)) = doc_comment_contents(input)?;
                let fallback_span = Span {
                            lo,
                            hi: rest.off,
                };
                let span = ::process::macros::Span::_new_fallback(fallback_span);

                let mut scan_for_bare_cr = comment;
                while let Some(cr) = scan_for_bare_cr.find('\r')
                {
                    let rest = &scan_for_bare_cr[cr + 1..];
                    if !rest.starts_with('\n') {
                        return Err(Reject);
                    }
                    scan_for_bare_cr = rest;
                }
                let mut pound = Punct::new('#', Spacing::Alone);
                pound.set_span(span);
                trees.push_token_from_parser(TokenTree::Punct(pound));

                if inner
                {
                    let mut bang = Punct::new('!', Spacing::Alone);
                    bang.set_span(span);
                    trees.push_token_from_parser(TokenTree::Punct(bang));
                }
                let doc_ident = ::process::macros::Ident::_new_fallback(Ident::new_unchecked("doc", fallback_span));
                let mut equal = Punct::new('=', Spacing::Alone);
                equal.set_span(span);
                let mut literal = ::process::macros::Literal::_new_fallback(Literal::string(comment));
                literal.set_span(span);
                let mut bracketed = TokenStreamBuilder::with_capacity(3);
                bracketed.push_token_from_parser(TokenTree::Ident(doc_ident));
                bracketed.push_token_from_parser(TokenTree::Punct(equal));
                bracketed.push_token_from_parser(TokenTree::Literal(literal));
                let group = Group::new(Delimiter::Bracket, bracketed.build());
                let mut group = ::process::macros::Group::_new_fallback(group);
                group.set_span(span);
                trees.push_token_from_parser(TokenTree::Group(group));

                Ok((rest, ()))
            }
            fn doc_comment_contents(input: Cursor<'_>) -> PResult<'_, (&str, bool)>
            {
                if input.starts_with("//!")
                {
                    let input = input.advance(3);
                    let (input, s) = take_until_newline_or_eof(input);
                    Ok((input, (s, true)))
                } else if input.starts_with("/*!")
                {
                    let (input, s) = block_comment(input)?;
                    Ok((input, (&s[3..s.len() - 2], true)))
                } else if input.starts_with("///")
                {
                    let input = input.advance(3);
                    if input.starts_with_char('/') {
                        return Err(Reject);
                    }
                    let (input, s) = take_until_newline_or_eof(input);
                    Ok((input, (s, false)))
                } else if input.starts_with("/**") && !input.rest[3..].starts_with('*')
                {
                    let (input, s) = block_comment(input)?;
                    Ok((input, (&s[3..s.len() - 2], false)))
                } else {
                    Err(Reject)
                }
            }
            fn take_until_newline_or_eof(input: Cursor<'_>) -> (Cursor<'_>, &str) 
            {
                let chars = input.char_indices();

                for (i, ch) in chars {
                    if ch == '\n' {
                        return (input.advance(i), &input.rest[..i]);
                    } else if ch == '\r' && input.rest[i + 1..].starts_with('\n') {
                        return (input.advance(i + 1), &input.rest[..i]);
                    }
                }
                (input.advance(input.len()), input.rest)
            }
        }

        pub mod probe
        {
            use ::
            {
                *,
            };
            /*
            */
            pub mod proc_macro_span
            {
                use ::
                {
                    ops::{ Range, RangeBounds },
                    path::{ PathBuf },
                    proc_macro::{ Literal, Span },
                    *,
                };
                /*
                */
                pub fn byte_range(this: &Span) -> Range<usize>
                {
                    //this.byte_range()
                    Range { start: 0, end: 0 }
                }
                pub fn start(this: &Span) -> Span { this.start() }
                pub fn end(this: &Span) -> Span { this.end() }
                pub fn line(this: &Span) -> usize { this.line() }
                pub fn column(this: &Span) -> usize { this.column() }
                pub fn file(this: &Span) -> String { this.file() }
                pub fn local_file(this: &Span) -> Option<PathBuf>
                    { this.local_file() }
                pub fn join(this: &Span, other: Span) -> Option<Span> 
                {
                    //this.join(other)
                    None
                }
                pub fn subspan<R:RangeBounds<usize>>( this:&Literal, range:R ) -> Option<Span>
                {
                    //this.subspan( range )
                    None
                }
                /*
               
                #[cfg(procmacro2_build_probe)] */
                const _: Option<&str> = option_env!("RUSTC_BOOTSTRAP");
            }
            
            pub mod proc_macro_span_file
            {
                use ::
                {
                    path::PathBuf,
                    proc_macro::Span,
                    *,
                };
                /*
                */
                pub fn file(this: &Span) -> String {
                    this.file()
                }
                pub fn local_file(this: &Span) -> Option<PathBuf>
                    {
                    this.local_file()
                }
            }
            
            pub mod proc_macro_span_location
            {
                use ::
                {
                    proc_macro::Span,
                    *,
                };
                /*
                */
                pub fn start(this: &Span) -> Span { this.start() }
                pub fn end(this: &Span) -> Span { this.end() }
                pub fn line(this: &Span) -> usize { this.line() }
                pub fn column(this: &Span) -> usize { this.column() }
            }
            
        }

        pub mod rcvec
        {
            use ::
            {
                rc::{ Rc },
                panic::{ RefUnwindSafe },
                *,
            };
            /*
            use alloc::rc::Rc;
            use alloc::vec;
            use ::mem;
            use ::panic::RefUnwindSafe;
            use ::slice;
            */
            pub struct RcVec<T>
            {
                inner: rc::Rc<Vec<T>>,
            }
            pub struct RcVecBuilder<T>
            {
                inner: Vec<T>,
            }
            pub struct RcVecMut<'a, T>
            {
                inner: &'a mut Vec<T>,
            }
            #[derive(Clone)]
            pub struct RcVecIntoIter<T>
            {
                inner: vec::IntoIter<T>,
            }
            
            impl<T> RcVec<T>
            {
                pub fn is_empty( &self ) -> bool 
                {
                    self.inner.is_empty()
                }
                pub fn len( &self ) -> usize 
                {
                    self.inner.len()
                }
                pub fn iter( &self ) -> slice::Iter<'_, T>
                {
                    self.inner.iter()
                }
                pub fn make_mut( &mut self ) -> RcVecMut<'_, T> where
                T: Clone,
                {
                    RcVecMut {
                        inner: rc::Rc::make_mut(&mut self.inner),
                    }
                }
                pub fn get_mut( &mut self ) -> Option<RcVecMut<'_, T>>
               
                {
                    let inner = rc::Rc::get_mut(&mut self.inner)?;
                    Some(RcVecMut { inner })
                }
                pub fn make_owned(mut self) -> RcVecBuilder<T> where
                T: Clone,
               
                {
                    let vec = if let Some(owned) = rc::Rc::get_mut(&mut self.inner) {
                        mem::take(owned)
                    } else {
                        Vec::clone(&self.inner)
                    };
                    RcVecBuilder { inner: vec }
                }
            }
            
            impl<T> RcVecBuilder<T>
            {
                pub fn new() -> Self {
                    RcVecBuilder { inner: Vec::new() }
                }
                pub fn with_capacity(cap: usize) -> Self {
                    RcVecBuilder {
                        inner: Vec::with_capacity(cap),
                    }
                }
                pub fn push(&mut self, element: T) {
                    self.inner.push(element);
                }
                pub fn extend(&mut self, iter: impl IntoIterator<Item = T>) {
                    self.inner.extend(iter);
                }
                pub fn as_mut( &mut self ) -> RcVecMut<'_, T>
                {
                    RcVecMut {
                        inner: &mut self.inner,
                    }
                }
                pub fn build( self ) -> RcVec<T>
                    {
                    RcVec {
                        inner: rc::Rc::new(self.inner),
                    }
                }
            }
            
            impl<'a, T> RcVecMut<'a, T>
            {
                pub fn push(&mut self, element: T) {
                    self.inner.push(element);
                }
                pub fn extend(&mut self, iter: impl IntoIterator<Item = T>) {
                    self.inner.extend(iter);
                }
                pub fn as_mut( &mut self ) -> RcVecMut<'_, T> 
                {
                    RcVecMut { inner: self.inner }
                }
                pub fn take( self ) -> RcVecBuilder<T>
                {
                    let vec = mem::take(self.inner);
                    RcVecBuilder { inner: vec }
                }
            }
            
            impl<T> Clone for RcVec<T>           
            {
                fn clone( &self ) -> Self
                {
                    RcVec {
                        inner: rc::Rc::clone(&self.inner),
                    }
                }
            }
            
            impl<T> IntoIterator for RcVecBuilder<T>
            {
                type Item = T;
                type IntoIter = RcVecIntoIter<T>;
                fn into_iter( self ) -> Self::IntoIter
                {
                    RcVecIntoIter
                    {
                        inner: self.inner.into_iter(),
                    }
                }
            }
            
            impl<T> Iterator for RcVecIntoIter<T>
            {
                type Item = T;
                fn next( &mut self ) -> Option<Self::Item>
                    { self.inner.next() }
                
                fn size_hint( &self ) -> (usize, Option<usize>) { self.inner.size_hint() }
            }
            
            impl<T> RefUnwindSafe for RcVec<T> where
            T:RefUnwindSafe
            {}
        }
        /// Public implementation details for the `TokenStream` type, such as iterators.
        pub mod token_stream 
        {
            use ::
            {
                fmt::{ self, Debug },
                marker::{ ProcMacroAutoTraits, MARKER },
                process::macros::
                {
                    imp, TokenStream, TokenTree
                },
                *,
            };
            /// An iterator over `TokenStream`'s `TokenTree`s.
            #[derive(Clone)]
            pub struct IntoIter
            {
                inner: imp::TokenTreeIter,
                _marker: ProcMacroAutoTraits,
            }
            impl Iterator for IntoIter
            {
                type Item = TokenTree;
                fn next( &mut self ) -> Option<TokenTree>
                {
                    self.inner.next()
                }
                fn size_hint( &self ) -> (usize, Option<usize>)
                {
                    self.inner.size_hint()
                }
            }
            impl Debug for IntoIter
            {
                fn fmt( &self, f: &mut fmt::Formatter) -> fmt::Result
                {
                    f.write_str("TokenStream ")?;
                    f.debug_list().entries(self.clone()).finish()
                }
            }
            impl IntoIterator for TokenStream
            {
                type Item = TokenTree;
                type IntoIter = IntoIter;
                fn into_iter( self ) -> IntoIter
                {
                    IntoIter {
                        inner: self.inner.into_iter(),
                        _marker: ::marker::MARKER,
                    }
                }
            }
        }
        /// An abstract stream of tokens, or more concretely a sequence of token trees
        #[derive(Clone)]
        pub struct TokenStream
        {
            inner: imp::TokenStream,
            _marker: ::marker::ProcMacroAutoTraits,
        }
        /// Error returned from `TokenStream::from_str`.
        pub struct LexError
        {
            inner: imp::LexError,
            _marker: ::marker::ProcMacroAutoTraits,
        }

        impl TokenStream       
        {
            fn _new(inner: imp::TokenStream) -> Self {
                TokenStream {
                    inner,
                    _marker: marker::MARKER,
                }
            }
            fn _new_fallback(inner: fallback::TokenStream) -> Self {
                TokenStream {
                    inner: imp::TokenStream::from(inner),
                    _marker: marker::MARKER,
                }
            }
            /// Returns an empty `TokenStream` containing no token trees.
            pub fn new() -> Self {
                TokenStream::_new(imp::TokenStream::new())
            }
            /// Checks if this `TokenStream` is empty.
            pub fn is_empty( &self ) -> bool           
            {
                self.inner.is_empty()
            }
        }
        /// `TokenStream::default()` returns an empty stream, equivalent with `TokenStream::new()`.
        impl Default for TokenStream       
        {
            fn default() -> Self {
                TokenStream::new()
            }
        }
        /// Attempts to break the string into tokens and parse those tokens into a token stream.
        impl str::FromStr for TokenStream
        {
            type Err = LexError;
            fn from_str(src: &str) -> Result<TokenStream, LexError>
            {
                match imp::TokenStream::from_str_checked(src) {
                    Ok(tokens) => Ok(TokenStream::_new(tokens)),
                    Err(lex) => Err(LexError {
                        inner: lex,
                        _marker: marker::MARKER,
                    }),
                }
            }
        }
        
        impl From<proc_macro::TokenStream> for TokenStream       
        {
            fn from(inner: proc_macro::TokenStream) -> Self {
                TokenStream::_new(imp::TokenStream::from(inner))
            }
        }
        
        impl From<TokenStream> for proc_macro::TokenStream       
        {
            fn from(inner: TokenStream) -> Self {
                proc_macro::TokenStream::from(inner.inner)
            }
        }

        impl From<TokenTree> for TokenStream       
        {
            fn from(token: TokenTree) -> Self {
                TokenStream::_new(imp::TokenStream::from(token))
            }
        }

        impl Extend<TokenTree> for TokenStream       
        {
            fn extend<I: IntoIterator<Item = TokenTree>>(&mut self, streams: I)
            {
                self.inner.extend(streams);
            }
        }

        impl Extend<TokenStream> for TokenStream       
        {
            fn extend<I: IntoIterator<Item = TokenStream>>(&mut self, streams: I)
            {
                self.inner
                    .extend(streams.into_iter().map(|stream| stream.inner));
            }
        }
        /// Collects a number of token trees into a single stream.
        impl iter::FromIterator<TokenTree> for TokenStream       
        {
            fn from_iter<I: IntoIterator<Item = TokenTree>>(streams: I) -> Self {
                TokenStream::_new(streams.into_iter().collect())
            }
        }
        impl iter::FromIterator<TokenStream> for TokenStream       
        {
            fn from_iter<I: IntoIterator<Item = TokenStream>>(streams: I) -> Self {
                TokenStream::_new(streams.into_iter().map(|i| i.inner).collect())
            }
        }
        /*
        Prints the token stream as a string that should be losslessly convertible back into the same token stream
        (modulo spans), except for possibly `TokenTree::Group`s with `Delimiter::None` delimiters 
        and negative numeric literals. */
        /// 
        /// 
        /// 
        /// 
        impl Display for TokenStream       
        {
            fn fmt( &self, f: &mut fmt::Formatter) -> fmt::Result
                {Display::fmt(&self.inner, f)
            }
        }
        /// Prints token in a form convenient for debugging.
        impl Debug for TokenStream       
        {
            fn fmt( &self, f: &mut fmt::Formatter) -> fmt::Result
                {Debug::fmt(&self.inner, f)
            }
        }

        impl LexError 
        {
            pub fn span( &self ) -> Span {
                Span::_new(self.inner.span())
            }
        }

        impl Debug for LexError
        {
            fn fmt( &self, f: &mut fmt::Formatter) -> fmt::Result
                {Debug::fmt(&self.inner, f)
            }
        }

        impl Display for LexError
        {
            fn fmt( &self, f: &mut fmt::Formatter) -> fmt::Result
                {Display::fmt(&self.inner, f)
            }
        }

        impl Error for LexError {}
        /// A region of source code, along with macro expansion information.
        #[derive(Copy, Clone)]
        pub struct Span
        {
            inner: imp::Span,
            _marker: marker::ProcMacroAutoTraits,
        }

        impl Span
        {
            fn _new(inner: imp::Span) -> Self {
                Span {
                    inner,
                    _marker: marker::MARKER,
                }
            }
            fn _new_fallback(inner: fallback::Span) -> Self 
            {
                Span {
                    inner: imp::Span::from(inner),
                    _marker: marker::MARKER,
                }
            }
            /// The span of the invocation of the current procedural macro
            pub fn call_site() -> Self 
            {
                Span::_new(imp::Span::call_site())
            }
            /// The span located at the invocation of the procedural macro,
            /// but with local variables, labels, and `$crate` resolved at the definition site of the macro.
            pub fn mixed_site() -> Self 
            {
                Span::_new(imp::Span::mixed_site())
            }
            /// A span that resolves at the macro definition site.
            pub fn def_site() -> Self 
            {
                Span::_new(imp::Span::def_site())
            }
            /// Creates a new span with the same line/column information as `self` but
            /// that resolves symbols as though it were at `other`.
            pub fn resolved_at( &self, other: Span) -> Span 
            {
                Span::_new(self.inner.resolved_at(other.inner))
            }
            /// Creates a new span with the same name resolution behavior as `self` but
            /// with the line/column information of `other`.
            pub fn located_at( &self, other: Span) -> Span 
            {
                Span::_new(self.inner.located_at(other.inner))
            }
            /// Convert `process::macros::Span` to `proc_macro::Span`
            pub fn unwrap( self ) -> proc_macro::Span 
           
            {
                self.inner.unwrap()
            }
           
            pub fn unstable( self ) -> proc_macro::Span
           
            {
                self.unwrap()
            }
            /// Returns the span's byte position range in the source file
            pub fn byte_range( &self ) -> Range<usize>
           
            {
                self.inner.byte_range()
            }
            /// Get the starting line/column in the source file for this span
            pub fn start( &self ) -> location::LineColumn
           
            {
                self.inner.start()
            }
            /// Get the ending line/column in the source file for this span
            pub fn end( &self ) -> location::LineColumn
           
            {
                self.inner.end()
            }
            /// The path to the source file in which this span occurs, for display purposes
            pub fn file( &self ) -> String
           
            {
                self.inner.file()
            }
            /// The path to the source file in which this span occurs on disk.
            pub fn local_file( &self ) -> Option<PathBuf>
           
            {
                self.inner.local_file()
            }
            /// Create a new span encompassing `self` and `other`.
            pub fn join( &self, other: Span) -> Option<Span>
           
            {
                self.inner.join(other.inner).map(Span::_new)
            }
            /// Compares two spans to see if they're equal.
            pub fn eq( &self, other: &Span) -> bool
            {
                self.inner.eq(&other.inner)
            }
            /// Returns the source text behind a span.
            pub fn source_text( &self ) -> Option<String>
           
            {
                self.inner.source_text()
            }
        }
        /// Prints a span in a form convenient for debugging.
        impl Debug for Span
        {
            fn fmt( &self, f: &mut fmt::Formatter) -> fmt::Result
                {Debug::fmt(&self.inner, f)
            }
        }
        /// A single token or a delimited sequence of token trees (e.g. `[1, (), ..]`).
        #[derive(Clone)]
        pub enum TokenTree 
        {
            /// A token stream surrounded by bracket delimiters.
            Group(Group),
            /// An identifier.
            Ident(Ident),
            /// A single punctuation character (`+`, `,`, `$`, etc.).
            Punct(Punct),
            /// A literal character (`'a'`), string (`"hello"`), number (`2.3`), etc.
            Literal(Literal),
        }

        impl TokenTree 
        {
            /// Returns the span of this tree, 
            /// delegating to the `span` method of the contained token or a delimited stream.
            pub fn span( &self ) -> Span {
                match self {
                    TokenTree::Group(t) => t.span(),
                    TokenTree::Ident(t) => t.span(),
                    TokenTree::Punct(t) => t.span(),
                    TokenTree::Literal(t) => t.span(),
                }
            }
            /// Configures the span for *only this token*
            pub fn set_span(&mut self, span: Span) {
                match self {
                    TokenTree::Group(t) => t.set_span(span),
                    TokenTree::Ident(t) => t.set_span(span),
                    TokenTree::Punct(t) => t.set_span(span),
                    TokenTree::Literal(t) => t.set_span(span),
                }
            }
        }

        impl From<Group> for TokenTree
        {
            fn from(g: Group) -> Self {
                TokenTree::Group(g)
            }
        }

        impl From<Ident> for TokenTree
        {
            fn from(g: Ident) -> Self {
                TokenTree::Ident(g)
            }
        }

        impl From<Punct> for TokenTree
        {
            fn from(g: Punct) -> Self {
                TokenTree::Punct(g)
            }
        }

        impl From<Literal> for TokenTree
        {
            fn from(g: Literal) -> Self {
                TokenTree::Literal(g)
            }
        }
        /**
            Prints the token tree as a string that is losslessly convertible back into the same tree (modulo spans),
            except for `TokenTree::Group`s with `Delimiter::None` delimiters and negative numeric literals. */
        impl Display for TokenTree       
        {
            fn fmt( &self, f: &mut fmt::Formatter) -> fmt::Result
                {match self {
                    TokenTree::Group(t) => Display::fmt(t, f),
                    TokenTree::Ident(t) => Display::fmt(t, f),
                    TokenTree::Punct(t) => Display::fmt(t, f),
                    TokenTree::Literal(t) => Display::fmt(t, f),
                }
            }
        }
        /// Prints token tree in a form convenient for debugging.
        impl Debug for TokenTree
        {
            fn fmt( &self, f: &mut fmt::Formatter) -> fmt::Result {
               
               
                match self {
                    TokenTree::Group(t) => Debug::fmt(t, f),
                    TokenTree::Ident(t) =>
                    {
                        let mut debug = f.debug_struct("Ident");
                        debug.field("sym", &format_args!("{}", t));
                        imp::debug_span_field_if_nontrivial(&mut debug, t.span().inner);
                        debug.finish()
                    }
                    TokenTree::Punct(t) => Debug::fmt(t, f),
                    TokenTree::Literal(t) => Debug::fmt(t, f),
                }
            }
        }
        /// A delimited token stream.
        #[derive(Clone)]
        pub struct Group {
            inner: imp::Group,
        }
        /// Describes how a sequence of token trees is delimited.
        #[derive(Copy, Clone, Debug, Eq, PartialEq)]
        pub enum Delimiter 
        {
            /// `( ... )`
            Parenthesis,
            /// `{ ... }`
            Brace,
            /// `[ ... ]`
            Bracket,
            /// `∅ ... ∅
            /// Invisible delimiters may not survive roundtrip of a token stream through a string instead in this context.
            None,
        }

        impl Group
        {
            fn _new(inner: imp::Group) -> Self {
                Group { inner }
            }
            fn _new_fallback(inner: fallback::Group) -> Self {
                Group {
                    inner: imp::Group::from(inner),
                }
            }
            /// Creates a new `Group` with the given delimiter and token stream
            pub fn new(delimiter: Delimiter, stream: TokenStream) -> Self {
                Group {
                    inner: imp::Group::new(delimiter, stream.inner),
                }
            }
            /// Returns the punctuation used as the delimiter for this group: a set of
            /// parentheses, square brackets, or curly braces.
            pub fn delimiter( &self ) -> Delimiter
            {
                self.inner.delimiter()
            }
            /// Returns the `TokenStream` of tokens that are delimited in this `Group`
            pub fn stream( &self ) -> TokenStream {
                TokenStream::_new(self.inner.stream())
            }
            /// Returns the span for the delimiters of this token stream, spanning the entire `Group`
            pub fn span( &self ) -> Span {
                Span::_new(self.inner.span())
            }
            /// Returns the span pointing to the opening delimiter of this group
            pub fn span_open( &self ) -> Span {
                Span::_new(self.inner.span_open())
            }
            /// Returns the span pointing to the closing delimiter of this group
            pub fn span_close( &self ) -> Span {
                Span::_new(self.inner.span_close())
            }
            /// Returns an object that holds this group's `span_open()` and `span_close()` together.
            pub fn delim_span( &self ) -> ::process::macros::extra::DelimSpan
            {
                ::process::macros::extra::DelimSpan::new(&self.inner)
            }
            /// Configures the span for this `Group`'s delimiters, but not its internal
            /// tokens
            pub fn set_span(&mut self, span: Span)
            {
                self.inner.set_span(span.inner);
            }
        }
        /// Prints the group as a string that should be losslessly convertible back
        /// into the same group (modulo spans), except for possibly `TokenTree::Group`s
        /// with `Delimiter::None` delimiters.
        impl Display for Group
        {
            fn fmt( &self, formatter: &mut fmt::Formatter) -> fmt::Result
                {Display::fmt(&self.inner, formatter)
            }
        }

        impl Debug for Group
        {
            fn fmt( &self, formatter: &mut fmt::Formatter) -> fmt::Result
                {Debug::fmt(&self.inner, formatter)
            }
        }
        /// A `Punct` is a single punctuation character like `+`, `-` or `#`.
        #[derive(Clone)]
        pub struct Punct 
        {
            ch: char,
            spacing: Spacing,
            span: Span,
        }
        /// Whether a `Punct` is followed immediately by another `Punct` or followed by another token or whitespace.
        #[derive(Copy, Clone, Debug, Eq, PartialEq)]
        pub enum Spacing 
        {
            /// E.g. `+` is `Alone` in `+ =`, `+ident` or `+()`.
            Alone,
            /// E.g. `+` is `Joint` in `+=` or `'` is `Joint` in `'#`
            Joint,
        }

        impl Punct
        {
            /// Creates a new `Punct` from the given character and spacing
            /// which can be further configured with the `set_span` method below.
            pub fn new(ch: char, spacing: Spacing) -> Self {
                if let '!' | '#' | '$' | '%' | '&' | '\'' | '*' | '+' | ',' | '-' | '.' | '/' | ':' | ';'
                | '<' | '=' | '>' | '?' | '@' | '^' | '|' | '~' = ch
                {
                    Punct {
                        ch,
                        spacing,
                        span: Span::call_site(),
                    }
                } else {
                    panic!("unsupported proc macro punctuation character {:?}", ch);
                }
            }
            /// Returns the value of this punctuation character as `char`.
            pub fn as_char( &self ) -> char
            {
                self.ch
            }
            /// Returns the spacing of this punctuation character, indicating whether
            /// it's immediately followed by another `Punct` in the token stream, so
            /// they can potentially be combined into a multicharacter operator
            /// (`Joint`), or it's followed by some other token or whitespace (`Alone`)
            /// so the operator has certainly ended.
            pub fn spacing( &self ) -> Spacing
            {
                self.spacing
            }
            /// Returns the span for this punctuation character.
            pub fn span( &self ) -> Span
            {
                self.span
            }
            /// Configure the span for this punctuation character.
            pub fn set_span(&mut self, span: Span)
            {
                self.span = span;
            }
        }
        /// Prints the punctuation character as a string that is losslessly convertible back into the same character.
        impl Display for Punct
        {
            fn fmt( &self, f: &mut fmt::Formatter) -> fmt::Result
                {Display::fmt(&self.ch, f)
            }
        }

        impl Debug for Punct       
        {
            fn fmt( &self, fmt: &mut fmt::Formatter) -> fmt::Result
            {
                let mut debug = fmt.debug_struct("Punct");
                debug.field("char", &self.ch);
                debug.field("spacing", &self.spacing);
                imp::debug_span_field_if_nontrivial(&mut debug, self.span.inner);
                debug.finish()
            }
        }
        /// A word of Rust code, which may be a keyword or legal variable name.
        #[derive(Clone)]
        pub struct Ident
        {
            inner: imp::Ident,
            _marker: marker::ProcMacroAutoTraits,
        }

        impl Ident       
        {
            fn _new(inner: imp::Ident) -> Self {
                Ident {
                    inner,
                    _marker: marker::MARKER,
                }
            }
            fn _new_fallback(inner: fallback::Ident) -> Self {
                Ident {
                    inner: imp::Ident::from(inner),
                    _marker: marker::MARKER,
                }
            }
            /// Creates a new `Ident` with the given `string` as well as the specified `span`
            #[track_caller] pub fn new(string: &str, span: Span) -> Self {
                Ident::_new(imp::Ident::new_checked(string, span.inner))
            }
            /// Same as `Ident::new`, but creates a raw identifier (`r#ident`).
            #[track_caller] pub fn new_raw(string: &str, span: Span) -> Self {
                Ident::_new(imp::Ident::new_raw_checked(string, span.inner))
            }
            /// Returns the span of this `Ident`.
            pub fn span( &self ) -> Span {
                Span::_new(self.inner.span())
            }
            /// Configures the span of this `Ident`, possibly changing its hygiene context.
            pub fn set_span(&mut self, span: Span)
            {
                self.inner.set_span(span.inner);
            }
        }

        impl PartialEq for Ident       
        {
            fn eq( &self, other: &Ident) -> bool
            {
                self.inner == other.inner
            }
        }

        impl<T> PartialEq<T> for Ident where
        T: ?Sized + AsRef<str>       
        {
            fn eq( &self, other: &T) -> bool
            {
                self.inner == other
            }
        }

        impl Eq for Ident {}

        impl PartialOrd for Ident       
        {
            fn partial_cmp( &self, other: &Ident) -> Option<Ordering>
                    {
                Some(self.cmp(other))
            }
        }

        impl Ord for Ident 
       
        {
            fn cmp( &self, other: &Ident) -> Ordering
            {
                self.to_string().cmp(&other.to_string())
            }
        }

        impl Hash for Ident       
        {
            fn hash<H: Hasher>( &self, hasher: &mut H)
            {
                self.to_string().hash(hasher);
            }
        }
        /// Prints the identifier as a string that should be losslessly convertible back into the same identifier.
        impl Display for Ident        
        {
            fn fmt( &self, f: &mut fmt::Formatter) -> fmt::Result
                {Display::fmt(&self.inner, f)
            }
        }

        impl Debug for Ident       
        {
            fn fmt( &self, f: &mut fmt::Formatter) -> fmt::Result
                {Debug::fmt(&self.inner, f)
            }
        }
        /// A literal string (`"hello"`), byte string (`b"hello"`), character (`'a'`),
        /// byte character (`b'a'`), an integer or floating point number with or without
        /// a suffix (`1`, `1u8`, `2.3`, `2.3f32`).
        #[derive(Clone)]
        pub struct Literal
        {
            inner: imp::Literal,
            _marker: marker::ProcMacroAutoTraits,
        }

        macro_rules! suffixed_int_literals
        {
            ($($name:ident => $kind:ident,)*) => 
            ($(
                /// Creates a new suffixed integer literal with the specified value.
                pub fn $name(n: $kind) -> Literal 
                {
                    Literal::_new(imp::Literal::$name(n))
                }
            )*);
        }

        macro_rules! unsuffixed_int_literals 
        {
            ($($name:ident => $kind:ident,)*) => ($(
                /// Creates a new unsuffixed integer literal with the specified value.
                pub fn $name(n: $kind) -> Literal {
                    Literal::_new(imp::Literal::$name(n))
                }
            )*)
        }

        impl Literal        
        {
            fn _new(inner: imp::Literal) -> Self 
            {
                Literal {
                    inner,
                    _marker: ::marker::MARKER,
                }
            }
            fn _new_fallback(inner: fallback::Literal) -> Self 
            {
                Literal {
                    inner: imp::Literal::from(inner),
                    _marker: ::marker::MARKER,
                }
            }
            suffixed_int_literals! 
            {
                u8_suffixed => u8,
                u16_suffixed => u16,
                u32_suffixed => u32,
                u64_suffixed => u64,
                u128_suffixed => u128,
                usize_suffixed => usize,
                i8_suffixed => i8,
                i16_suffixed => i16,
                i32_suffixed => i32,
                i64_suffixed => i64,
                i128_suffixed => i128,
                isize_suffixed => isize,
            }
            unsuffixed_int_literals! 
            {
                u8_unsuffixed => u8,
                u16_unsuffixed => u16,
                u32_unsuffixed => u32,
                u64_unsuffixed => u64,
                u128_unsuffixed => u128,
                usize_unsuffixed => usize,
                i8_unsuffixed => i8,
                i16_unsuffixed => i16,
                i32_unsuffixed => i32,
                i64_unsuffixed => i64,
                i128_unsuffixed => i128,
                isize_unsuffixed => isize,
            }
            /// Creates a new unsuffixed floating-point literal
            pub fn f64_unsuffixed(f: f64) -> Literal 
            {
                assert!(f.is_finite());
                Literal::_new(imp::Literal::f64_unsuffixed(f))
            }
            /// Creates a new suffixed floating-point literal

            pub fn f64_suffixed(f: f64) -> Literal 
            {
                assert!(f.is_finite());
                Literal::_new(imp::Literal::f64_suffixed(f))
            }
            /// Creates a new unsuffixed floating-point literal
            pub fn f32_unsuffixed(f: f32) -> Literal 
            {
                assert!(f.is_finite());
                Literal::_new(imp::Literal::f32_unsuffixed(f))
            }
            /// Creates a new suffixed floating-point literal
            pub fn f32_suffixed(f: f32) -> Literal 
            {
                assert!(f.is_finite());
                Literal::_new(imp::Literal::f32_suffixed(f))
            }
            /// String literal.
            pub fn string(string: &str) -> Literal 
            {
                Literal::_new(imp::Literal::string(string))
            }
            /// Character literal.
            pub fn character(ch: char) -> Literal 
            {
                Literal::_new(imp::Literal::character(ch))
            }
            /// Byte character literal.
            pub fn byte_character(byte: u8) -> Literal 
            {
                Literal::_new(imp::Literal::byte_character(byte))
            }
            /// Byte string literal.
            pub fn byte_string(bytes: &[u8]) -> Literal 
            {
                Literal::_new(imp::Literal::byte_string(bytes))
            }
            /// C string literal.
            pub fn c_string( string:&::ffi::CStr ) -> Literal 
            {
                Literal::_new(imp::Literal::c_string(string))
            }
            /// Returns the span encompassing this literal.
            pub fn span( &self ) -> Span {
                Span::_new(self.inner.span())
            }
            /// Configures the span associated for this literal.
            pub fn set_span(&mut self, span: Span)
            {
                self.inner.set_span(span.inner);
            }
            /// Returns a `Span` that is a subset of `self.span()` containing only
            /// the source bytes in range `range`.
            pub fn subspan<R: RangeBounds<usize>>( &self, range: R) -> Option<Span> 
           
            {
                self.inner.subspan(range).map(Span::_new)
            }
            pub unsafe fn from_str_unchecked(repr: &str) -> Self 
            {
                Literal::_new(unsafe { imp::Literal::from_str_unchecked(repr) })
            }
        }

        impl ::str::FromStr for Literal 
        {
            type Err = LexError;
            fn from_str(repr: &str) -> Result<Self, LexError>
            {
                match imp::Literal::from_str_checked(repr) {
                    Ok(lit) => Ok(Literal::_new(lit)),
                    Err(lex) => Err(LexError {
                        inner: lex,
                        _marker: ::marker::MARKER,
                    }),
                }
            }
        }

        impl Debug for Literal       
        {
            fn fmt( &self, f: &mut fmt::Formatter) -> fmt::Result
                {Debug::fmt(&self.inner, f)
            }
        }

        impl Display for Literal       
        {
            fn fmt( &self, f: &mut fmt::Formatter) -> fmt::Result
                {Display::fmt(&self.inner, f)
            }
        }
    }
}

pub mod ptr
{
    pub use std::ptr::{ * };
}

pub mod quote
{
    /*!
    Provides the [`quote!`] macro for turning Rust syntax tree data structures into tokens of source code. */
    use ::
    {
        *,
    };
    /*
    */
    pub mod ext
    {
        use ::
        {
            process::macros::{ TokenStream, TokenTree },
            quote::{ ToTokens },
            *,
        };
        /*
        */
        /// TokenStream extension trait with methods for appending tokens.
        pub trait TokenStreamExt: private::Sealed
        {
            /// For use by `ToTokens` implementations.
            fn append<U>(&mut self, token: U) where U: Into<TokenTree>;
            /// For use by `ToTokens` implementations.
            fn append_all<I>(&mut self, iter: I) where
            I: IntoIterator,
            I::Item: ToTokens;
            /// For use by `ToTokens` implementations.
            fn append_separated<I, U>(&mut self, iter: I, op: U) where
            I: IntoIterator,
            I::Item: ToTokens,
            U: ToTokens;
            /// For use by `ToTokens` implementations.
            fn append_terminated<I, U>(&mut self, iter: I, term: U) where
            I: IntoIterator,
            I::Item: ToTokens,
            U: ToTokens;
        }

        impl TokenStreamExt for TokenStream
        {
            fn append<U>(&mut self, token: U) where
                U: Into<TokenTree>,
           
            {
                self.extend(iter::once(token.into()));
            }
            fn append_all<I>(&mut self, iter: I) where
                I: IntoIterator,
                I::Item: ToTokens,
            {
                for token in iter {
                    token.to_tokens(self);
                }
            }
            fn append_separated<I, U>(&mut self, iter: I, op: U) where
                I: IntoIterator,
                I::Item: ToTokens,
                U: ToTokens,
            {
                for (i, token) in iter.into_iter().enumerate() {
                    if i > 0 {
                        op.to_tokens(self);
                    }
                    token.to_tokens(self);
                }
            }
            fn append_terminated<I, U>(&mut self, iter: I, term: U) where
                I: IntoIterator,
                I::Item: ToTokens,
                U: ToTokens,
            {
                for token in iter {
                    token.to_tokens(self);
                    term.to_tokens(self);
                }
            }
        }

        mod private 
        {
            use ::process::macros::TokenStream;

            pub trait Sealed {}
            impl Sealed for TokenStream {}
        }
    } pub use self::ext::TokenStreamExt;
    
    pub mod ident_fragment
    {
        use ::
        {
            borrow::{ Cow },
            process::macros::{ Ident, Span },
            *,
        };
        /*
        */
        /// Specialized formatting trait used by `format_ident!`.
        pub trait IdentFragment
        {
            /// Format this value as an identifier fragment.
            fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result;
            /// Span associated with this `IdentFragment`.
            fn span(&self) -> Option<Span> {
                None
            }
        }

        impl<T: IdentFragment + ?Sized> IdentFragment for &T 
        {
            fn span(&self) -> Option<Span> {
                <T as IdentFragment>::span(*self)
            }
            fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result
                {IdentFragment::fmt(*self, f)
            }
        }

        impl<T: IdentFragment + ?Sized> IdentFragment for &mut T 
        {
            fn span(&self) -> Option<Span> {
                <T as IdentFragment>::span(*self)
            }
            fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result
                {IdentFragment::fmt(*self, f)
            }
        }

        impl IdentFragment for Ident 
        {
            fn span(&self) -> Option<Span> {
                Some(self.span())
            }
            fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result
                {let id = self.to_string();
                if let Some(id) = id.strip_prefix("r#") {
                    fmt::Display::fmt(id, f)
                } else {
                    fmt::Display::fmt(&id[..], f)
                }
            }
        }

        impl<T> IdentFragment for Cow<'_, T> where
        T: IdentFragment + ToOwned + ?Sized,
        {
            fn span(&self) -> Option<Span> {
                T::span(self)
            }
            fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result
                {T::fmt(self, f)
            }
        }
        
        macro_rules! ident_fragment_display
        {
            ($($T:ty),*) => {
                $(
                    impl IdentFragment for $T {
                        fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result
                {            fmt::Display::fmt(self, f)
                        }
                    }
                )*
            };
        }

        ident_fragment_display!(bool, str, String, char);
        ident_fragment_display!(u8, u16, u32, u64, u128, usize);
    } pub use self::ident_fragment::IdentFragment;
    
    pub mod to_tokens
    {
        use ::
        {
            borrow::{ Cow },
            process::macros::{ Group, Ident, Literal, Punct, Span, TokenStream, TokenTree },
            quote::{ TokenStreamExt },
            rc::{ Rc },
            *,
        };
        /*
        */
        /// Types that can be interpolated inside a `quote!` invocation.
        pub trait ToTokens {
            /// Write `self` to the given `TokenStream`.
            fn to_tokens(&self, tokens: &mut TokenStream);
            /// Convert `self` directly into a `TokenStream` object.
            fn to_token_stream(&self) -> TokenStream
            {
                let mut tokens = TokenStream::new();
                self.to_tokens(&mut tokens);
                tokens
            }
            /// Convert `self` directly into a `TokenStream` object.
            fn into_token_stream(self) -> TokenStream where
            Self: Sized,
           
            {
                self.to_token_stream()
            }
        }

        impl<'a, T: ?Sized + ToTokens> ToTokens for &'a T {
            fn to_tokens(&self, tokens: &mut TokenStream) {
                (**self).to_tokens(tokens);
            }
        }

        impl<'a, T: ?Sized + ToTokens> ToTokens for &'a mut T {
            fn to_tokens(&self, tokens: &mut TokenStream) {
                (**self).to_tokens(tokens);
            }
        }

        impl<'a, T: ?Sized + ToOwned + ToTokens> ToTokens for Cow<'a, T>
        {
            fn to_tokens(&self, tokens: &mut TokenStream) {
                (**self).to_tokens(tokens);
            }
        }

        impl<T: ?Sized + ToTokens> ToTokens for Box<T>
        {
            fn to_tokens(&self, tokens: &mut TokenStream) {
                (**self).to_tokens(tokens);
            }
        }

        impl<T: ?Sized + ToTokens> ToTokens for Rc<T>
        {
            fn to_tokens(&self, tokens: &mut TokenStream) {
                (**self).to_tokens(tokens);
            }
        }

        impl<T: ToTokens> ToTokens for Option<T>
        {
            fn to_tokens(&self, tokens: &mut TokenStream) {
                if let Some(ref t) = *self {
                    t.to_tokens(tokens);
                }
            }
        }

        impl ToTokens for str 
        {
            fn to_tokens(&self, tokens: &mut TokenStream) {
                tokens.append(Literal::string(self));
            }
        }

        impl ToTokens for String 
        {
            fn to_tokens(&self, tokens: &mut TokenStream)
            {
                self.as_str().to_tokens(tokens);
            }
        }

        macro_rules! primitive 
        {
            ($($t:ident => $name:ident)*) => {
                $(
                    impl ToTokens for $t {
                        fn to_tokens(&self, tokens: &mut TokenStream) {
                            tokens.append(Literal::$name(*self));
                        }
                    }
                )*
            };
        }

        primitive! 
        {
            i8 => i8_suffixed
            i16 => i16_suffixed
            i32 => i32_suffixed
            i64 => i64_suffixed
            i128 => i128_suffixed
            isize => isize_suffixed

            u8 => u8_suffixed
            u16 => u16_suffixed
            u32 => u32_suffixed
            u64 => u64_suffixed
            u128 => u128_suffixed
            usize => usize_suffixed

            f32 => f32_suffixed
            f64 => f64_suffixed
        }

        impl ToTokens for char 
        {
            fn to_tokens(&self, tokens: &mut TokenStream) {
                tokens.append(Literal::character(*self));
            }
        }

        impl ToTokens for bool 
        {
            fn to_tokens(&self, tokens: &mut TokenStream) {
                let word = if *self { "true" } else { "false" };
                tokens.append(Ident::new(word, Span::call_site()));
            }
        }

        impl ToTokens for Group 
        {
            fn to_tokens(&self, tokens: &mut TokenStream) {
                tokens.append(self.clone());
            }
        }

        impl ToTokens for Ident 
        {
            fn to_tokens(&self, tokens: &mut TokenStream) {
                tokens.append(self.clone());
            }
        }

        impl ToTokens for Punct 
        {
            fn to_tokens(&self, tokens: &mut TokenStream) {
                tokens.append(self.clone());
            }
        }

        impl ToTokens for Literal 
        {
            fn to_tokens(&self, tokens: &mut TokenStream) {
                tokens.append(self.clone());
            }
        }

        impl ToTokens for TokenTree 
        {
            fn to_tokens(&self, dst: &mut TokenStream) {
                dst.append(self.clone());
            }
        }

        impl ToTokens for TokenStream 
        {
            fn to_tokens(&self, dst: &mut TokenStream) {
                dst.extend(iter::once(self.clone()));
            }
            fn into_token_stream(self) -> TokenStream { self }
        }
    } pub use self::to_tokens::ToTokens;
    
    pub mod __private
    {
        use ::
        {
            ops::{ BitOr },
            process::macros::{ Group, Ident, Punct, Spacing, TokenTree },
            quote::{ IdentFragment, ToTokens, TokenStreamExt },
            *,
        }; use self::get_span::{GetSpan, GetSpanBase, GetSpanInner};
        /*
        */
        pub type Delimiter = process::macros::Delimiter;
        pub type Span = process::macros::Span;
        pub type TokenStream = process::macros::TokenStream;
        
        macro_rules! push_punct
        {
            ($name:ident $spanned:ident $char1:tt) => {
                    pub fn $name(tokens: &mut TokenStream)
                {
                    tokens.append(Punct::new($char1, Spacing::Alone));
                }
                    pub fn $spanned(tokens: &mut TokenStream, span: Span) {
                    let mut punct = Punct::new($char1, Spacing::Alone);
                    punct.set_span(span);
                    tokens.append(punct);
                }
            };
            ($name:ident $spanned:ident $char1:tt $char2:tt) => {
                    pub fn $name(tokens: &mut TokenStream)
                {
                    tokens.append(Punct::new($char1, Spacing::Joint));
                    tokens.append(Punct::new($char2, Spacing::Alone));
                }
                    pub fn $spanned(tokens: &mut TokenStream, span: Span) {
                    let mut punct = Punct::new($char1, Spacing::Joint);
                    punct.set_span(span);
                    tokens.append(punct);
                    let mut punct = Punct::new($char2, Spacing::Alone);
                    punct.set_span(span);
                    tokens.append(punct);
                }
            };
            ($name:ident $spanned:ident $char1:tt $char2:tt $char3:tt) => {
                    pub fn $name(tokens: &mut TokenStream)
                {
                    tokens.append(Punct::new($char1, Spacing::Joint));
                    tokens.append(Punct::new($char2, Spacing::Joint));
                    tokens.append(Punct::new($char3, Spacing::Alone));
                }
                    pub fn $spanned(tokens: &mut TokenStream, span: Span) {
                    let mut punct = Punct::new($char1, Spacing::Joint);
                    punct.set_span(span);
                    tokens.append(punct);
                    let mut punct = Punct::new($char2, Spacing::Joint);
                    punct.set_span(span);
                    tokens.append(punct);
                    let mut punct = Punct::new($char3, Spacing::Alone);
                    punct.set_span(span);
                    tokens.append(punct);
                }
            };
        }

        pub struct HasIterator;
        pub struct ThereIsNoIteratorInRepetition;

        impl BitOr<ThereIsNoIteratorInRepetition> for ThereIsNoIteratorInRepetition {
            type Output = ThereIsNoIteratorInRepetition;
            fn bitor(self, _rhs: ThereIsNoIteratorInRepetition) -> ThereIsNoIteratorInRepetition {
                ThereIsNoIteratorInRepetition
            }
        }

        impl BitOr<ThereIsNoIteratorInRepetition> for HasIterator {
            type Output = HasIterator;
            fn bitor(self, _rhs: ThereIsNoIteratorInRepetition) -> HasIterator {
                HasIterator
            }
        }

        impl BitOr<HasIterator> for ThereIsNoIteratorInRepetition {
            type Output = HasIterator;
            fn bitor(self, _rhs: HasIterator) -> HasIterator {
                HasIterator
            }
        }

        impl BitOr<HasIterator> for HasIterator {
            type Output = HasIterator;
            fn bitor(self, _rhs: HasIterator) -> HasIterator {
                HasIterator
            }
        }
        /// Extension traits used by the implementation of `quote!`.
        pub mod ext
        {
            use ::
            {
                collections::btree_set::{ self, BTreeSet },
                quote::{ ToTokens },
                *,
            };
            /**/
            use super::RepInterp;
            use super::{HasIterator as HasIter, ThereIsNoIteratorInRepetition as DoesNotHaveIter};
            /// Extension trait providing the `quote_into_iter` method on iterators.
            pub trait RepIteratorExt: Iterator + Sized {
                fn quote_into_iter(self) -> (Self, HasIter) {
                    (self, HasIter)
                }
            }
            
            impl<T: Iterator> RepIteratorExt for T {}
            /// Extension trait providing the `quote_into_iter` method for non-iterable types.
            pub trait RepToTokensExt {
                /// Pretend to be an iterator for the purposes of `quote_into_iter`.
                fn next(&self) -> Option<&Self> {
                    Some(self)
                }
                fn quote_into_iter(&self) -> (&Self, DoesNotHaveIter) {
                    (self, DoesNotHaveIter)
                }
            }
            
            impl<T: ToTokens + ?Sized> RepToTokensExt for T {}
            /// Extension trait providing the `quote_into_iter` method for types that can be referenced as an iterator.
            pub trait RepAsIteratorExt<'q>
            {
                type Iter: Iterator;
                fn quote_into_iter(&'q self) -> (Self::Iter, HasIter);
            }
            
            impl<'q, 'a, T: RepAsIteratorExt<'q> + ?Sized> RepAsIteratorExt<'q> for &'a T
            {
                type Iter = T::Iter;
                fn quote_into_iter(&'q self) -> (Self::Iter, HasIter) {
                    <T as RepAsIteratorExt>::quote_into_iter(*self)
                }
            }
            
            impl<'q, 'a, T: RepAsIteratorExt<'q> + ?Sized> RepAsIteratorExt<'q> for &'a mut T {
                type Iter = T::Iter;
                fn quote_into_iter(&'q self) -> (Self::Iter, HasIter) {
                    <T as RepAsIteratorExt>::quote_into_iter(*self)
                }
            }
            
            impl<'q, T: 'q> RepAsIteratorExt<'q> for [T] {
                type Iter = slice::Iter<'q, T>;
                fn quote_into_iter(&'q self) -> (Self::Iter, HasIter) {
                    (self.iter(), HasIter)
                }
            }
            
            impl<'q, T: 'q> RepAsIteratorExt<'q> for Vec<T>
            {
                type Iter = slice::Iter<'q, T>;
                fn quote_into_iter(&'q self) -> (Self::Iter, HasIter) {
                    (self.iter(), HasIter)
                }
            }
            
            impl<'q, T: 'q> RepAsIteratorExt<'q> for BTreeSet<T>
            {
                type Iter = btree_set::Iter<'q, T>;
                fn quote_into_iter(&'q self) -> (Self::Iter, HasIter) {
                    (self.iter(), HasIter)
                }
            }
            
            impl<'q, T: RepAsIteratorExt<'q>> RepAsIteratorExt<'q> for RepInterp<T>
            {
                type Iter = T::Iter;
                fn quote_into_iter(&'q self) -> (Self::Iter, HasIter) {
                    self.0.quote_into_iter()
                }
            }
        }

        #[derive(Copy, Clone)]
        pub struct RepInterp<T>(pub T);

        impl<T> RepInterp<T>
        {
            pub fn next(self) -> Option<T>
            {
                Some(self.0)
            }
        }

        impl<T: Iterator> Iterator for RepInterp<T>
        {
            type Item = T::Item;
            fn next(&mut self) -> Option<Self::Item>
            {
                self.0.next()
            }
        }

        impl<T: ToTokens> ToTokens for RepInterp<T>
        {
            fn to_tokens(&self, tokens: &mut TokenStream)
            {
                self.0.to_tokens(tokens);
            }
        }
        
        #[inline] pub fn get_span<T>(span: T) -> GetSpan<T> 
        {
            GetSpan(GetSpanInner(GetSpanBase(span)))
        }

        mod get_span
        {
            use ::
            {
                ops::{ Deref },
                process::macros::
                {
                    extra::DelimSpan, Span
                },
                *,
            };
            /*
            */
            pub struct GetSpan<T>(pub GetSpanInner<T>);

            pub struct GetSpanInner<T>(pub GetSpanBase<T>);

            pub struct GetSpanBase<T>(pub T);

            impl GetSpan<Span> {
                #[inline] pub fn __into_span(self) -> Span {
                    ((self.0).0).0
                }
            }
            impl GetSpanInner<DelimSpan> {
                #[inline] pub fn __into_span(&self) -> Span {
                    (self.0).0.join()
                }
            }
            
            impl<T> GetSpanBase<T> {
                #[allow(clippy::unused_self)]
                pub fn __into_span(&self) -> T {
                    unreachable!()
                }
            }
            
            impl<T> Deref for GetSpan<T>
            {
                type Target = GetSpanInner<T>;

                #[inline] fn deref(&self) -> &Self::Target {
                    &self.0
                }
            }
            
            impl<T> Deref for GetSpanInner<T>
            {
                type Target = GetSpanBase<T>;

                #[inline] fn deref(&self) -> &Self::Target {
                    &self.0
                }
            }
        }

        pub fn push_group(tokens: &mut TokenStream, delimiter: Delimiter, inner: TokenStream) 
        {
            tokens.append(Group::new(delimiter, inner));
        }

        pub fn push_group_spanned
        (
            tokens: &mut TokenStream,
            span: Span,
            delimiter: Delimiter,
            inner: TokenStream,
        ) 
        {
            let mut g = Group::new(delimiter, inner);
            g.set_span(span);
            tokens.append(g);
        }

        pub fn parse(tokens: &mut TokenStream, s: &str)
        {
            let s: TokenStream = s.parse().expect("invalid token stream");
            tokens.extend(iter::once(s));
        }

        pub fn parse_spanned(tokens: &mut TokenStream, span: Span, s: &str)
        {
            let s: TokenStream = s.parse().expect("invalid token stream");
            tokens.extend(s.into_iter().map(|t| respan_token_tree(t, span)));
        }
        
        fn respan_token_tree(mut token: TokenTree, span: Span) -> TokenTree
        {
            match &mut token {
                TokenTree::Group(g) => {
                    let stream = g
                        .stream()
                        .into_iter()
                        .map(|token| respan_token_tree(token, span))
                        .collect();
                    *g = Group::new(g.delimiter(), stream);
                    g.set_span(span);
                }
                other => other.set_span(span),
            }
            token
        }

        pub fn push_ident(tokens: &mut TokenStream, s: &str)
        {
            let span = Span::call_site();
            push_ident_spanned(tokens, span, s);
        }

        pub fn push_ident_spanned(tokens: &mut TokenStream, span: Span, s: &str)
        {
            tokens.append(ident_maybe_raw(s, span));
        }

        pub fn push_lifetime(tokens: &mut TokenStream, lifetime: &str)
        {
            struct Lifetime<'a> {
                name: &'a str,
                state: u8,
            }
            
            impl<'a> Iterator for Lifetime<'a>
            {
                type Item = TokenTree;
                fn next(&mut self) -> Option<Self::Item> {
                    match self.state {
                        0 => {
                            self.state = 1;
                            Some(TokenTree::Punct(Punct::new('\'', Spacing::Joint)))
                        }
                        1 => {
                            self.state = 2;
                            Some(TokenTree::Ident(Ident::new(self.name, Span::call_site())))
                        }
                        _ => None,
                    }
                }
            }
            tokens.extend(Lifetime {
                name: &lifetime[1..],
                state: 0,
            });
        }

        pub fn push_lifetime_spanned(tokens: &mut TokenStream, span: Span, lifetime: &str)
        {
            struct Lifetime<'a> {
                name: &'a str,
                span: Span,
                state: u8,
            }
            
            impl<'a> Iterator for Lifetime<'a>
            {
                type Item = TokenTree;
                fn next(&mut self) -> Option<Self::Item> {
                    match self.state {
                        0 => {
                            self.state = 1;
                            let mut apostrophe = Punct::new('\'', Spacing::Joint);
                            apostrophe.set_span(self.span);
                            Some(TokenTree::Punct(apostrophe))
                        }
                        1 => {
                            self.state = 2;
                            Some(TokenTree::Ident(Ident::new(self.name, self.span)))
                        }
                        _ => None,
                    }
                }
            }
            tokens.extend(Lifetime {
                name: &lifetime[1..],
                span,
                state: 0,
            });
        }

        push_punct!(push_add push_add_spanned '+');
        push_punct!(push_add_eq push_add_eq_spanned '+' '=');
        push_punct!(push_and push_and_spanned '&');
        push_punct!(push_and_and push_and_and_spanned '&' '&');
        push_punct!(push_and_eq push_and_eq_spanned '&' '=');
        push_punct!(push_at push_at_spanned '@');
        push_punct!(push_bang push_bang_spanned '!');
        push_punct!(push_caret push_caret_spanned '^');
        push_punct!(push_caret_eq push_caret_eq_spanned '^' '=');
        push_punct!(push_colon push_colon_spanned ':');
        push_punct!(push_colon2 push_colon2_spanned ':' ':');
        push_punct!(push_comma push_comma_spanned ',');
        push_punct!(push_div push_div_spanned '/');
        push_punct!(push_div_eq push_div_eq_spanned '/' '=');
        push_punct!(push_dot push_dot_spanned '.');
        push_punct!(push_dot2 push_dot2_spanned '.' '.');
        push_punct!(push_dot3 push_dot3_spanned '.' '.' '.');
        push_punct!(push_dot_dot_eq push_dot_dot_eq_spanned '.' '.' '=');
        push_punct!(push_eq push_eq_spanned '=');
        push_punct!(push_eq_eq push_eq_eq_spanned '=' '=');
        push_punct!(push_ge push_ge_spanned '>' '=');
        push_punct!(push_gt push_gt_spanned '>');
        push_punct!(push_le push_le_spanned '<' '=');
        push_punct!(push_lt push_lt_spanned '<');
        push_punct!(push_mul_eq push_mul_eq_spanned '*' '=');
        push_punct!(push_ne push_ne_spanned '!' '=');
        push_punct!(push_or push_or_spanned '|');
        push_punct!(push_or_eq push_or_eq_spanned '|' '=');
        push_punct!(push_or_or push_or_or_spanned '|' '|');
        push_punct!(push_pound push_pound_spanned '#');
        push_punct!(push_question push_question_spanned '?');
        push_punct!(push_rarrow push_rarrow_spanned '-' '>');
        push_punct!(push_larrow push_larrow_spanned '<' '-');
        push_punct!(push_rem push_rem_spanned '%');
        push_punct!(push_rem_eq push_rem_eq_spanned '%' '=');
        push_punct!(push_fat_arrow push_fat_arrow_spanned '=' '>');
        push_punct!(push_semi push_semi_spanned ';');
        push_punct!(push_shl push_shl_spanned '<' '<');
        push_punct!(push_shl_eq push_shl_eq_spanned '<' '<' '=');
        push_punct!(push_shr push_shr_spanned '>' '>');
        push_punct!(push_shr_eq push_shr_eq_spanned '>' '>' '=');
        push_punct!(push_star push_star_spanned '*');
        push_punct!(push_sub push_sub_spanned '-');
        push_punct!(push_sub_eq push_sub_eq_spanned '-' '=');

        pub fn push_underscore(tokens: &mut TokenStream)
        {
            push_underscore_spanned(tokens, Span::call_site());
        }

        pub fn push_underscore_spanned(tokens: &mut TokenStream, span: Span)
        {
            tokens.append(Ident::new("_", span));
        }
       
        pub fn mk_ident(id: &str, span: Option<Span>) -> Ident
        {
            let span = span.unwrap_or_else(Span::call_site);
            ident_maybe_raw(id, span)
        }

        fn ident_maybe_raw(id: &str, span: Span) -> Ident       
        {
            if let Some(id) = id.strip_prefix("r#") {
                Ident::new_raw(id, span)
            } else {
                Ident::new(id, span)
            }
        }
        
        #[derive(Copy, Clone)]
        pub struct IdentFragmentAdapter<T: IdentFragment>(pub T);

        impl<T: IdentFragment> IdentFragmentAdapter<T>
        {
            pub fn span(&self) -> Option<Span> { self.0.span() }
        }

        impl<T: IdentFragment> fmt::Display for IdentFragmentAdapter<T>
        {
            fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result { IdentFragment::fmt(&self.0, f) }
        }

        impl<T: IdentFragment + fmt::Octal> fmt::Octal for IdentFragmentAdapter<T>
        {
            fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result { fmt::Octal::fmt(&self.0, f) }
        }

        impl<T: IdentFragment + fmt::LowerHex> fmt::LowerHex for IdentFragmentAdapter<T>
        {
            fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result { fmt::LowerHex::fmt(&self.0, f) }
        }

        impl<T: IdentFragment + fmt::UpperHex> fmt::UpperHex for IdentFragmentAdapter<T>
        {
            fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result { fmt::UpperHex::fmt(&self.0, f) }
        }

        impl<T: IdentFragment + fmt::Binary> fmt::Binary for IdentFragmentAdapter<T>
        {
            fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result { fmt::Binary::fmt(&self.0, f) }
        }
    }
    
    pub mod spanned
    {
        use ::
        {
            process::macros::{ extra::DelimSpan, Span, TokenStream },
            quote::ToTokens,
            *,
        };
        /*
        */
       
        pub trait Spanned: private::Sealed {
            fn __span(&self) -> Span;
        }

        impl Spanned for Span {
            fn __span(&self) -> Span {
                *self
            }
        }

        impl Spanned for DelimSpan {
            fn __span(&self) -> Span
            {
                self.join()
            }
        }

        impl<T: ?Sized + ToTokens> Spanned for T {
            fn __span(&self) -> Span {
                join_spans(self.into_token_stream())
            }
        }

        fn join_spans(tokens: TokenStream) -> Span
        {
            let mut iter = tokens.into_iter().map(|tt| tt.span());

            let first = match iter.next() {
                Some(span) => span,
                None => return Span::call_site(),
            };

            iter.fold(None, |_prev, next| Some(next))
                .and_then(|last| first.join(last))
                .unwrap_or(first)
        }

        mod private
        {
            use ::
            {
                process::macros::
                {
                    extra::DelimSpan, Span
                },
                quote::{ ToTokens },
                *,
            };
            /*
            */
            pub trait Sealed {}
            impl Sealed for Span {}
            impl Sealed for DelimSpan {}
            
            impl<T: ?Sized + ToTokens> Sealed for T {}
        }
    }
    
}

pub mod rc
{
    pub use std::rc::{ * };
}

pub mod result
{
    pub use std::result::{ * };
    use ::
    {
        error::{ OverError, ParseError },
        *,
    };
    /// Result type for this crate.
    pub type OverResult<T> = Result<T, OverError>;    
    /*
    */
    pub type ParseResult<T> = Result<T, ParseError>;
}

pub mod slice
{
    pub use std::slice::{ * };
}

pub mod str
{
    pub use std::str::{ * };
    use ::
    {
        fs::{ File },
        io::{ Read, Write },
        *,
    };
    /// Reads a file and returns its contents in a string.
   
    pub fn read_from_file(fname: &str) -> io::Result<String>
    {
        let mut file = File::open(fname)?;

        let mut contents = String::new();
        let _ = file.read_to_string(&mut contents)?;

        Ok(contents)
    }
    /// Writes a string to a file.
    //pub fn write_file_str(fname: &str, contents: &str) -> io::Result<()>
    pub fn write_file_from(fname: &str, contents: &str) -> io::Result<()>
    {
       
        let mut file = File::create(fname)?;

        file.write_all(contents.as_bytes())?;

        Ok(())
    }
}

pub mod string
{
    pub use std::string::{ * };
}

pub mod sync
{
    pub use std::sync::{ * };
}

pub mod thread
{
    pub use std::thread::{ * };
}

pub mod tuples
{
    /*!
    Tuple | A container which can hold elements of different types.*/
    use ::
    {
        error::{ OverError },
        fmt::{ Format },
        result::{ OverResult },
        slice::{ Iter },
        sync::{ Arc },
        types::{ Type },
        values::{ Value },
        *,
    };
    /*
    use crate::{OverError, OverResult, INDENT_STEP};
    */
    #[derive(Clone, Debug)]
    struct TupInner 
    {
        vec: Vec<Value>,
        inner_tvec: Vec<Type>,
    }
    /// `Tup` struct.
    #[derive(Clone, Debug)]
    pub struct Tup 
    {
        inner: Arc<TupInner>,
    }

    impl Tup 
    {
        /// Returns a new `Tup` from the given vector of `Value`s.
        pub fn from_vec(values: Vec<Value>) -> Tup {
            let tvec: Vec<Type> = values.iter().map(|val| val.get_type()).collect();

            Tup {
                inner: Arc::new(TupInner {
                    vec: values,
                    inner_tvec: tvec,
                }),
            }
        }
        /// Returns a reference to the inner vec of this `Tup`.
        pub fn vec_ref(&self) -> &Vec<Value> {
            &self.inner.vec
        }
        /// Iterates over each `Value` in `self`, applying `Fn` `f`.
        pub fn with_each<F>(&self, mut f: F) where
            F: FnMut(&Value),
        {
            for value in &self.inner.vec {
                f(value)
            }
        }
        /// Gets the value at `index`.
        /// Returns an error if `index` is out of bounds.
        pub fn get(&self, index: usize) -> OverResult<Value> {
            if index >= self.inner.vec.len() {
                Err(OverError::TupOutOfBounds(index))
            } else {
                Ok(self.inner.vec[index].clone())
            }
        }
        /// Returns the type vector of this `Tup`.
        pub fn inner_type_vec(&self) -> Vec<Type> {
            self.inner.inner_tvec.clone()
        }
        /// Returns the length of this `Tup`.
        pub fn len(&self) -> usize {
            self.inner.vec.len()
        }
        /// Returns whether this `Tup` is empty.
        pub fn is_empty(&self) -> bool {
            self.inner.vec.is_empty()
        }
        /// Returns whether `self` and `other` point to the same data.
        pub fn ptr_eq(&self, other: &Self) -> bool {
            Arc::ptr_eq(&self.inner, &other.inner)
        }
        /// Returns an iterator over the Tup.
        pub fn iter(&self) -> Iter<Value> {
            self.vec_ref().iter()
        }
    }

    impl Default for Tup
    {
        fn default() -> Self { Self::from_vec( Vec::new() ) }
    }

    impl fmt::Display for Tup 
    {
        fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
            write!(f, "{}", self.format(true, INDENT_STEP))
        }
    }

    impl From<Vec<Value>> for Tup 
    {
        fn from(vec: Vec<Value>) -> Self {
            Self::from_vec(vec)
        }
    }

    impl PartialEq for Tup 
    {
        fn eq(&self, other: &Self) -> bool {
           
            if self.inner.inner_tvec != other.inner.inner_tvec {
                return false;
            }
            self.inner.vec == other.inner.vec
        }
    }
}

pub mod types
{
    /*!
    */
    use ::
    {
        *,
    };
    /*
    */
    /// Enum of possible types for `Value`s.
    #[derive(Clone, Debug)]
    pub enum Type 
    {
        /// A type used to indicate an empty Arr.
        Any,
        /// Null value.
        Null,

        /// A boolean type.
        Bool,
        /// A signed integer type.
        Int,
        /// A fractional type.
        Frac,
        /// A character type.
        Char,
        /// A string type.
        Str,

        /// An array type, containing the type of its sub-elements.
        Arr(Box<Type>),
        /// A tuple type, containing the types of its sub-elements.
        Tup(Vec<Type>),
        /// An object type.
        Obj,
    }

    impl Type {
        /// Returns true if this type is strictly the same as `other`.
        pub fn is(&self, other: &Type) -> bool 
        {
            use self::Type::*;

            match *self {
                Any => {
                    if let Any = *other {
                        true
                    } else {
                        false
                    }
                }
                Null => {
                    if let Null = *other {
                        true
                    } else {
                        false
                    }
                }
                Bool => {
                    if let Bool = *other {
                        true
                    } else {
                        false
                    }
                }
                Int => {
                    if let Int = *other {
                        true
                    } else {
                        false
                    }
                }
                Frac => {
                    if let Frac = *other {
                        true
                    } else {
                        false
                    }
                }
                Char => {
                    if let Char = *other {
                        true
                    } else {
                        false
                    }
                }
                Str => {
                    if let Str = *other {
                        true
                    } else {
                        false
                    }
                }
                Obj => {
                    if let Obj = *other {
                        true
                    } else {
                        false
                    }
                }
                Arr(ref t1) => {
                    if let Arr(ref t2) = *other {
                        t1.is(t2)
                    } else {
                        false
                    }
                }
                Tup(ref tvec1) => {
                    if let Tup(ref tvec2) = *other {
                        if tvec1.len() != tvec2.len() {
                            return false;
                        }
                        tvec1.iter().zip(tvec2.iter()).all(|(t1, t2)| t1.is(t2))
                    } else {
                        false
                    }
                }
            }
        }
        /// Returns true if this `Type` contains `Any`.
        pub fn has_any(&self) -> bool 
        {
            match *self {
                Type::Any => true,
                Type::Arr(ref t) => Self::has_any(t),
                Type::Tup(ref tvec) => tvec.iter().any(|t| Self::has_any(t)),
                _ => false,
            }
        }
        /// Returns a type with the most specificity that can be applied to the two input types as well
        /// as `true` if the returned type is not maximally specific, that is, it contains `Any`.
        pub fn most_specific(type1: &Type, type2: &Type) -> Option<(Type, bool)> 
        {
            use self::Type::*;

            if let Any = *type2 {
                return Some((type1.clone(), type1.has_any()));
            }
            match *type1 {
                Any => Some((type2.clone(), type2.has_any())),

                Arr(ref t1) => {
                    if let Arr(ref t2) = *type2 {
                        Self::most_specific(t1, t2).map(|(t, any)| (Arr(Box::new(t)), any))
                    } else {
                        None
                    }
                }
                Tup(ref tvec1) => {
                    if let Tup(ref tvec2) = *type2 {
                        if tvec1.len() == tvec2.len() {
                            let mut has_any = false;

                            let tvec: Option<Vec<Type>> = tvec1
                                .iter()
                                .zip(tvec2.iter())
                                .map(|(t1, t2)| {
                                    Self::most_specific(t1, t2).map(|(t, any)| {
                                        if !has_any && any {
                                            has_any = any;
                                        }
                                        t
                                    })
                                })
                                .collect();

                            tvec.map(|tvec| (Tup(tvec), has_any))
                        } else {
                            None
                        }
                    } else {
                        None
                    }
                }
                ref t => {
                    if t == type2 {
                        Some((t.clone(), false))
                    } else {
                        None
                    }
                }
            }
        }
    }
    /// Two types are considered equal if one of them is Any or they have the same variant.
    impl PartialEq for Type {
        fn eq(&self, other: &Self) -> bool {
            use self::Type::*;

           
            if let Any = *other {
                return true;
            }
            match *self {
                Any => true,
                Arr(ref box1) => {
                    if let Arr(ref box2) = *other {
                        box1 == box2
                    } else {
                        false
                    }
                }
                Tup(ref tvec1) => {
                    if let Tup(ref tvec2) = *other {
                        tvec1 == tvec2
                    } else {
                        false
                    }
                }
                _ => self.is(other),
            }
        }
    }
    impl Eq for Type {}

    impl fmt::Display for Type {
        fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
            use self::Type::*;

            match *self {
                Any => write!(f, "Any"),
                Null => write!(f, "Null"),
                Bool => write!(f, "Bool"),
                Int => write!(f, "Int"),
                Frac => write!(f, "Frac"),
                Char => write!(f, "Char"),
                Str => write!(f, "Str"),
                Arr(ref boxxy) => write!(f, "Arr({})", boxxy),
                Tup(ref tvec) => write!(
                    f,
                    "Tup({})",
                    match tvec.get(0) {
                        Some(t1) => tvec
                            .iter()
                            .skip(1)
                            .fold(format!("{}", t1), |s, t| format!("{}, {}", s, t)),
                        None => String::from(""),
                    }
                ),
                Obj => write!(f, "Obj"),
            }
        }
    }
}

pub mod u8
{
    pub use std::u8::{ * };
}

pub mod u16
{
    pub use std::u16::{ * };
}

pub mod u32
{
    pub use std::u32::{ * };
}

pub mod u64
{
    pub use std::u64::{ * };
}

pub mod usize
{
    pub use std::usize::{ * };
}

pub mod u128
{
    pub use std::u128::{ * };
}

pub mod values
{
    /*!
    */
    use ::
    {
        arrays::{ self, Arr },
        error::{ OverError },
        fmt::{ Format },
        num::
        {
            big::BigInt,
            rational::BigRational,
            traits::ToPrimitive,
        },
        objects::{ self, Obj },
        result::{ OverResult },
        tuples::{ self, Tup },
        types::{ Type },
        *,
    };
    /*
    
    use crate::{OverResult, INDENT_STEP};
    */
    macro_rules! get_fn
    {
        ( $doc:expr, $name:tt, $type:ty, $variant:ident ) =>
        {
            #[doc=$doc]
            pub fn $name(&self) -> OverResult<$type> {
                if let Value::$variant(ref inner) = *self {
                    Ok(inner.clone())
                } else {
                    Err(OverError::TypeMismatch(Type::$variant, self.get_type()))
                }
            }
        }
    }

    macro_rules! impl_eq
    {
        ($valtype:ident, $type:ty) =>
        {
            impl PartialEq<$type> for Value
            {
                fn eq(&self, other: &$type) -> bool
                {
                    match *self
                    {
                        Value::$valtype(ref value) => value == other,
                        _ => false,
                    }
                }
            }
            
            impl PartialEq<Value> for $type
            {
                fn eq(&self, other: &Value) -> bool
                {
                    match *other
                    {
                        Value::$valtype(ref value) => value == self,
                        _ => false,
                    }
                }
            }
        };
    }
    
    macro_rules! impl_eq_int
    {
        ($type:ty, $fn:tt) =>
        {
            impl PartialEq<$type> for Value
            {
                fn eq(&self, other: &$type) -> bool
                {
                    match *self
                    {
                        Value::Int(ref value) => match value.$fn()
                        {
                            Some(value) => value == *other,
                            None => false,
                        },
                        _ => false,
                    }
                }
            }
            
            impl PartialEq<Value> for $type
            {
                fn eq(&self, other: &Value) -> bool
                {
                    match *other
                    {
                        Value::Int(ref value) => match value.$fn()
                        {
                            Some(value) => value == *self,
                            None => false,
                        },
                        _ => false,
                    }
                }
            }
        };
    }

    macro_rules! impl_from
    {
        ($type:ty, $fn:tt) =>
        {
            impl From<$type> for Value
            {
                fn from(inner: $type) -> Self { Value::$fn(inner.into()) }
            }
        };
    }
    /// Enum of possible values and their inner types.
    #[derive(Clone, Debug, PartialEq)]
    pub enum Value
    {
        /// A null value.
        Null,
        /// A boolean value.
        Bool(bool),
        /// A signed integer value.
        Int(BigInt),
        /// A fractional value.
        Frac(BigRational),
        /// A character value.
        Char(char),
        /// A string value.
        Str(String),
        /// An array value.
        Arr( Arr),
        /// A tuple value.
        Tup( Tup),
        /// An object value.
        Obj( Obj),
    }

    impl Value
    {
        /// Returns true if this `Value` is null.
        pub fn is_null(&self) -> bool {
            if let Value::Null = *self {
                true
            } else {
                false
            }
        }
        /// Returns the `Type` of this `Value`.
        pub fn get_type(&self) -> Type
        {
            use self::Value::*;

            match *self
            {
                Null => Type::Null,
                Bool(_) => Type::Bool,
                Int(_) => Type::Int,
                Frac(_) => Type::Frac,
                Char(_) => Type::Char,
                Str(_) => Type::Str,
                Arr(ref arr) => Type::Arr(Box::new(arr.inner_type())),
                Tup(ref tup) => Type::Tup(tup.inner_type_vec()),
                Obj(_) => Type::Obj,
            }
        }

        get_fn!( r#"Returns the `bool` contained in this `Value`."#, get_bool, bool, Bool );        
        get_fn! ( "Returns the `BigInt` contained in this `Value`.", get_int, BigInt, Int );
        /// Returns the `BigRational` contained in this `Value`.
        pub fn get_frac( &self ) -> OverResult<BigRational>
        {
            match *self 
            {
                Value::Frac(ref inner) => Ok(inner.clone()),
                Value::Int(ref inner) => Ok(frac!(inner.clone(), 1)),
                _ => Err(OverError::TypeMismatch(Type::Frac, self.get_type())),
            }
        }

        get_fn!( "Returns the `char` contained in this `Value`.", get_char, char, Char );        
        get_fn!( r#"Returns the `String` contained in this `Value`."#, get_str, String, Str );        
        get_fn!( "Returns the `Obj` contained in this `Value`.", get_obj, objects::Obj, Obj );

        /// Returns the `Arr` contained in this `Value`.
        pub fn get_arr(&self) -> OverResult<arrays::Arr>
        {
            if let Value::Arr(ref inner) = *self { Ok(inner.clone()) }
            else
            {
                Err
                (
                    OverError::TypeMismatch
                    (
                        Type::Arr(Box::new(Type::Any)),
                        self.get_type(),
                    )
                )
            }
        }
        /// Returns the `Tup` contained in this `Value`.
        pub fn get_tup(&self) -> OverResult<tuples::Tup>
        {
            if let Value::Tup(ref inner) = *self { Ok(inner.clone()) }
            else { Err(OverError::TypeMismatch(Type::Tup(vec![]), self.get_type())) }
        }
    }

    impl fmt::Display for Value
    {
        fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result
        {
            write!(f, "{}", self.format(true, INDENT_STEP))
        }
    }

    impl_eq!(Bool, bool);
    impl_eq!(Int, BigInt);
    impl_eq!(Frac, BigRational);
    impl_eq!(Char, char);
    impl_eq!(Arr, arrays::Arr);
    impl_eq!(Tup, tuples::Tup);
    impl_eq!(Obj, objects::Obj);

    impl<'a> PartialEq<&'a str> for Value
    {
        fn eq(&self, other: &&str) -> bool
        {
            match *self
            {
                Value::Str(ref value) => value == &other.replace("\r\n", "\n"),
                _ => false,
            }
        }
    }

    impl<'a> PartialEq<Value> for &'a str
    {
        fn eq(&self, other: &Value) -> bool
        {
            match *other
            {
                Value::Str(ref value) => value == &self.replace("\r\n", "\n"),
                _ => false,
            }
        }
    }

    impl PartialEq<String> for Value
    {
        fn eq(&self, other: &String) -> bool
        {
            &other.as_str() == self
        }
    }

    impl PartialEq<Value> for String
    {
        fn eq(&self, other: &Value) -> bool
        {
            &self.as_str() == other
        }
    }

    impl_eq_int!(usize, to_usize);
    impl_eq_int!(u8, to_u8);
    impl_eq_int!(u16, to_u16);
    impl_eq_int!(u32, to_u32);
    impl_eq_int!(u64, to_u64);
    impl_eq_int!(i8, to_i8);
    impl_eq_int!(i16, to_i16);
    impl_eq_int!(i32, to_i32);
    impl_eq_int!(i64, to_i64);
    
    impl<'a> From<&'a str> for Value 
    {
        fn from(inner: &str) -> Self 
        {
            Value::Str(inner.into())
        }
    }

    impl_from!(bool, Bool);
    impl_from!(usize, Int);
    impl_from!(u8, Int);
    impl_from!(u16, Int);
    impl_from!(u32, Int);
    impl_from!(u64, Int);
    impl_from!(i8, Int);
    impl_from!(i16, Int);
    impl_from!(i32, Int);
    impl_from!(i64, Int);
    impl_from!(BigInt, Int);
    impl_from!(BigRational, Frac);
    impl_from!(char, Char);
    impl_from!(String, Str);
    impl_from!( arrays::Arr, Arr );
    impl_from!( tuples::Tup, Tup );
    impl_from!( objects::Obj, Obj );
}

pub mod vec
{
    pub use std::vec::{ * };
}
/// Indent step in .over files.
pub const INDENT_STEP: usize = 4;

pub fn main() -> Result<(), error::parse::ParseError>
{
    let document = ::parses::load_from_str
    (
        r#"receipt: "Oz-Ware Purchase Invoice"
            date:    "2012-08-06"
            customer: {
                first_name:  "Dorothy"
                family_name: "Gale"
            }

            items: [
                    {
                    part_no:  "A4786"
                    descrip:  "Water Bucket (Filled)"
                    price:    01.47
                    quantity: 4
                    }
                    {
                    part_no:  "E1628"
                    descrip:  "High Heeled \"Ruby\" Slippers"
                    size:     8
                    price:    133.70
                    quantity: 1
                    }
                ]

            bill_to: {
                street:
                # A multi-line string. Can also be written as "123 Tornado Alley\nSuite16"
            "123 Tornado Alley
            Suite 16"
                city:  "East Centerville"
                state: "KS"
            }

            ship_to: bill_to

            specialDelivery:
            "Follow the Yellow Brick Road to the Emerald City. Pay no attention to the man behind the curtain."
    "#)?;
    
    assert_eq!( document.read( "receipt" )?, "Oz-Ware Purchase Invoice");
    assert_eq!( document.read( "date"    )?, "2012-08-06"              );
    assert_eq!
    (
        document.read("customer")?,
        obj!
        { 
            "first_name"  => "Dorothy", 
            "family_name" => "Gale"
        }
    );

    assert_eq!
    (
        document.read("items")?,
        arr!
        [
            obj!
            {
                "part_no" => "A4786",
                "descrip" => "Water Bucket (Filled)",
                "price" => frac!(147,100),
                "quantity" => 4
            },

            obj!
            {
                "part_no" => "E1628",
                "descrip" => "High Heeled \"Ruby\" Slippers",
                "size" => 8,
                "price" => frac!(1337,10),
                "quantity" => 1
            },
        ]
    );

    assert_eq!
    (
        document.read("bill_to")?,
        obj!
        {
            "street" => "123 Tornado Alley\nSuite 16",
            "city" => "East Centerville",
            "state" => "KS",
        }
    );

    assert_eq!
    (
        document.read("ship_to")?,
        document.read("bill_to")?,
    );

    assert_eq!
    (
        document.read("specialDelivery")?,
        r#"Follow the Yellow Brick Road to the Emerald City.
        Pay no attention to the man behind the curtain."#
    );
    /*
    */
    Ok(())
}
// 34975 /////////////////////////////////////////////////////////////////////////////////////////////////////////////
